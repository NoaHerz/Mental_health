{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Use the FR1, catFR and pyFR datasets to extend Long et al., Current Biology 2017 paper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/ptsa/data/timeseries.py:487: FutureWarning: xarray subclass TimeSeriesX should explicitly define __slots__\n",
      "  class TimeSeriesX(TimeSeries):\n"
     ]
    }
   ],
   "source": [
    "from imports import * "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Start analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Choose subjects that will be used in the analysis (choose either 1. or 2.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. If I want all FR1 and pyFR subjects\n",
    "df = get_data_index(\"r1\")\n",
    "FR1_subs=df[df['experiment']=='FR1']['subject'].unique() # all FR1 subjects\n",
    "df = get_data_index(\"pyfr\")\n",
    "pyfr_subs=df[df['experiment']=='pyFR']['subject'].unique() # all pyFR subjects\n",
    "exp = 'FR1' \n",
    "\n",
    "FR_subs=[]\n",
    "FR_subs = list(FR1_subs)+list(pyfr_subs)\n",
    "print('Total number of FR subjects: ',len(FR_subs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of catFR subjects:  240\n"
     ]
    }
   ],
   "source": [
    "# 2. OR if I want the catFR dataset:\n",
    "df = get_data_index(\"r1\")\n",
    "catFR1_subs=df[df['experiment']=='catFR1']['subject'].unique() # all catFR1 subjects\n",
    "print('Total number of catFR subjects: ',len(catFR1_subs))\n",
    "exp = 'catFR1'\n",
    "FR_subs= catFR1_subs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting subjects based on inclusion criteria and creating a df that summerizes their data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error: sub  R1293P session  1  experiment is:  catFR1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "subject_info=pd.DataFrame([]) # stores data through the analysis\n",
    "output_position=pd.DataFrame([]) \n",
    "for sub in FR_subs: # ['TJ019']:\n",
    "    data=[]\n",
    "    chosen_trials=[]\n",
    "    excluded_trials=[] # added\n",
    "\n",
    "    try:\n",
    "        df = get_data_index(\"r1\")\n",
    "        number_of_loc=df[(df['subject']==sub) & (df['experiment']==exp)]['localization'].unique()\n",
    "       \n",
    "        if len(number_of_loc)==0 and exp == 'FR1' :\n",
    "            df = get_data_index(\"pyfr\")\n",
    "            exp=df[df['subject']==sub][\"experiment\"].iloc[0] # pyfr \n",
    "            number_of_loc=df[(df['subject']==sub) & (df['experiment']==exp)]['localization'].unique() \n",
    "        \n",
    "#         if len(number_of_loc)!=1:  \n",
    "#             print('subject ', sub,': check number of localization') #Localization: A subject will get a new localization if they were reimplanted after another surgery. Therefore, electrodes may be in different places altogether.\n",
    "        \n",
    "        for loc in number_of_loc:\n",
    "            montages = df[(df['subject']==sub) & (df['experiment']==exp) & (df['localization']==loc)]['montage'].unique()\n",
    "            assert len(montages)>0\n",
    "           \n",
    "            for mont in montages: # iterate over montages            \n",
    "                data = df[np.logical_and(df[\"subject\"] == sub, df['experiment']==exp)]\n",
    "                sessions=data[np.logical_and(data['montage']==mont,data['localization']==loc)]['session'].unique()\n",
    "                assert len(sessions)!=0\n",
    "                \n",
    "                for sess in sessions: # iterate over sessions\n",
    "                    reader = CMLReader(sub, exp, sess, montage=mont, localization=loc)   #reader for loading CML data\n",
    "\n",
    "                    evs = reader.load('task_events')#'events' will also do, but you'll get some extra stuff\n",
    "                    evs=evs[evs['list']>=0] # delete negative lists\n",
    "                    #evs=correctEEGoffset(sub,sess,exp,reader,evs) # correcting eeg-behavior misalignment is not needed at this stage\n",
    "                    \n",
    "                    if any(evs.columns=='item'): # for pyfr\n",
    "                        item_column='item'\n",
    "                    elif any(evs.columns=='item_name'): # for r1\n",
    "                        item_column='item_name'\n",
    "                                    \n",
    "                    # number of lists\n",
    "                    num_lists=evs.list.unique()\n",
    "                    num_lists=len(num_lists[num_lists>=0])\n",
    "\n",
    "                    # define the three classes of retrieval events\n",
    "                    # choose recall events preceded by 5000 ms of silence:\n",
    "                    recalled_events = evs[evs['type']=='REC_WORD']\n",
    "                    assert all(recalled_events['list']>=0),'negative list number' # make sure no negative number of list exist\n",
    "\n",
    "                    total_rec_events=len(recalled_events[recalled_events[item_column]!='<>']) # added to compute percentage of excluded trials\n",
    "                    \n",
    "                    # take events that were preceded by a 5,000ms of 'silence'\n",
    "                    # I did not add more ms to account for the duration of vocalization ('rectime' signals the beginning of vocalization)\n",
    "                    \n",
    "                    silence_period = 3000 # or 5000 (in ms)\n",
    "                    for list in recalled_events['list'].unique():\n",
    "                        list_events=recalled_events[recalled_events['list']==list]\n",
    "                        if len(list_events)>0 and list_events.iloc[0]['rectime']>=silence_period: # handle first response\n",
    "                            excluded_trials.append([sess,mont,list_events.index[0]]) # I always discard the first recall. In order to include it, replace 'excluded_trials' here with 'chosen_trials'.\n",
    "                        else:\n",
    "                            excluded_trials.append([sess,mont,list_events.index[0]])\n",
    "                        if len(list_events)>1:\n",
    "                            for i in range(1,len(list_events)):\n",
    "                                diff=list_events['rectime'].iloc[i]-list_events['rectime'].iloc[i-1] # time diff between recalls\n",
    "                                if diff>=silence_period:\n",
    "                                    chosen_trials.append([sess,mont,list_events.index[i]])               \n",
    "                                else:\n",
    "                                    excluded_trials.append([sess,mont,list_events.index[0]])\n",
    "                                    \n",
    "                    sess_excluded_trials=[trial for session,monti,trial in excluded_trials if (session==sess and monti==mont)]\n",
    "                    sess_chosen_trials=[trial for session,monti,trial in chosen_trials if (session==sess and monti==mont)]\n",
    "                    temp_data=recalled_events.loc[sess_chosen_trials]\n",
    "                    \n",
    "                    # delete events that were not eeg recorded\n",
    "                    no_eeg_events=temp_data[temp_data['eegoffset']<0].index\n",
    "                    temp_data=temp_data.drop(labels=no_eeg_events)\n",
    "                    if len(no_eeg_events)>0:\n",
    "                        for no_eeg_row in no_eeg_events:\n",
    "                            sess_chosen_trials.remove(no_eeg_row)\n",
    "                    \n",
    "                    # Delete all word repetitions (Long et al. also rejected all repetitions in correct recall and intrusions)\n",
    "                    rows_to_delete=[]\n",
    "                    verbalization_indexes=[]\n",
    "                    for list in temp_data['list'].unique():\n",
    "                        list_events=temp_data[temp_data['list']==list]\n",
    "                        words_in_session = list_events[item_column]\n",
    "                        for word in words_in_session:\n",
    "                            count=words_in_session.str.count(word)\n",
    "                            if sum(count)>1:\n",
    "                                rows_to_delete.extend(words_in_session.index[count!=0][1:]) # leave only the first index of occurance\n",
    "                        verbalization_indexes.extend(words_in_session[words_in_session=='<>'].index) # reject non-word verbalization (which are coded as ELI's)\n",
    "\n",
    "\n",
    "                    # unique row numbers to delete            \n",
    "                    rows_to_delete_array = np.asarray(rows_to_delete)\n",
    "                    rows_to_delete_array=np.unique(rows_to_delete_array)\n",
    "\n",
    "                     # delete repeating words\n",
    "                    temp_data=temp_data.drop(labels=rows_to_delete_array);\n",
    "                    for trial in rows_to_delete_array:\n",
    "                        sess_chosen_trials.remove(trial)\n",
    "                        if any(verbalization_indexes==trial):\n",
    "                            verbalization_indexes.remove(trial)\n",
    "                    \n",
    "                    # participant had to have a minimum of five items per retrieval class to be\n",
    "                    # included in the analysis;\n",
    "                    \n",
    "                    # count number of intrusions:\n",
    "                    non_verbalization=temp_data[temp_data[item_column]!='<>'] # exclude verbalization from count of ELI's\n",
    "                    intrusions_freq=sum(non_verbalization['intrusion']!=0)\n",
    "                    extra_list_intrusions_freq=sum(non_verbalization['intrusion']==-1) #-1 for extra-list intrusion\n",
    "                    prior_list_intrusions_freq=sum(non_verbalization['intrusion']>0)\n",
    "                    assert extra_list_intrusions_freq + prior_list_intrusions_freq == intrusions_freq, f'there''s an error in calculating the number of intrusions'\n",
    "\n",
    "                    # count number of correct recall:\n",
    "                    correct_recall_freq=sum(non_verbalization['intrusion']==0)\n",
    "\n",
    "                    for list in temp_data['list'].unique():\n",
    "                        recalled_events_within_list=recalled_events[recalled_events['list']==list]\n",
    "                        for recalled_word in temp_data[temp_data['list']==list][item_column]:\n",
    "                            for jj in range(0,len(recalled_events_within_list)):\n",
    "                                if recalled_events_within_list[item_column].iloc[jj]==recalled_word:\n",
    "                                    output_pos={'subject':sub,'session':sess,'montage':mont,'localization':loc,'word recalled':[recalled_word],'intrusion': recalled_events_within_list['intrusion'].iloc[jj],'recalled': recalled_events_within_list['recalled'].iloc[jj],'list':[list],'output position': [jj+1]}\n",
    "                                    output_position=output_position.append(pd.DataFrame(data=output_pos))\n",
    "                                    break # so that the output position will reflect the first recall of the word\n",
    "\n",
    "                    if len((sess_chosen_trials) and (verbalization_indexes))>0:\n",
    "                        for elem in (sess_chosen_trials) and (verbalization_indexes):\n",
    "                            sess_chosen_trials.remove(elem)\n",
    "                    #print(str(sess)+' completed successfully!')\n",
    "\n",
    "                    subject_info = subject_info.append({'subject': sub, 'experiment':exp,'localization': loc, 'montage': mont, 'session':sess, \n",
    "                                                'number of lists': num_lists,\n",
    "                                                'number of trials left':len(temp_data),'total number of intrusions':intrusions_freq,\n",
    "                                                'number of extra-list intrusions': extra_list_intrusions_freq,\n",
    "                                                'number of prior-list intrusions':prior_list_intrusions_freq,\n",
    "                                                'number of prior-list intrusions':prior_list_intrusions_freq,'number of correct recalls':correct_recall_freq,\n",
    "                                                'trials for analysis':sess_chosen_trials,'trials excluded':sess_excluded_trials,'total_rec_events':total_rec_events,'<>verbalization_trials':verbalization_indexes},ignore_index=True )\n",
    "\n",
    "    except:\n",
    "        print('error: sub ',sub, 'session ',sess,' experiment is: ',exp)\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>&lt;&gt;verbalization_trials</th>\n",
       "      <th>experiment</th>\n",
       "      <th>localization</th>\n",
       "      <th>montage</th>\n",
       "      <th>number of correct recalls</th>\n",
       "      <th>number of extra-list intrusions</th>\n",
       "      <th>number of lists</th>\n",
       "      <th>number of prior-list intrusions</th>\n",
       "      <th>number of trials left</th>\n",
       "      <th>session</th>\n",
       "      <th>subject</th>\n",
       "      <th>total number of intrusions</th>\n",
       "      <th>total_rec_events</th>\n",
       "      <th>trials excluded</th>\n",
       "      <th>trials for analysis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[]</td>\n",
       "      <td>catFR1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1004D</td>\n",
       "      <td>3.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>[38, 64, 64, 169, 169, 169, 242, 321, 321, 321...</td>\n",
       "      <td>[67, 244, 482, 562, 564, 651]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  <>verbalization_trials experiment  localization  montage  \\\n",
       "0                     []     catFR1           0.0      0.0   \n",
       "\n",
       "   number of correct recalls  number of extra-list intrusions  \\\n",
       "0                        3.0                              2.0   \n",
       "\n",
       "   number of lists  number of prior-list intrusions  number of trials left  \\\n",
       "0             25.0                              1.0                    6.0   \n",
       "\n",
       "   session subject  total number of intrusions  total_rec_events  \\\n",
       "0      0.0  R1004D                         3.0              24.0   \n",
       "\n",
       "                                     trials excluded  \\\n",
       "0  [38, 64, 64, 169, 169, 169, 242, 321, 321, 321...   \n",
       "\n",
       "             trials for analysis  \n",
       "0  [67, 244, 482, 562, 564, 651]  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at part of the output\n",
    "subject_info[0:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "percent of trials ecxluded: 73.02423039376288\n"
     ]
    }
   ],
   "source": [
    "# check how many trials were excluded\n",
    "excluded_data=pd.DataFrame([])\n",
    "for i in range(0,len(subject_info)):\n",
    "    trials_excluded_per_session=len(subject_info['trials excluded'].iloc[i])\n",
    "    excluded_data=excluded_data.append({'subject':subject_info['subject'].iloc[i],'session':subject_info['session'].iloc[i],'number of lists':subject_info['number of lists'].iloc[i],'num_of_excluded_recalls':trials_excluded_per_session,'total_rec_events':subject_info['total_rec_events'].iloc[i]},ignore_index=True)\n",
    "    \n",
    "# print(np.mean(excluded_data[excluded_data['number of lists']==25]['num_of_excluded_recalls']))\n",
    "# print(np.mean(excluded_data[excluded_data['number of lists']==25]['total_rec_events'])    )\n",
    "percent_excluded=excluded_data['num_of_excluded_recalls']/excluded_data['total_rec_events']*100\n",
    "print('percent of trials ecxluded:', np.mean(percent_excluded))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "percent of remaining subjects: 99.58333333333333\n"
     ]
    }
   ],
   "source": [
    "print('percent of remaining subjects:',len(subject_info['subject'].unique()) / len(FR_subs) *100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "percent of remaining subjects: 62.916666666666664\n"
     ]
    }
   ],
   "source": [
    "# remove subjects with <5 intrusions/correct recall (in each montage seperately)\n",
    "remove_data=[]\n",
    "remove_subejectsMontage=[]\n",
    "for sub in subject_info['subject'].unique():\n",
    "    #print(sub)\n",
    "    sub_data=subject_info[subject_info['subject']==sub]\n",
    "    for loc in sub_data['localization'].unique():\n",
    "        loc_data=sub_data[sub_data['localization']==loc]\n",
    "        for mont in loc_data['montage'].unique():\n",
    "            mont_data = sub_data[sub_data['montage']==mont]\n",
    "            if np.sum(mont_data['total number of intrusions'])<5:\n",
    "#                 print('sub' ,sub, 'montage: ',mont,' has less than 5 intrusions')\n",
    "                remove_data.extend(mont_data.index)\n",
    "                remove_subejectsMontage.append([sub,int(mont),int(loc)]) # used later for output position mat\n",
    "            elif np.sum(mont_data['number of correct recalls'])<5:\n",
    "#                 print('sub' ,sub, 'montage: ',mont,' has less than 5 correct recalls')\n",
    "                remove_data.extend(mont_data.index)\n",
    "                remove_subejectsMontage.append([sub,int(mont),int(loc)]) # used later for output position mat\n",
    "subject_info=subject_info.drop(remove_data, axis=0);\n",
    "print('percent of remaining subjects:',len(subject_info['subject'].unique()) / len(FR_subs) *100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['R1004D', 0, 0]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "remove_subejectsMontage[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# remove data from output position\n",
    "output_position.reset_index(inplace=True) # create serial indexing of rows\n",
    "for sub,mont,loc in remove_subejectsMontage:\n",
    "#     print('sub', sub, 'mont ',mont, 'localization',loc)\n",
    "    delete_rows=output_position[(output_position['subject']==sub) & (output_position['montage']==mont) & (output_position['localization']==loc)].index\n",
    "    output_position=output_position.drop(delete_rows,axis='index')\n",
    "    delete_rows=[]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>subject</th>\n",
       "      <th>session</th>\n",
       "      <th>montage</th>\n",
       "      <th>localization</th>\n",
       "      <th>word recalled</th>\n",
       "      <th>intrusion</th>\n",
       "      <th>recalled</th>\n",
       "      <th>list</th>\n",
       "      <th>output position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "      <td>R1016M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>CABBAGE</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>R1016M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>WIND</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0</td>\n",
       "      <td>R1016M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>GRATER</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0</td>\n",
       "      <td>R1016M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>WATERMELON</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0</td>\n",
       "      <td>R1016M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>HALLWAY</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10749</th>\n",
       "      <td>0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>CRAB</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10750</th>\n",
       "      <td>0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BLUEBERRY</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10751</th>\n",
       "      <td>0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>LIME</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10752</th>\n",
       "      <td>0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BOOKSHELF</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10753</th>\n",
       "      <td>0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>CHAIR</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8911 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index subject  session  montage  localization word recalled  intrusion  \\\n",
       "27         0  R1016M        0        0             0       CABBAGE          0   \n",
       "28         0  R1016M        0        0             0          WIND         -1   \n",
       "29         0  R1016M        0        0             0        GRATER          0   \n",
       "30         0  R1016M        0        0             0    WATERMELON         -1   \n",
       "31         0  R1016M        0        0             0       HALLWAY          0   \n",
       "...      ...     ...      ...      ...           ...           ...        ...   \n",
       "10749      0  R1542J        1        0             0          CRAB          0   \n",
       "10750      0  R1542J        1        0             0     BLUEBERRY          0   \n",
       "10751      0  R1542J        1        0             0          LIME          2   \n",
       "10752      0  R1542J        1        0             0     BOOKSHELF         -1   \n",
       "10753      0  R1542J        1        0             0         CHAIR          1   \n",
       "\n",
       "       recalled  list  output position  \n",
       "27            1     1                2  \n",
       "28            0     1                3  \n",
       "29            1     2                3  \n",
       "30            0     2                4  \n",
       "31            1     3                6  \n",
       "...         ...   ...              ...  \n",
       "10749         1    10                8  \n",
       "10750         1    11                4  \n",
       "10751         0    11                7  \n",
       "10752         0    12                8  \n",
       "10753         0    12                3  \n",
       "\n",
       "[8911 rows x 10 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output_position\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compute mean output position by retrieval class\n",
    "# (right now it's across lists and sessions, within subjects)\n",
    "mean_output_position = pd.DataFrame([])\n",
    "for sub in output_position['subject'].unique():\n",
    "    sub_data=output_position[output_position['subject']==sub]\n",
    "    for loc in sub_data['localization'].unique():\n",
    "        loc_data= sub_data[sub_data['localization']==loc]                    \n",
    "        for mont in loc_data['montage'].unique():\n",
    "            mont_data=loc_data[loc_data['montage']==mont]\n",
    "            correct_recall_output_position=mont_data[mont_data['intrusion']==0]['output position']\n",
    "            avg_correct_recall_output_pos=np.mean(np.array(correct_recall_output_position))\n",
    "\n",
    "            non_verbalization=mont_data[mont_data['word recalled']!='<>'] # exclude verbalizations that are non-word\n",
    "            intrusions_output_position=non_verbalization[non_verbalization['intrusion']!=0]['output position']\n",
    "            avg_intrusions_output_pos=np.mean(np.array(intrusions_output_position))\n",
    "\n",
    "            deliberation_output_position=mont_data['output position']\n",
    "            avg_deliberation_output_pos=np.mean(np.array(deliberation_output_position))\n",
    "\n",
    "            intrusions_list = intrusions_output_position.tolist()\n",
    "            correct_recall_list=correct_recall_output_position.tolist()\n",
    "            deliberation_list=avg_deliberation_output_pos.tolist()\n",
    "\n",
    "            mean_output_position = mean_output_position.append({'subject': sub,'montage':mont,'mean correct recall output position':avg_correct_recall_output_pos,\n",
    "                                                'mean intrusions output position':avg_intrusions_output_pos,'mean deliberation output position':deliberation_list},ignore_index=True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean correct recall output position</th>\n",
       "      <th>mean deliberation output position</th>\n",
       "      <th>mean intrusions output position</th>\n",
       "      <th>montage</th>\n",
       "      <th>subject</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.102041</td>\n",
       "      <td>4.081395</td>\n",
       "      <td>4.054054</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1016M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.277778</td>\n",
       "      <td>4.085714</td>\n",
       "      <td>3.882353</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1021D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.648148</td>\n",
       "      <td>6.857143</td>\n",
       "      <td>8.111111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1028M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.250000</td>\n",
       "      <td>4.161290</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1035M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.565217</td>\n",
       "      <td>4.142857</td>\n",
       "      <td>3.631579</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1036M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>4.362903</td>\n",
       "      <td>4.911950</td>\n",
       "      <td>6.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1530J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>4.875000</td>\n",
       "      <td>5.480000</td>\n",
       "      <td>5.764706</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1533J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>4.581395</td>\n",
       "      <td>4.424242</td>\n",
       "      <td>4.130435</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1536J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>5.507937</td>\n",
       "      <td>5.339130</td>\n",
       "      <td>5.134615</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1541T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>6.769231</td>\n",
       "      <td>6.718750</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1542J</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>155 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     mean correct recall output position  mean deliberation output position  \\\n",
       "0                               4.102041                           4.081395   \n",
       "1                               4.277778                           4.085714   \n",
       "2                               6.648148                           6.857143   \n",
       "3                               4.250000                           4.161290   \n",
       "4                               4.565217                           4.142857   \n",
       "..                                   ...                                ...   \n",
       "150                             4.362903                           4.911950   \n",
       "151                             4.875000                           5.480000   \n",
       "152                             4.581395                           4.424242   \n",
       "153                             5.507937                           5.339130   \n",
       "154                             6.769231                           6.718750   \n",
       "\n",
       "     mean intrusions output position  montage subject  \n",
       "0                           4.054054      0.0  R1016M  \n",
       "1                           3.882353      0.0  R1021D  \n",
       "2                           8.111111      0.0  R1028M  \n",
       "3                           4.000000      0.0  R1035M  \n",
       "4                           3.631579      0.0  R1036M  \n",
       "..                               ...      ...     ...  \n",
       "150                         6.857143      0.0  R1530J  \n",
       "151                         5.764706      0.0  R1533J  \n",
       "152                         4.130435      0.0  R1536J  \n",
       "153                         5.134615      0.0  R1541T  \n",
       "154                         6.500000      0.0  R1542J  \n",
       "\n",
       "[155 rows x 5 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_output_position\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of subjects left:  151\n",
      "correct recall mean output position:  4.28192845103843\n",
      "intrusions mean output position:  4.719967662197749\n",
      "deliberation output position:  4.429127197954293\n"
     ]
    }
   ],
   "source": [
    "assert len(subject_info['subject'].unique()) == len(output_position['subject'].unique())\n",
    "print('number of subjects left: ', len(subject_info['subject'].unique()))\n",
    "print('correct recall mean output position: ',np.mean(mean_output_position['mean correct recall output position']))\n",
    "print('intrusions mean output position: ',np.mean(mean_output_position['mean intrusions output position']))\n",
    "print('deliberation output position: ',np.mean(mean_output_position['mean deliberation output position']))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Anova\n",
      "========================================\n",
      "          F Value Num DF  Den DF  Pr > F\n",
      "----------------------------------------\n",
      "condition 48.3299 2.0000 300.0000 0.0000\n",
      "========================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# repeated-measures one-way ANOVA on output position\n",
    "from statsmodels.stats.anova import AnovaRM\n",
    "\n",
    "anova_df=pd.DataFrame({})\n",
    "a=[mean_output_position.iloc[i,[0,1,2]] for i in range(0,len(mean_output_position))]\n",
    "for ii in range(0,len(a)):\n",
    "    new_df=pd.DataFrame({'subject':mean_output_position.iloc[ii]['subject'],'output position':[a[ii][0],a[ii][1],a[ii][2]],'condition':[1,2,3]})\n",
    "    anova_df=pd.concat([anova_df,new_df])\n",
    "    \n",
    "Anova=AnovaRM(anova_df,'output position',subject='subject',within=['condition'],aggregate_func='mean')\n",
    "print(Anova.fit())\n",
    "\n",
    "#from openpyxl.workbook import Workbook\n",
    "#anova_df.to_excel('/home1/noaherz/Long2017/results/anova.xlsx')\n",
    "#mean_output_position.to_excel('/home1/noaherz/Long2017/results/mean_output_position.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of montages with both extra and prior-list intrusions:  [82]\n",
      "number of subjects with both extra and prior-list intrusions:  80\n"
     ]
    }
   ],
   "source": [
    "# How many subjects had both >5 prior and >5 extra-list intrusions?\n",
    "freq_mont_both_extra_prior_intrusions = np.array([0])\n",
    "subjects_both_extra_prior_intrusions = []\n",
    "for sub in subject_info['subject'].unique():\n",
    "    sub_data=subject_info[subject_info['subject']==sub]\n",
    "    for mont in sub_data['montage'].unique():\n",
    "        mont_data=sub_data[sub_data['montage']==mont]\n",
    "        extra_list=mont_data['number of extra-list intrusions']\n",
    "        sum_extra_list =np.sum(np.array(extra_list))\n",
    "        prior_list=mont_data['number of prior-list intrusions']\n",
    "        sum_prior_list =np.sum(np.array(prior_list))\n",
    "        if sum_prior_list>=5 and sum_extra_list>=5:\n",
    "            #print('subject ',sub, 'mont ',mont, 'has both types of intrusions')\n",
    "            freq_mont_both_extra_prior_intrusions = freq_mont_both_extra_prior_intrusions + 1\n",
    "            subjects_both_extra_prior_intrusions.append([sub,mont])\n",
    "print('number of montages with both extra and prior-list intrusions: ',freq_mont_both_extra_prior_intrusions)\n",
    "my_subs=[sub for sub,mont in subjects_both_extra_prior_intrusions] \n",
    "unique_subs = set(my_subs)\n",
    "print('number of subjects with both extra and prior-list intrusions: ',len(unique_subs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sanity check\n",
    "for i in range(0,len(subject_info)):\n",
    "    assert len(subject_info.iloc[i]['trials for analysis'] +subject_info.iloc[i]['<>verbalization_trials']) == (subject_info.iloc[i]['number of trials left'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "average number of correct recalls across participants: 32.96\n",
      "average number of intrusions across participants: 23.78\n",
      "average number of deliberations across participants: 56.74\n"
     ]
    }
   ],
   "source": [
    "# compute average number of events across participants\n",
    "correct_recall_number=[]\n",
    "intrusion_number=[]\n",
    "deliberation_number=[]\n",
    "for sub in subject_info['subject'].unique():\n",
    "    subjects_mean_data=subject_info[subject_info['subject']==sub]\n",
    "    for mont in subjects_mean_data['montage'].unique():\n",
    "        subject_mont=subjects_mean_data[subjects_mean_data['montage']==mont]\n",
    "        correct_recall_number.append(np.sum(subject_mont['number of correct recalls']))\n",
    "        intrusion_number.append(np.sum(subject_mont['total number of intrusions']))\n",
    "        deliberation_number.append(np.sum(subject_mont['number of trials left']))\n",
    "print('average number of correct recalls across participants:',np.mean(correct_recall_number))  \n",
    "print('average number of intrusions across participants:',np.mean(intrusion_number))\n",
    "print('average number of deliberations across participants:',np.mean(deliberation_number))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save outputs (change accordingly)\n",
    "\n",
    "# output_position.to_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/output_position_FR')\n",
    "# subject_info.to_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/subject_info_FR')\n",
    "\n",
    "output_position.to_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/output_position_FR_3sc')\n",
    "subject_info.to_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/subject_info_FR_3sc')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyse iEEG data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run linear mixed model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from imports import *\n",
    "Start by loading the df and defining some functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/openpyxl/worksheet/_reader.py:300: UserWarning: Data Validation extension is not supported and will be removed\n",
      "  warn(msg)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/ptsa/data/timeseries.py:487: FutureWarning: xarray subclass TimeSeriesX should explicitly define __slots__\n",
      "  class TimeSeriesX(TimeSeries):\n"
     ]
    }
   ],
   "source": [
    "from imports import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data (change accordingly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ## 1. catfR:\n",
    "# output_position = pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/output_position_FR_3sc')\n",
    "# subject_info =  pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/subject_info_FR_3sc')\n",
    "\n",
    "## 2. FR:\n",
    "output_position = pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/output_position_FR_3sc')\n",
    "subject_info =  pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/subject_info_FR_3sc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of subjects:  197\n"
     ]
    }
   ],
   "source": [
    "print('Number of subjects: ',len(subject_info['subject'].unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following functions are relevant only for the catFR1 dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define your ROIs:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %cd '/home1/noaherz/Long2017/git_repos/False-memory'\n",
    "from lrtest import lrtest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run '/home1/noaherz/Long2017/git_repos/False-memory/brain_labels.py'\n",
    "# MTL_labels\n",
    "# DLPFC_labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "HPC_labels,ENT_labels,PHC_labels =getMTLregions(MTL_labels)\n",
    "PHG_labels=ENT_labels+PHC_labels+['prc', 'ba35', 'ba36','left prc','right prc']\n",
    "# PHG_labels\n",
    "# HPC_labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chosen ROIs for the analysis: ['left ca1', 'left ca2', 'left ca3', 'left dg', 'left sub', 'right ca1', 'right ca2', 'right ca3', 'right dg', 'right sub', ' left hippocampus', ' right hippocampus', 'left hippocampus', 'right hippocampus', '\"ca1\"', '\"dg\"', '\"sub\"', 'ca1', 'dg', 'sub']\n"
     ]
    }
   ],
   "source": [
    "# choose your ROI for the rest of the analysis:\n",
    "# region_list =  DLPFC_labels #or: \n",
    "region_list = HPC_labels #/PHG_labels \n",
    "print('Chosen ROIs for the analysis:',region_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chosen subject is on row:  0\n",
      "Chosen subject is on row:  1\n"
     ]
    }
   ],
   "source": [
    "# OPTIONAL - relevant only for bug fixing...\n",
    "for row in range(0,len(subject_info)):\n",
    "    if subject_info['subject'].iloc[row]=='R1001P':\n",
    "        print('Chosen subject is on row: ',row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "single positional indexer is out-of-bounds",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-132-e82a6b2634e5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msubject_info_re\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1766\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1767\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1768\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1769\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1770\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   2136\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2137\u001b[0m             \u001b[0;31m# validate the location\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2138\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2140\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_integer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   2061\u001b[0m         \u001b[0mlen_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2062\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mlen_axis\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mlen_axis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2063\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"single positional indexer is out-of-bounds\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2064\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2065\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: single positional indexer is out-of-bounds"
     ]
    }
   ],
   "source": [
    "row=subject_info_re.iloc[2]\n",
    "row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/cmlreaders/cmlreaders/path_finder.py:239: MultiplePathsFoundWarning: Multiple files found: /data10/RAM/subjects/R1147P/docs/electrode_categories.txt\n",
      "/scratch/pwanda/electrode_categories/electrode_categories_R1147P.txt returning the first file found\n",
      "  warnings.warn(msg, MultiplePathsFoundWarning)\n",
      "/home1/noaherz/cmlreaders/cmlreaders/path_finder.py:239: MultiplePathsFoundWarning: Multiple files found: /protocols/r1/subjects/R1147P/localizations/0/montages/0/neuroradiology/current_processed/pairs.json\n",
      "/data/eeg/R1147P/tal/R1147P_talLocs_database_bipol.mat returning the first file found\n",
      "  warnings.warn(msg, MultiplePathsFoundWarning)\n",
      "/home1/noaherz/cmlreaders/cmlreaders/readers/electrodes.py:236: MissingCoordinatesWarning: Could not load MNI coordinates\n",
      "  \"Could not load MNI coordinates\"))\n",
      "/home1/noaherz/cmlreaders/cmlreaders/path_finder.py:239: MultiplePathsFoundWarning: Multiple files found: /protocols/r1/subjects/R1147P/experiments/FR1/sessions/0/ephys/current_processed/sources.json\n",
      "/data/eeg/R1147P/eeg.noreref/R1147P_FR1_0_12Mar16_1734.params.txt\n",
      "/data/eeg/R1147P/eeg.noreref/params.txt returning the first file found\n",
      "  warnings.warn(msg, MultiplePathsFoundWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPP total time wavelet loop:  27.26995062828064\n"
     ]
    }
   ],
   "source": [
    "# change:\n",
    "save_path='/scratch/noaherz/False-Memory/hippo_pre_recall'\n",
    "\n",
    "import pandas as pd\n",
    "removed_subject=pd.DataFrame(columns=['subject', 'sessions','montage','reason for exclusion'])\n",
    "\n",
    "if row['experiment']!='catFR1':\n",
    "    subject_info =  pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/subject_info_FR_3sc')\n",
    "elif row['experiment']=='catFR1':\n",
    "    subject_info =  pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/subject_info_FR')\n",
    "\n",
    "import os\n",
    "#%cd '/home1/noaherz/Long2017/git_repos/False-memory'\n",
    "os.chdir('/home1/noaherz/Long2017/git_repos/False-memory')\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from cmlreaders import CMLReader, get_data_index\n",
    "import pickle\n",
    "\n",
    "\n",
    "#     import scipy.signal\n",
    "#     from scipy.stats import zscore\n",
    "#     from correctEEGsubjects import correctEEGsubjects\n",
    "#     from correctEEGoffset import correctEEGoffset\n",
    "#     from getElecCats import getElecCats\n",
    "#     from missing_channels import missing_channels\n",
    "#     from getMTLregions import getMTLregions\n",
    "#     from getBadChannels import getBadChannels\n",
    "#     from event_type_index import event_type_index\n",
    "#     from add_semantic_similarity import add_semantic_similarity\n",
    "#     from add_semantic_similarity import case_insensitive_similarity\n",
    "#     from add_semantic_similarity import categorized_words\n",
    "#     from add_output_position import add_output_position\n",
    "#     from brain_label import brain_label\n",
    "\n",
    "#     from add_semantic_relatedness import add_semantic_relatedness,categorized_words\n",
    "#     import gensim.models as models\n",
    "#     import os, csv, numpy, pandas\n",
    "\n",
    "#     from ptsa.data.filters import ButterworthFilter\n",
    "#     from ptsa.data.filters import MorletWaveletFilter\n",
    "#     from add_mirror_buffer_adjusted import add_mirror_buffer_adjusted #\n",
    "#     from regionalizationModule import get_elec_regions,Loc2PairsTranslation\n",
    "#     import xarray as xr\n",
    "#     from irasa.IRASA import IRASA\n",
    "\n",
    "sub = row['subject']\n",
    "exp = row['experiment']\n",
    "sess= int(row['session'])\n",
    "mont= int(row['montage'])\n",
    "loc=  int(row['localization']) # mostly 0  \n",
    "assert len(set(row['trials for analysis']) & set(row['<>verbalization_trials'] ))==0 # make sure there's no overlapping trials\n",
    "trials= row['trials for analysis'] +row['<>verbalization_trials']  \n",
    "\n",
    "if sub=='R1223E' and exp=='catFR1': #problematic eeg loading..\n",
    "    pass\n",
    "reader = CMLReader(sub, exp, sess, montage=mont, localization=loc)\n",
    "evs = reader.load('task_events')\n",
    "evs=add_output_position(evs)\n",
    "\n",
    "#     Semantic_similarity measures: run only on catFR\n",
    "if exp=='catFR1':\n",
    "    evs=add_semantic_similarity(evs)\n",
    "    evs=add_semantic_relatedness(evs)\n",
    "\n",
    "if len(trials)>=0:\n",
    "    chosen_data = evs.loc[trials]\n",
    "    in_list=correctEEGsubjects(sub)\n",
    "    if in_list==True:\n",
    "        chosen_data=correctEEGoffset(sub,sess,exp,reader,chosen_data) # correcting eeg-behavior misalignment\n",
    "\n",
    "    # load bad electrodes information  \n",
    "    remove_soz_ictal=False #True # decide if True (remove seizure onset zone and interictal) or False (exclude only bad channels)\n",
    "    elec_cats,bad_elec_status=getElecCats(reader)\n",
    "    try:\n",
    "        try:\n",
    "            if exp=='pyFR':\n",
    "                tal_path='/data/eeg/'+sub+'/tal/'+sub+'_talLocs_database_bipol.mat'\n",
    "                df = pd.DataFrame(loadmat(tal_path)['bpTalStruct'][0])\n",
    "                channel_info=[[df['channel'][i][0][0],df['channel'][i][0][1],df['tagName'][i][0],df['Loc5'][i][0]] for i in range(0,len(df))]\n",
    "                pairs=pd.DataFrame(channel_info, columns=['contact_1','contact_2','label','stein.region'])\n",
    "\n",
    "            elif exp=='FR1' or exp=='catFR1' :   \n",
    "                pairs = reader.load('pairs')\n",
    "        except:\n",
    "            from ptsa.data.readers import TalReader\n",
    "            tal_path='/data/eeg/'+sub+'/tal/'+sub+'_talLocs_database_bipol.mat'\n",
    "            tr=TalReader(tal_path)\n",
    "            bp=tr.get_bipolar_pairs().astype([('ch0','U8'),('ch1','U8')]) #list of bipolar pairs\n",
    "            pd.set_option('max_columns',None)\n",
    "            loc1=tr.read()\n",
    "            df=pd.DataFrame.from_records(loc1.tolist(),columns=np.array(loc1.dtype.names))\n",
    "            #loc_df.head()\n",
    "            channel_info=[[df['channel'][i][0],df['channel'][i][1],df['tagName'][i],df['Loc5'][i]] for i in range(0,len(df))]\n",
    "            pairs=pd.DataFrame(channel_info, columns=['contact_1','contact_2','label','stein.region'])\n",
    "\n",
    "        pairs,rows=missing_channels(pairs,exp,sub) # handles missing channels in the data\n",
    "\n",
    "        #Grab some EEG \n",
    "        buf = 1500  #to remove edge effects during wavelet convolution\n",
    "#             eeg = reader.load_eeg(events=chosen_data, rel_start=-2500, rel_stop=2500, scheme=pairs)\n",
    "        eeg = reader.load_eeg(events=chosen_data, rel_start=-2500, rel_stop=-100, scheme=pairs)\n",
    "\n",
    "    except:\n",
    "        print('***sub:',sub,'exp:',exp,' eeg data is not loading')\n",
    "        removed_subject=removed_subject.append({'subject':sub, 'sessions':sess,'montage':mont,'reason for exclusion':'eeg loading problem'},ignore_index=True)\n",
    "#         continue\n",
    "\n",
    "#         eeg = add_mirror_buffer_adjusted(eeg,buf/1000)\n",
    "    try:\n",
    "        localizations=reader.load('localizations')\n",
    "    except:\n",
    "        localizations=[]\n",
    "    elect_regions=get_elec_regions(localizations,pairs) # John's script        \n",
    "\n",
    "    # ROI\n",
    "    HPC_labels,PHG_labels=brain_label()\n",
    "#         # choose ROI:\n",
    "    region_list = HPC_labels\n",
    "\n",
    "    mat=np.zeros(len(elect_regions[0]))\n",
    "    for word in region_list:\n",
    "        mat=mat+((elect_regions[0]==word)*1)\n",
    "    hipp_index=np.array(mat)>0 # bool mask\n",
    "\n",
    "    # find bad electrodes\n",
    "    bad_bp_mask = getBadChannels(pairs,elec_cats,remove_soz_ictal)\n",
    "    #concat hippocampus electrodes with good electrodes:\n",
    "    good_bp_mask_bool=bad_bp_mask==0 # good electrodes boolean\n",
    "    good_bp_hipp_mask = good_bp_mask_bool & hipp_index\n",
    "    assert sum(good_bp_hipp_mask) <= sum(hipp_index)\n",
    "\n",
    "    if sum(good_bp_hipp_mask)>0 and ('eeg' in locals()):  # if at least one electrode exists and eeg was loaded \n",
    "\n",
    "        # sample rate should be at least 250Hz\n",
    "        sr = round(eeg.samplerate)\n",
    "        if sr <250:\n",
    "            print('***sub:',sub,'exp:',exp,' sample rate is lower than 250 Hz: sr is: ',sr)\n",
    "            np.save(f\"{save_path}/{sub}_*sr*\",sr)\n",
    "        elif sr >=250:\n",
    "            if sr %100 !=0:\n",
    "                sr=sr-sr%100\n",
    "                eeg=eeg.resample(sr)\n",
    "            eeg_ptsa = eeg.to_ptsa()\n",
    "            del eeg\n",
    "\n",
    "            # Add mirrored buffer\n",
    "            eeg_ptsa = add_mirror_buffer_adjusted(eeg_ptsa,buf/1000)\n",
    "\n",
    "            if sub.startswith('FR'): # Freiburg subjects' line noise is 50Hz\n",
    "                freq_range = [48., 52.]\n",
    "            else:\n",
    "                freq_range = [58., 62.]\n",
    "\n",
    "            b_filter = ButterworthFilter(timeseries=eeg_ptsa, freq_range=freq_range, filt_type='stop', order=4)\n",
    "            eeg_filtered = b_filter.filter()\n",
    "            del eeg_ptsa\n",
    "\n",
    "             # Zero values in the eeg data will become -inf under log transform. \n",
    "            bad_channels=[]\n",
    "            good_channels=[]\n",
    "            for channel in range(0,eeg_filtered.shape[1]):\n",
    "                if (np.array(eeg_filtered[:,channel,:])==0).all(): # bad electrodes with zeros\n",
    "                    bad_channels.append(channel)\n",
    "            for chan in range(0,eeg_filtered.shape[1]):\n",
    "                if chan not in bad_channels:\n",
    "                    good_channels.append(chan)\n",
    "            eeg_filtered=eeg_filtered.isel(channel=good_channels)\n",
    "\n",
    "            if len(bad_channels)>0:\n",
    "                hipp_index=numpy.delete(hipp_index, bad_channels)\n",
    "                good_bp_hipp_mask=numpy.delete(good_bp_hipp_mask, bad_channels)\n",
    "\n",
    "            if not os.path.exists(save_path):\n",
    "                os.mkdir(save_path)\n",
    "            np.save(f\"{save_path}/{sub}_{exp}_hipp_electrodes_{loc}_{mont}_{sess}\",good_bp_hipp_mask)\n",
    "            np.save(f\"{save_path}/{sub}_{exp}_sr\",sr)\n",
    "\n",
    "            #Get spectral power\n",
    "            myfreqs = np.logspace(np.log10(4), np.log10(100), 40)  #4-100 Hz, 40 frequencies\n",
    "#                 widths = np.round(np.logspace(np.log10(2), np.log10(6), 46)) # cycle numbers\n",
    "            wf = MorletWaveletFilter(timeseries=eeg_filtered, freqs=myfreqs, width=4, output='power') \n",
    "            pow_wavelet = wf.filter()   #output is freqs, events, elecs, and time\n",
    "            buff_in_samples=int((buf/1000.)*sr) # convert buffer time to samples\n",
    "            pows = pow_wavelet.isel(time=np.arange(buff_in_samples,len(pow_wavelet.time)-buff_in_samples))  #remove buffer period    \n",
    "            pows = np.log10(pows) # get log of powers. # powes time is 2750 samples, corresponding to 2750/500=5,500ms. # in some versions use:np.log10(pows.data) instead.\n",
    "            del eeg_filtered\n",
    "\n",
    "             # index of event type:\n",
    "            events_index=event_type_index(chosen_data)  \n",
    "#                 np.save(f\"/scratch/noaherz/False-Memory/{sub}_events_index_{loc}_{mont}_{sess}\",events_index)\n",
    "            events_index.to_pickle(f\"{save_path}/{sub}_{exp}_events_index_{loc}_{mont}_{sess}.pkl\")\n",
    "\n",
    "            #Reshape array to average into 100 ms bins with a 50ms sliding window\n",
    "            time_window=int(100/1000*sr) # convert 100ms to samples\n",
    "            sliding_time=int(50/1000*sr) # convert 50ms to samples\n",
    "            time_windows=[(k,k+time_window) for k in range(0,pows.time.shape[0]+1-time_window,sliding_time)] # 50ms sliding window is 25 samples\n",
    "            if len(time_windows)==97: # i=49 terminated before 4455 ms\n",
    "                time_windows.append((time_windows[-1][0]+sliding_time,pows.time.shape[0]))\n",
    "            avg_pows=np.zeros([pows.shape[0],pows.shape[1],pows.shape[2],len(time_windows)])*np.nan # initialize to nans\n",
    "            index=0\n",
    "            for start,end in time_windows:\n",
    "                avg_pows[:,:,:,index]=pows.isel(time=np.arange(start,end)).mean(dim='time')\n",
    "                index=index+1        \n",
    "\n",
    "            avg_pows=xr.DataArray(avg_pows,dims=[pows.dims[0],pows.dims[1],pows.dims[2],pows.dims[3]])\n",
    "            del pows\n",
    "\n",
    "            average_events_time=avg_pows.mean(dim=['event','time'])\n",
    "            standard_deviation_event_time=avg_pows.std(dim=['event','time']) # here I compute std across events and time\n",
    "            z_pows=np.zeros([avg_pows.shape[0],avg_pows.shape[1],avg_pows.shape[2],avg_pows.shape[3]])*np.nan\n",
    "            for freq in range(0,average_events_time.frequency.shape[0]):\n",
    "                for electrode in range(0,average_events_time.channel.shape[0]):\n",
    "                    z_pows[freq,:,electrode,:]=(avg_pows[freq,:,electrode,:]-average_events_time[freq][electrode])/standard_deviation_event_time[freq][electrode]\n",
    "\n",
    "            z_pows=xr.DataArray(z_pows,dims=[avg_pows.dims[0],avg_pows.dims[1],avg_pows.dims[2],avg_pows.dims[3]])\n",
    "            del avg_pows\n",
    "\n",
    "            #SPLIT THE DATA TO EVENTS and average them\n",
    "            pows_correct_recall=z_pows.isel(event=events_index['correct_recall_serial_index'][0])                \n",
    "            pows_PLI=z_pows.isel(event=events_index['PLI_serial_index'][0])\n",
    "            pows_ELI=z_pows.isel(event=events_index['ELI_serial_index'][0])\n",
    "            pows_all_intrusions= z_pows.isel(event=events_index['all_intrusions_serial_index'][0])\n",
    "            pows_deliberation = z_pows.isel(event=events_index['deliberation_serial_index'][0])\n",
    "            pows_related_intrusions = z_pows.isel(event=events_index['related_intrusions_serial_index'][0])\n",
    "            pows_nonrelated_intrusions = z_pows.isel(event=events_index['nonrelated_intrusions_serial_index'][0])\n",
    "            del z_pows\n",
    "\n",
    "            # record output position of chosen events AND semantic similarity / relatedness\n",
    "            # Initialize variables:\n",
    "            output_position_df=pd.DataFrame([])\n",
    "            correct_recall_output_position=[] ; all_intrusions_output_position=[]\n",
    "            deliberation_output_position=[] ; related_intrusions_position=[] ; nonrelated_intrusions_position=[]\n",
    "            correct_recall_semantic_similarity = [] ; all_intrusions_semantic_similarity =[] ; deliberation_semantic_similarity=[]\n",
    "            related_intrusions_semantic_similarity=[] ; nonrelated_intrusions_semantic_similarity=[]\n",
    "            correct_recall_semantic_relatedness=[] ; all_intrusions_semantic_relatedness =[] ; deliberation_semantic_relatedness =[]\n",
    "            related_intrusions_semantic_relatedness=[] ; nonrelated_intrusions_semantic_relatedness=[]\n",
    "\n",
    "            #                 # ADD SIMILAR CRITERIA TO RELATED-NON-RELATED\n",
    "            PLI_num=sum(subject_info[subject_info['subject']==sub]['number of prior-list intrusions'])\n",
    "            ELI_num=sum(subject_info[subject_info['subject']==sub]['number of extra-list intrusions'])\n",
    "\n",
    "#                 evs_counter=evs_counter+1\n",
    "            output_position=pd.DataFrame([])\n",
    "            for event_type in events_index.columns:\n",
    "                output_position=output_position.append({f\"{event_type[0:-13]}_output_position\": chosen_data.iloc[events_index[event_type][0]]['output position']},ignore_index=True )\n",
    "            if PLI_num<5 or ELI_num<5:\n",
    "                output_position = output_position.drop([\"PLI_output_position\", \"ELI_output_position\"], axis=1)                    \n",
    "#                     intusion_counter=intusion_counter+1\n",
    "\n",
    "            semantic_similarity=pd.DataFrame([])\n",
    "            if exp == 'catFR1':\n",
    "                for event_type in events_index.columns:\n",
    "                    semantic_similarity=semantic_similarity.append({f\"{event_type[0:-13]}_semantic_similarity\": chosen_data.iloc[events_index[event_type][0]]['semantic_similarity']},ignore_index=True )\n",
    "                    semantic_similarity=semantic_similarity.append({f\"{event_type[0:-13]}_semantic_relatedness\": chosen_data.iloc[events_index[event_type][0]]['semantic_relatedness']},ignore_index=True )\n",
    "                if PLI_num<5 or ELI_num<5:\n",
    "                    semantic_similarity = semantic_similarity.drop([\"PLI_semantic_similarity\", \"ELI_semantic_similarity\",\"PLI_semantic_relatedness\",\"ELI_semantic_relatedness\"], axis=1)                    \n",
    "\n",
    "\n",
    "            # make sure trials' number align between power values and output position\n",
    "            if PLI_num>=5 and ELI_num>=5:\n",
    "                assert pows_ELI.event.shape[0]==len(output_position['ELI_output_position'].iloc[0])\n",
    "                assert pows_PLI.event.shape[0]==len(output_position['PLI_output_position'].iloc[1])\n",
    "            assert pows_all_intrusions.event.shape[0]==len(output_position['all_intrusions_output_position'].iloc[2])\n",
    "            assert pows_correct_recall.event.shape[0]==len(output_position['correct_recall_output_position'].iloc[3])\n",
    "            assert pows_deliberation.event.shape[0]==len(output_position['deliberation_output_position'].iloc[4])\n",
    "            assert pows_nonrelated_intrusions.event.shape[0] == len(output_position['nonrelated_intrusions_output_position'].iloc[5])\n",
    "            assert pows_related_intrusions.event.shape[0] == len(output_position['related_intrusions_output_position'].iloc[6])\n",
    "\n",
    "            # save power values and dfs\n",
    "            pows_correct_recall.to_netcdf(f\"{save_path}/{sub}_{exp}_correct_recall_pows_{loc}_{mont}_{sess}.nc\")\n",
    "            pows_PLI.to_netcdf(f\"{save_path}/{sub}_{exp}_PLI_pows_{loc}_{mont}_{sess}.nc\")\n",
    "            pows_ELI.to_netcdf(f\"{save_path}/{sub}_{exp}_ELI_pows_{loc}_{mont}_{sess}.nc\")\n",
    "            pows_all_intrusions.to_netcdf(f\"{save_path}/{sub}_{exp}_all_intrusions_pows_{loc}_{mont}_{sess}.nc\")\n",
    "            pows_deliberation.to_netcdf(f\"{save_path}/{sub}_{exp}_deliberation_pows_{loc}_{mont}_{sess}.nc\")\n",
    "            pows_related_intrusions.to_netcdf(f\"{save_path}/{sub}_{exp}_related_intrusions_pows_{loc}_{mont}_{sess}.nc\")\n",
    "            pows_nonrelated_intrusions.to_netcdf(f\"{save_path}/{sub}_{exp}_nonrelated_intrusions_pows_{loc}_{mont}_{sess}.nc\")\n",
    "\n",
    "            # save ouput position and semantic similarity\n",
    "            output_position.to_pickle(f\"{save_path}/{sub}_{exp}_output_position_{loc}_{mont}_{sess}.pkl\")\n",
    "            semantic_similarity.to_pickle(f\"{save_path}/{sub}_{exp}_semantic_similarity_{loc}_{mont}_{sess}.pkl\")\n",
    "\n",
    "            # irasa\n",
    "#                 irasa = IRASA(eeg_ptsa, freqs=myfreqs, samplerate=sr)\n",
    "#                 irasa1 = IRASA(z_pows, freqs=myfreqs, samplerate=sr)\n",
    "\n",
    "#                 file_to_store = open(f\"{sub}_irasa_{loc}_{mont}_{sess}.pickle\", \"wb\")\n",
    "#                 pickle.dump(irasa, file_to_store)\n",
    "#                 file_to_store.close()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the main analysis. I use 'subject_info' that I have built above and iterate over subjects to compute,\n",
    "per trial: power, output position, semantic similarity (if it's a catFR subject)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ieeg_analysis(row):\n",
    "    # change:\n",
    "    save_path='/scratch/noaherz/False-Memory/hippo_pre_recall'\n",
    "    \n",
    "    import pandas as pd\n",
    "    removed_subject=pd.DataFrame(columns=['subject', 'sessions','montage','reason for exclusion'])\n",
    "\n",
    "    if row['experiment']!='catFR1':\n",
    "        subject_info =  pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/subject_info_FR_3sc')\n",
    "    elif row['experiment']=='catFR1':\n",
    "        subject_info =  pd.read_pickle('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/subject_info_FR')\n",
    "  \n",
    "    import os\n",
    "    #%cd '/home1/noaherz/Long2017/git_repos/False-memory'\n",
    "    os.chdir('/home1/noaherz/Long2017/git_repos/False-memory')\n",
    "    \n",
    "    import numpy as np\n",
    "    import pandas as pd\n",
    "    from cmlreaders import CMLReader, get_data_index\n",
    "    import pickle\n",
    "    \n",
    "\n",
    "#     import scipy.signal\n",
    "#     from scipy.stats import zscore\n",
    "#     from correctEEGsubjects import correctEEGsubjects\n",
    "#     from correctEEGoffset import correctEEGoffset\n",
    "#     from getElecCats import getElecCats\n",
    "#     from missing_channels import missing_channels\n",
    "#     from getMTLregions import getMTLregions\n",
    "#     from getBadChannels import getBadChannels\n",
    "#     from event_type_index import event_type_index\n",
    "#     from add_semantic_similarity import add_semantic_similarity\n",
    "#     from add_semantic_similarity import case_insensitive_similarity\n",
    "#     from add_semantic_similarity import categorized_words\n",
    "#     from add_output_position import add_output_position\n",
    "#     from brain_label import brain_label\n",
    "    \n",
    "#     from add_semantic_relatedness import add_semantic_relatedness,categorized_words\n",
    "#     import gensim.models as models\n",
    "#     import os, csv, numpy, pandas\n",
    "\n",
    "#     from ptsa.data.filters import ButterworthFilter\n",
    "#     from ptsa.data.filters import MorletWaveletFilter\n",
    "#     from add_mirror_buffer_adjusted import add_mirror_buffer_adjusted #\n",
    "#     from regionalizationModule import get_elec_regions,Loc2PairsTranslation\n",
    "#     import xarray as xr\n",
    "#     from irasa.IRASA import IRASA\n",
    "\n",
    "    sub = row['subject']\n",
    "    exp = row['experiment']\n",
    "    sess= int(row['session'])\n",
    "    mont= int(row['montage'])\n",
    "    loc=  int(row['localization']) # mostly 0  \n",
    "    assert len(set(row['trials for analysis']) & set(row['<>verbalization_trials'] ))==0 # make sure there's no overlapping trials\n",
    "    trials= row['trials for analysis'] +row['<>verbalization_trials']  \n",
    "    \n",
    "    if sub=='R1223E' and exp=='catFR1': #problematic eeg loading..\n",
    "        pass\n",
    "    reader = CMLReader(sub, exp, sess, montage=mont, localization=loc)\n",
    "    evs = reader.load('task_events')\n",
    "    evs=add_output_position(evs)\n",
    "\n",
    "#     Semantic_similarity measures: run only on catFR\n",
    "    if exp=='catFR1':\n",
    "        evs=add_semantic_similarity(evs)\n",
    "        evs=add_semantic_relatedness(evs)\n",
    "\n",
    "    if len(trials)>=0:\n",
    "        chosen_data = evs.loc[trials]\n",
    "        in_list=correctEEGsubjects(sub)\n",
    "        if in_list==True:\n",
    "            chosen_data=correctEEGoffset(sub,sess,exp,reader,chosen_data) # correcting eeg-behavior misalignment\n",
    "    \n",
    "        # load bad electrodes information  \n",
    "        remove_soz_ictal=False #True # decide if True (remove seizure onset zone and interictal) or False (exclude only bad channels)\n",
    "        elec_cats,bad_elec_status=getElecCats(reader)\n",
    "        try:\n",
    "            try:\n",
    "                if exp=='pyFR':\n",
    "                    tal_path='/data/eeg/'+sub+'/tal/'+sub+'_talLocs_database_bipol.mat'\n",
    "                    df = pd.DataFrame(loadmat(tal_path)['bpTalStruct'][0])\n",
    "                    channel_info=[[df['channel'][i][0][0],df['channel'][i][0][1],df['tagName'][i][0],df['Loc5'][i][0]] for i in range(0,len(df))]\n",
    "                    pairs=pd.DataFrame(channel_info, columns=['contact_1','contact_2','label','stein.region'])\n",
    "\n",
    "                elif exp=='FR1' or exp=='catFR1' :   \n",
    "                    pairs = reader.load('pairs')\n",
    "            except:\n",
    "                from ptsa.data.readers import TalReader\n",
    "                tal_path='/data/eeg/'+sub+'/tal/'+sub+'_talLocs_database_bipol.mat'\n",
    "                tr=TalReader(tal_path)\n",
    "                bp=tr.get_bipolar_pairs().astype([('ch0','U8'),('ch1','U8')]) #list of bipolar pairs\n",
    "                pd.set_option('max_columns',None)\n",
    "                loc1=tr.read()\n",
    "                df=pd.DataFrame.from_records(loc1.tolist(),columns=np.array(loc1.dtype.names))\n",
    "                #loc_df.head()\n",
    "                channel_info=[[df['channel'][i][0],df['channel'][i][1],df['tagName'][i],df['Loc5'][i]] for i in range(0,len(df))]\n",
    "                pairs=pd.DataFrame(channel_info, columns=['contact_1','contact_2','label','stein.region'])\n",
    "\n",
    "            pairs,rows=missing_channels(pairs,exp,sub) # handles missing channels in the data\n",
    "\n",
    "            #Grab some EEG \n",
    "            buf = 1500  #to remove edge effects during wavelet convolution\n",
    "#             eeg = reader.load_eeg(events=chosen_data, rel_start=-2500, rel_stop=2500, scheme=pairs)\n",
    "            eeg = reader.load_eeg(events=chosen_data, rel_start=-2500, rel_stop=-100, scheme=pairs)\n",
    "\n",
    "        except:\n",
    "            print('***sub:',sub,'exp:',exp,' eeg data is not loading')\n",
    "            removed_subject=removed_subject.append({'subject':sub, 'sessions':sess,'montage':mont,'reason for exclusion':'eeg loading problem'},ignore_index=True)\n",
    "    #         continue\n",
    "        \n",
    "#         eeg = add_mirror_buffer_adjusted(eeg,buf/1000)\n",
    "        try:\n",
    "            localizations=reader.load('localizations')\n",
    "        except:\n",
    "            localizations=[]\n",
    "        elect_regions=get_elec_regions(localizations,pairs) # John's script        \n",
    "\n",
    "        # ROI\n",
    "        HPC_labels,PHG_labels=brain_label()\n",
    "#         # choose ROI:\n",
    "        region_list = HPC_labels\n",
    " \n",
    "        mat=np.zeros(len(elect_regions[0]))\n",
    "        for word in region_list:\n",
    "            mat=mat+((elect_regions[0]==word)*1)\n",
    "        hipp_index=np.array(mat)>0 # bool mask\n",
    "\n",
    "        # find bad electrodes\n",
    "        bad_bp_mask = getBadChannels(pairs,elec_cats,remove_soz_ictal)\n",
    "        #concat hippocampus electrodes with good electrodes:\n",
    "        good_bp_mask_bool=bad_bp_mask==0 # good electrodes boolean\n",
    "        good_bp_hipp_mask = good_bp_mask_bool & hipp_index\n",
    "        assert sum(good_bp_hipp_mask) <= sum(hipp_index)\n",
    "        \n",
    "        if sum(good_bp_hipp_mask)>0 and ('eeg' in locals()):  # if at least one electrode exists and eeg was loaded \n",
    "\n",
    "            # sample rate should be at least 250Hz\n",
    "            sr = round(eeg.samplerate)\n",
    "            if sr <250:\n",
    "                print('***sub:',sub,'exp:',exp,' sample rate is lower than 250 Hz: sr is: ',sr)\n",
    "                np.save(f\"{save_path}/{sub}_*sr*\",sr)\n",
    "            elif sr >=250:\n",
    "                if sr %100 !=0:\n",
    "                    sr=sr-sr%100\n",
    "                    eeg=eeg.resample(sr)\n",
    "                eeg_ptsa = eeg.to_ptsa()\n",
    "                del eeg\n",
    "                \n",
    "                # Add mirrored buffer\n",
    "                eeg_ptsa = add_mirror_buffer_adjusted(eeg_ptsa,buf/1000)\n",
    "\n",
    "                if sub.startswith('FR'): # Freiburg subjects' line noise is 50Hz\n",
    "                    freq_range = [48., 52.]\n",
    "                else:\n",
    "                    freq_range = [58., 62.]\n",
    "\n",
    "                b_filter = ButterworthFilter(timeseries=eeg_ptsa, freq_range=freq_range, filt_type='stop', order=4)\n",
    "                eeg_filtered = b_filter.filter()\n",
    "                del eeg_ptsa\n",
    "                \n",
    "                 # Zero values in the eeg data will become -inf under log transform. \n",
    "                bad_channels=[]\n",
    "                good_channels=[]\n",
    "                for channel in range(0,eeg_filtered.shape[1]):\n",
    "                    if (np.array(eeg_filtered[:,channel,:])==0).all(): # bad electrodes with zeros\n",
    "                        bad_channels.append(channel)\n",
    "                for chan in range(0,eeg_filtered.shape[1]):\n",
    "                    if chan not in bad_channels:\n",
    "                        good_channels.append(chan)\n",
    "                eeg_filtered=eeg_filtered.isel(channel=good_channels)\n",
    "                \n",
    "                if len(bad_channels)>0:\n",
    "                    hipp_index=numpy.delete(hipp_index, bad_channels)\n",
    "                    good_bp_hipp_mask=numpy.delete(good_bp_hipp_mask, bad_channels)\n",
    " \n",
    "                if not os.path.exists(save_path):\n",
    "                    os.mkdir(save_path)\n",
    "                np.save(f\"{save_path}/{sub}_{exp}_hipp_electrodes_{loc}_{mont}_{sess}\",good_bp_hipp_mask)\n",
    "                np.save(f\"{save_path}/{sub}_{exp}_sr\",sr)\n",
    "                \n",
    "                #Get spectral power\n",
    "                myfreqs = np.logspace(np.log10(4), np.log10(100), 40)  #4-100 Hz, 40 frequencies\n",
    "#                 widths = np.round(np.logspace(np.log10(2), np.log10(6), 46)) # cycle numbers\n",
    "                wf = MorletWaveletFilter(timeseries=eeg_filtered, freqs=myfreqs, width=4, output='power') \n",
    "                pow_wavelet = wf.filter()   #output is freqs, events, elecs, and time\n",
    "                buff_in_samples=int((buf/1000.)*sr) # convert buffer time to samples\n",
    "                pows = pow_wavelet.isel(time=np.arange(buff_in_samples,len(pow_wavelet.time)-buff_in_samples))  #remove buffer period    \n",
    "                pows = np.log10(pows) # get log of powers. # powes time is 2750 samples, corresponding to 2750/500=5,500ms. # in some versions use:np.log10(pows.data) instead.\n",
    "                del eeg_filtered\n",
    "                \n",
    "                 # index of event type:\n",
    "                events_index=event_type_index(chosen_data)  \n",
    "#                 np.save(f\"/scratch/noaherz/False-Memory/{sub}_events_index_{loc}_{mont}_{sess}\",events_index)\n",
    "                events_index.to_pickle(f\"{save_path}/{sub}_{exp}_events_index_{loc}_{mont}_{sess}.pkl\")\n",
    "                \n",
    "                #Reshape array to average into 100 ms bins with a 50ms sliding window\n",
    "                time_window=int(100/1000*sr) # convert 100ms to samples\n",
    "                sliding_time=int(50/1000*sr) # convert 50ms to samples\n",
    "                time_windows=[(k,k+time_window) for k in range(0,pows.time.shape[0]+1-time_window,sliding_time)] # 50ms sliding window is 25 samples\n",
    "                if len(time_windows)==97: # i=49 terminated before 4455 ms\n",
    "                    time_windows.append((time_windows[-1][0]+sliding_time,pows.time.shape[0]))\n",
    "                avg_pows=np.zeros([pows.shape[0],pows.shape[1],pows.shape[2],len(time_windows)])*np.nan # initialize to nans\n",
    "                index=0\n",
    "                for start,end in time_windows:\n",
    "                    avg_pows[:,:,:,index]=pows.isel(time=np.arange(start,end)).mean(dim='time')\n",
    "                    index=index+1        \n",
    "                \n",
    "                avg_pows=xr.DataArray(avg_pows,dims=[pows.dims[0],pows.dims[1],pows.dims[2],pows.dims[3]])\n",
    "                del pows\n",
    "                \n",
    "                average_events_time=avg_pows.mean(dim=['event','time'])\n",
    "                standard_deviation_event_time=avg_pows.std(dim=['event','time']) # here I compute std across events and time\n",
    "                z_pows=np.zeros([avg_pows.shape[0],avg_pows.shape[1],avg_pows.shape[2],avg_pows.shape[3]])*np.nan\n",
    "                for freq in range(0,average_events_time.frequency.shape[0]):\n",
    "                    for electrode in range(0,average_events_time.channel.shape[0]):\n",
    "                        z_pows[freq,:,electrode,:]=(avg_pows[freq,:,electrode,:]-average_events_time[freq][electrode])/standard_deviation_event_time[freq][electrode]\n",
    "\n",
    "                z_pows=xr.DataArray(z_pows,dims=[avg_pows.dims[0],avg_pows.dims[1],avg_pows.dims[2],avg_pows.dims[3]])\n",
    "                del avg_pows\n",
    "                \n",
    "                #SPLIT THE DATA TO EVENTS and average them\n",
    "                pows_correct_recall=z_pows.isel(event=events_index['correct_recall_serial_index'][0])                \n",
    "                pows_PLI=z_pows.isel(event=events_index['PLI_serial_index'][0])\n",
    "                pows_ELI=z_pows.isel(event=events_index['ELI_serial_index'][0])\n",
    "                pows_all_intrusions= z_pows.isel(event=events_index['all_intrusions_serial_index'][0])\n",
    "                pows_deliberation = z_pows.isel(event=events_index['deliberation_serial_index'][0])\n",
    "                pows_related_intrusions = z_pows.isel(event=events_index['related_intrusions_serial_index'][0])\n",
    "                pows_nonrelated_intrusions = z_pows.isel(event=events_index['nonrelated_intrusions_serial_index'][0])\n",
    "                del z_pows\n",
    "                \n",
    "                # record output position of chosen events AND semantic similarity / relatedness\n",
    "                # Initialize variables:\n",
    "                output_position_df=pd.DataFrame([])\n",
    "                correct_recall_output_position=[] ; all_intrusions_output_position=[]\n",
    "                deliberation_output_position=[] ; related_intrusions_position=[] ; nonrelated_intrusions_position=[]\n",
    "                correct_recall_semantic_similarity = [] ; all_intrusions_semantic_similarity =[] ; deliberation_semantic_similarity=[]\n",
    "                related_intrusions_semantic_similarity=[] ; nonrelated_intrusions_semantic_similarity=[]\n",
    "                correct_recall_semantic_relatedness=[] ; all_intrusions_semantic_relatedness =[] ; deliberation_semantic_relatedness =[]\n",
    "                related_intrusions_semantic_relatedness=[] ; nonrelated_intrusions_semantic_relatedness=[]\n",
    "                \n",
    "                #                 # ADD SIMILAR CRITERIA TO RELATED-NON-RELATED\n",
    "                PLI_num=sum(subject_info[subject_info['subject']==sub]['number of prior-list intrusions'])\n",
    "                ELI_num=sum(subject_info[subject_info['subject']==sub]['number of extra-list intrusions'])\n",
    "\n",
    "#                 evs_counter=evs_counter+1\n",
    "                output_position=pd.DataFrame([])\n",
    "                for event_type in events_index.columns:\n",
    "                    output_position=output_position.append({f\"{event_type[0:-13]}_output_position\": chosen_data.iloc[events_index[event_type][0]]['output position']},ignore_index=True )\n",
    "                if PLI_num<5 or ELI_num<5:\n",
    "                    output_position = output_position.drop([\"PLI_output_position\", \"ELI_output_position\"], axis=1)                    \n",
    "#                     intusion_counter=intusion_counter+1\n",
    "                \n",
    "                semantic_similarity=pd.DataFrame([])\n",
    "                if exp == 'catFR1':\n",
    "                    for event_type in events_index.columns:\n",
    "                        semantic_similarity=semantic_similarity.append({f\"{event_type[0:-13]}_semantic_similarity\": chosen_data.iloc[events_index[event_type][0]]['semantic_similarity']},ignore_index=True )\n",
    "                        semantic_similarity=semantic_similarity.append({f\"{event_type[0:-13]}_semantic_relatedness\": chosen_data.iloc[events_index[event_type][0]]['semantic_relatedness']},ignore_index=True )\n",
    "                    if PLI_num<5 or ELI_num<5:\n",
    "                        semantic_similarity = semantic_similarity.drop([\"PLI_semantic_similarity\", \"ELI_semantic_similarity\",\"PLI_semantic_relatedness\",\"ELI_semantic_relatedness\"], axis=1)                    \n",
    "\n",
    "                        \n",
    "                # make sure trials' number align between power values and output position\n",
    "                if PLI_num>=5 and ELI_num>=5:\n",
    "                    assert pows_ELI.event.shape[0]==len(output_position['ELI_output_position'].iloc[0])\n",
    "                    assert pows_PLI.event.shape[0]==len(output_position['PLI_output_position'].iloc[1])\n",
    "                assert pows_all_intrusions.event.shape[0]==len(output_position['all_intrusions_output_position'].iloc[2])\n",
    "                assert pows_correct_recall.event.shape[0]==len(output_position['correct_recall_output_position'].iloc[3])\n",
    "                assert pows_deliberation.event.shape[0]==len(output_position['deliberation_output_position'].iloc[4])\n",
    "                assert pows_nonrelated_intrusions.event.shape[0] == len(output_position['nonrelated_intrusions_output_position'].iloc[5])\n",
    "                assert pows_related_intrusions.event.shape[0] == len(output_position['related_intrusions_output_position'].iloc[6])\n",
    "\n",
    "                # save power values and dfs\n",
    "                pows_correct_recall.to_netcdf(f\"{save_path}/{sub}_{exp}_correct_recall_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                pows_PLI.to_netcdf(f\"{save_path}/{sub}_{exp}_PLI_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                pows_ELI.to_netcdf(f\"{save_path}/{sub}_{exp}_ELI_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                pows_all_intrusions.to_netcdf(f\"{save_path}/{sub}_{exp}_all_intrusions_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                pows_deliberation.to_netcdf(f\"{save_path}/{sub}_{exp}_deliberation_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                pows_related_intrusions.to_netcdf(f\"{save_path}/{sub}_{exp}_related_intrusions_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                pows_nonrelated_intrusions.to_netcdf(f\"{save_path}/{sub}_{exp}_nonrelated_intrusions_pows_{loc}_{mont}_{sess}.nc\")\n",
    "                    \n",
    "                # save ouput position and semantic similarity\n",
    "                output_position.to_pickle(f\"{save_path}/{sub}_{exp}_output_position_{loc}_{mont}_{sess}.pkl\")\n",
    "                semantic_similarity.to_pickle(f\"{save_path}/{sub}_{exp}_semantic_similarity_{loc}_{mont}_{sess}.pkl\")\n",
    "\n",
    "                # irasa\n",
    "#                 irasa = IRASA(eeg_ptsa, freqs=myfreqs, samplerate=sr)\n",
    "#                 irasa1 = IRASA(z_pows, freqs=myfreqs, samplerate=sr)\n",
    "\n",
    "#                 file_to_store = open(f\"{sub}_irasa_{loc}_{mont}_{sess}.pickle\", \"wb\")\n",
    "#                 pickle.dump(irasa, file_to_store)\n",
    "#                 file_to_store.close()\n",
    "                \n",
    "\n",
    "    return removed_subject\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.\n",
      "  from distributed.utils import tmpfile\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<dask.config.set at 0x2b9e13b9f1d0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import CMLDask\n",
    "from dask.distributed import wait, as_completed, progress\n",
    "\n",
    "import dask\n",
    "import distributed\n",
    "dask.config.set({\"distributed.comm.timeouts.tcp\": \"60s\"})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique port for noaherz is 51409\n",
      "{'dashboard_address': ':51409'}\n",
      "To view the dashboard, run: \n",
      "`ssh -fN noaherz@rhino2.psych.upenn.edu -L 8000:192.168.86.145:51409` in your local computer's terminal (NOT rhino) \n",
      "and then navigate to localhost:8000 in your browser\n"
     ]
    }
   ],
   "source": [
    "client = CMLDask.new_dask_client(\"test_dask\", \"20GB\") # you can make this higher (memory limit per worker)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see the job's progress, open a new terminal window and type the ssh command appearing above.\n",
    "If not using the universoty's VPN, change 8000 to 8001.\n",
    "Then, in a new tab on your browser type: localhost:8001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<strong>Future: mod_ieeg_analysis</strong>\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> status: </span>\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-error-color0, black)\">pending</span>,\n",
       "\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> type:</span> NoneType,\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> key:</span> mod_ieeg_analysis-11584633483a30a2169c906679041082"
      ],
      "text/plain": [
       "<Future: pending, key: mod_ieeg_analysis-11584633483a30a2169c906679041082>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# client.submit(mod_ieeg_analysis, row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "subject_info1=subject_info[200:250]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "# row=subject_info.iloc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# subject_info_re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e29885acb45f4511a7221dede39d7e38",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "distributed.client - ERROR - Failed to reconnect to scheduler after 30.00 seconds, closing client\n",
      "_GatheringFuture exception was never retrieved\n",
      "future: <_GatheringFuture finished exception=CancelledError()>\n",
      "concurrent.futures._base.CancelledError\n"
     ]
    }
   ],
   "source": [
    "# futures = client.map(main_ieeg_analysis, [row for i, row in subject_info.iterrows()])\n",
    "# %cd /home1/noaherz/Long2017/git_repos/False-memory\n",
    "futures = client.map(ieeg_analysis, [row for i, row in subject_info1.iterrows()])\n",
    "\n",
    "progress(futures)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "client.shutdown()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following commends (on terminal) may be useful in case I have open ports that I forgot to close:\n",
    "\n",
    "    ps aux | grep ssh\n",
    "\n",
    "    kill 2132"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>param</th>\n",
       "      <th>exception</th>\n",
       "      <th>traceback_obj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>&lt;&gt;verbalization_trials                        ...</td>\n",
       "      <td>KilledWorker('ieeg_analysis-bd2815e6b9aed11aac...</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   param  \\\n",
       "index                                                      \n",
       "0      <>verbalization_trials                        ...   \n",
       "\n",
       "                                               exception traceback_obj  \n",
       "index                                                                   \n",
       "0      KilledWorker('ieeg_analysis-bd2815e6b9aed11aac...          None  "
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# wait(futures)\n",
    "# errors = CMLDask.get_exceptions(futures, row)\n",
    "errors = CMLDask.get_exceptions(futures,[row for i, row in subject_info1.iterrows()])\n",
    "errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Int64Index([0], dtype='int64', name='index')]"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subject_info_re=subject_info1.iloc[errors.index]\n",
    "# subject_info_re\n",
    "[errors.index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>&lt;&gt;verbalization_trials</th>\n",
       "      <th>experiment</th>\n",
       "      <th>localization</th>\n",
       "      <th>montage</th>\n",
       "      <th>number of correct recalls</th>\n",
       "      <th>number of extra-list intrusions</th>\n",
       "      <th>number of lists</th>\n",
       "      <th>number of prior-list intrusions</th>\n",
       "      <th>number of trials left</th>\n",
       "      <th>session</th>\n",
       "      <th>subject</th>\n",
       "      <th>total number of intrusions</th>\n",
       "      <th>total_rec_events</th>\n",
       "      <th>trials excluded</th>\n",
       "      <th>trials for analysis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>[]</td>\n",
       "      <td>FR1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1120E</td>\n",
       "      <td>15.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>[41, 41, 41, 41, 65, 65, 65, 65, 90, 90, 90, 1...</td>\n",
       "      <td>[68, 93, 118, 140, 141, 143, 144, 188, 189, 19...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>[]</td>\n",
       "      <td>FR1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1134T</td>\n",
       "      <td>37.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>[38, 60, 60, 60, 86, 86, 118, 118, 145, 145, 1...</td>\n",
       "      <td>[39, 62, 65, 88, 89, 91, 119, 123, 194, 197, 2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>[]</td>\n",
       "      <td>FR1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R1134T</td>\n",
       "      <td>48.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>[38, 60, 60, 60, 86, 86, 118, 118, 145, 145, 1...</td>\n",
       "      <td>[39, 62, 65, 88, 89, 91, 119, 123, 194, 197, 2...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    <>verbalization_trials experiment  localization  montage  \\\n",
       "142                     []        FR1           0.0      0.0   \n",
       "171                     []        FR1           0.0      0.0   \n",
       "172                     []        FR1           0.0      0.0   \n",
       "\n",
       "     number of correct recalls  number of extra-list intrusions  \\\n",
       "142                       29.0                              5.0   \n",
       "171                       14.0                             11.0   \n",
       "172                        3.0                             26.0   \n",
       "\n",
       "     number of lists  number of prior-list intrusions  number of trials left  \\\n",
       "142             25.0                             10.0                   44.0   \n",
       "171             25.0                             26.0                   51.0   \n",
       "172             25.0                             22.0                   51.0   \n",
       "\n",
       "     session subject  total number of intrusions  total_rec_events  \\\n",
       "142      0.0  R1120E                        15.0             127.0   \n",
       "171      0.0  R1134T                        37.0             109.0   \n",
       "172      1.0  R1134T                        48.0             109.0   \n",
       "\n",
       "                                       trials excluded  \\\n",
       "142  [41, 41, 41, 41, 65, 65, 65, 65, 90, 90, 90, 1...   \n",
       "171  [38, 60, 60, 60, 86, 86, 118, 118, 145, 145, 1...   \n",
       "172  [38, 60, 60, 60, 86, 86, 118, 118, 145, 145, 1...   \n",
       "\n",
       "                                   trials for analysis  \n",
       "142  [68, 93, 118, 140, 141, 143, 144, 188, 189, 19...  \n",
       "171  [39, 62, 65, 88, 89, 91, 119, 123, 194, 197, 2...  \n",
       "172  [39, 62, 65, 88, 89, 91, 119, 123, 194, 197, 2...  "
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subject_info_re"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "row=subject_info_re.iloc[0]\n",
    "row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"<ipython-input-8-0fcffa2163ea>\", line 185, in ieeg_analysis\n",
      "    pow_wavelet = wf.filter()   #output is freqs, events, elecs, and time\n",
      "  File \"/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/ptsa/data/filters/morlet.py\", line 95, in filter\n",
      "    len(self.timeseries['time'])), dtype=np.float)\n"
     ]
    }
   ],
   "source": [
    "CMLDask.print_traceback(errors, 22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "zip argument #1 must support iteration",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-17-3b2bf1d67755>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mCMLDask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_exceptions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/home1/noaherz/cmldask/CMLDask.py\u001b[0m in \u001b[0;36mget_exceptions\u001b[0;34m(futures, params)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_exceptions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfutures\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mFuture\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0mexceptions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"index\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"param\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"exception\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"traceback_obj\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mparam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfutures\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"error\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m             exceptions = exceptions.append(\n",
      "\u001b[0;31mTypeError\u001b[0m: zip argument #1 must support iteration"
     ]
    }
   ],
   "source": [
    "CMLDask.get_exceptions(errors,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: [], Empty DataFrame\n",
       " Columns: [subject, sessions, montage, reason for exclusion]\n",
       " Index: []]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "good_futures = CMLDask.filter_futures(futures)\n",
    "client.gather(good_futures)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/scratch/noaherz/False-Memory/hippo_pre_recall\n",
      "R1001P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1001P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1001P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1001P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1001P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1001P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1001P_FR1_ELI_pows_0_0_0.nc\n",
      "R1001P_FR1_ELI_pows_0_0_1.nc\n",
      "R1001P_FR1_events_index_0_0_0.pkl\n",
      "R1001P_FR1_events_index_0_0_1.pkl\n",
      "R1001P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1001P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1001P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1001P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1001P_FR1_output_position_0_0_0.pkl\n",
      "R1001P_FR1_output_position_0_0_1.pkl\n",
      "R1001P_FR1_PLI_pows_0_0_0.nc\n",
      "R1001P_FR1_PLI_pows_0_0_1.nc\n",
      "R1001P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1001P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1001P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1001P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1001P_FR1_sr.npy\n",
      "R1002P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1002P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1002P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1002P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1002P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1002P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1002P_FR1_ELI_pows_0_0_0.nc\n",
      "R1002P_FR1_ELI_pows_0_0_1.nc\n",
      "R1002P_FR1_events_index_0_0_0.pkl\n",
      "R1002P_FR1_events_index_0_0_1.pkl\n",
      "R1002P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1002P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1002P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1002P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1002P_FR1_output_position_0_0_0.pkl\n",
      "R1002P_FR1_output_position_0_0_1.pkl\n",
      "R1002P_FR1_PLI_pows_0_0_0.nc\n",
      "R1002P_FR1_PLI_pows_0_0_1.nc\n",
      "R1002P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1002P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1002P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1002P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1002P_FR1_sr.npy\n",
      "R1003P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1003P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1003P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1003P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1003P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1003P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1003P_FR1_ELI_pows_0_0_0.nc\n",
      "R1003P_FR1_ELI_pows_0_0_1.nc\n",
      "R1003P_FR1_events_index_0_0_0.pkl\n",
      "R1003P_FR1_events_index_0_0_1.pkl\n",
      "R1003P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1003P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1003P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1003P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1003P_FR1_output_position_0_0_0.pkl\n",
      "R1003P_FR1_output_position_0_0_1.pkl\n",
      "R1003P_FR1_PLI_pows_0_0_0.nc\n",
      "R1003P_FR1_PLI_pows_0_0_1.nc\n",
      "R1003P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1003P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1003P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1003P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1003P_FR1_sr.npy\n",
      "R1006P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1006P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1006P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1006P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1006P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1006P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1006P_FR1_ELI_pows_0_0_0.nc\n",
      "R1006P_FR1_ELI_pows_0_0_1.nc\n",
      "R1006P_FR1_events_index_0_0_0.pkl\n",
      "R1006P_FR1_events_index_0_0_1.pkl\n",
      "R1006P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1006P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1006P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1006P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1006P_FR1_output_position_0_0_0.pkl\n",
      "R1006P_FR1_output_position_0_0_1.pkl\n",
      "R1006P_FR1_PLI_pows_0_0_0.nc\n",
      "R1006P_FR1_PLI_pows_0_0_1.nc\n",
      "R1006P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1006P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1006P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1006P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1006P_FR1_sr.npy\n",
      "R1010J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1010J_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1010J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1010J_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1010J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1010J_FR1_deliberation_pows_0_0_1.nc\n",
      "R1010J_FR1_ELI_pows_0_0_0.nc\n",
      "R1010J_FR1_ELI_pows_0_0_1.nc\n",
      "R1010J_FR1_events_index_0_0_0.pkl\n",
      "R1010J_FR1_events_index_0_0_1.pkl\n",
      "R1010J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1010J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1010J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1010J_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1010J_FR1_output_position_0_0_0.pkl\n",
      "R1010J_FR1_output_position_0_0_1.pkl\n",
      "R1010J_FR1_PLI_pows_0_0_0.nc\n",
      "R1010J_FR1_PLI_pows_0_0_1.nc\n",
      "R1010J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1010J_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1010J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1010J_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1010J_FR1_sr.npy\n",
      "R1020J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1020J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1020J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1020J_FR1_ELI_pows_0_0_0.nc\n",
      "R1020J_FR1_events_index_0_0_0.pkl\n",
      "R1020J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1020J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1020J_FR1_output_position_0_0_0.pkl\n",
      "R1020J_FR1_PLI_pows_0_0_0.nc\n",
      "R1020J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1020J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1020J_FR1_sr.npy\n",
      "R1022J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1022J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1022J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1022J_FR1_ELI_pows_0_0_0.nc\n",
      "R1022J_FR1_events_index_0_0_0.pkl\n",
      "R1022J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1022J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1022J_FR1_output_position_0_0_0.pkl\n",
      "R1022J_FR1_PLI_pows_0_0_0.nc\n",
      "R1022J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1022J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1022J_FR1_sr.npy\n",
      "R1033D_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1033D_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1033D_FR1_deliberation_pows_0_0_0.nc\n",
      "R1033D_FR1_ELI_pows_0_0_0.nc\n",
      "R1033D_FR1_events_index_0_0_0.pkl\n",
      "R1033D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1033D_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1033D_FR1_output_position_0_0_0.pkl\n",
      "R1033D_FR1_PLI_pows_0_0_0.nc\n",
      "R1033D_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1033D_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1033D_FR1_sr.npy\n",
      "R1034D_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1034D_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1034D_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1034D_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1034D_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1034D_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1034D_FR1_deliberation_pows_0_0_0.nc\n",
      "R1034D_FR1_deliberation_pows_0_0_1.nc\n",
      "R1034D_FR1_deliberation_pows_0_0_2.nc\n",
      "R1034D_FR1_ELI_pows_0_0_0.nc\n",
      "R1034D_FR1_ELI_pows_0_0_1.nc\n",
      "R1034D_FR1_ELI_pows_0_0_2.nc\n",
      "R1034D_FR1_events_index_0_0_0.pkl\n",
      "R1034D_FR1_events_index_0_0_1.pkl\n",
      "R1034D_FR1_events_index_0_0_2.pkl\n",
      "R1034D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1034D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1034D_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1034D_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1034D_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1034D_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1034D_FR1_output_position_0_0_0.pkl\n",
      "R1034D_FR1_output_position_0_0_1.pkl\n",
      "R1034D_FR1_output_position_0_0_2.pkl\n",
      "R1034D_FR1_PLI_pows_0_0_0.nc\n",
      "R1034D_FR1_PLI_pows_0_0_1.nc\n",
      "R1034D_FR1_PLI_pows_0_0_2.nc\n",
      "R1034D_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1034D_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1034D_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1034D_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1034D_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1034D_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1034D_FR1_sr.npy\n",
      "R1045E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1045E_FR1_sr.npy\n",
      "R1048E_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1048E_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1048E_FR1_deliberation_pows_0_0_0.nc\n",
      "R1048E_FR1_ELI_pows_0_0_0.nc\n",
      "R1048E_FR1_events_index_0_0_0.pkl\n",
      "R1048E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1048E_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1048E_FR1_output_position_0_0_0.pkl\n",
      "R1048E_FR1_PLI_pows_0_0_0.nc\n",
      "R1048E_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1048E_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1048E_FR1_sr.npy\n",
      "R1049J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1049J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1049J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1049J_FR1_ELI_pows_0_0_0.nc\n",
      "R1049J_FR1_events_index_0_0_0.pkl\n",
      "R1049J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1049J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1049J_FR1_output_position_0_0_0.pkl\n",
      "R1049J_FR1_PLI_pows_0_0_0.nc\n",
      "R1049J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1049J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1049J_FR1_sr.npy\n",
      "R1052E_FR1_all_intrusions_pows_0_1_0.nc\n",
      "R1052E_FR1_all_intrusions_pows_0_1_1.nc\n",
      "R1052E_FR1_correct_recall_pows_0_1_0.nc\n",
      "R1052E_FR1_correct_recall_pows_0_1_1.nc\n",
      "R1052E_FR1_deliberation_pows_0_1_0.nc\n",
      "R1052E_FR1_deliberation_pows_0_1_1.nc\n",
      "R1052E_FR1_ELI_pows_0_1_0.nc\n",
      "R1052E_FR1_ELI_pows_0_1_1.nc\n",
      "R1052E_FR1_events_index_0_1_0.pkl\n",
      "R1052E_FR1_events_index_0_1_1.pkl\n",
      "R1052E_FR1_hipp_electrodes_0_1_0.npy\n",
      "R1052E_FR1_hipp_electrodes_0_1_1.npy\n",
      "R1052E_FR1_nonrelated_intrusions_pows_0_1_0.nc\n",
      "R1052E_FR1_nonrelated_intrusions_pows_0_1_1.nc\n",
      "R1052E_FR1_output_position_0_1_0.pkl\n",
      "R1052E_FR1_output_position_0_1_1.pkl\n",
      "R1052E_FR1_PLI_pows_0_1_0.nc\n",
      "R1052E_FR1_PLI_pows_0_1_1.nc\n",
      "R1052E_FR1_related_intrusions_pows_0_1_0.nc\n",
      "R1052E_FR1_related_intrusions_pows_0_1_1.nc\n",
      "R1052E_FR1_semantic_similarity_0_1_0.pkl\n",
      "R1052E_FR1_semantic_similarity_0_1_1.pkl\n",
      "R1052E_FR1_sr.npy\n",
      "R1053M_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1053M_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1053M_FR1_deliberation_pows_0_0_0.nc\n",
      "R1053M_FR1_ELI_pows_0_0_0.nc\n",
      "R1053M_FR1_events_index_0_0_0.pkl\n",
      "R1053M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1053M_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1053M_FR1_output_position_0_0_0.pkl\n",
      "R1053M_FR1_PLI_pows_0_0_0.nc\n",
      "R1053M_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1053M_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1053M_FR1_sr.npy\n",
      "R1061T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1061T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1061T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1061T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1061T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1061T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1061T_FR1_ELI_pows_0_0_1.nc\n",
      "R1061T_FR1_ELI_pows_0_0_2.nc\n",
      "R1061T_FR1_events_index_0_0_1.pkl\n",
      "R1061T_FR1_events_index_0_0_2.pkl\n",
      "R1061T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1061T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1061T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1061T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1061T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1061T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1061T_FR1_output_position_0_0_1.pkl\n",
      "R1061T_FR1_output_position_0_0_2.pkl\n",
      "R1061T_FR1_PLI_pows_0_0_1.nc\n",
      "R1061T_FR1_PLI_pows_0_0_2.nc\n",
      "R1061T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1061T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1061T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1061T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1061T_FR1_sr.npy\n",
      "R1063C_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1063C_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1063C_FR1_deliberation_pows_0_0_0.nc\n",
      "R1063C_FR1_ELI_pows_0_0_0.nc\n",
      "R1063C_FR1_events_index_0_0_0.pkl\n",
      "R1063C_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1063C_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1063C_FR1_output_position_0_0_0.pkl\n",
      "R1063C_FR1_PLI_pows_0_0_0.nc\n",
      "R1063C_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1063C_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1063C_FR1_sr.npy\n",
      "R1065J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1065J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1065J_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1065J_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1065J_FR1_hipp_electrodes_0_0_4.npy\n",
      "R1065J_FR1_hipp_electrodes_0_0_5.npy\n",
      "R1065J_FR1_sr.npy\n",
      "R1066P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1066P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1066P_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1066P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1066P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1066P_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1066P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1066P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1066P_FR1_deliberation_pows_0_0_2.nc\n",
      "R1066P_FR1_ELI_pows_0_0_0.nc\n",
      "R1066P_FR1_ELI_pows_0_0_1.nc\n",
      "R1066P_FR1_ELI_pows_0_0_2.nc\n",
      "R1066P_FR1_events_index_0_0_0.pkl\n",
      "R1066P_FR1_events_index_0_0_1.pkl\n",
      "R1066P_FR1_events_index_0_0_2.pkl\n",
      "R1066P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1066P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1066P_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1066P_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1066P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1066P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1066P_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1066P_FR1_output_position_0_0_0.pkl\n",
      "R1066P_FR1_output_position_0_0_1.pkl\n",
      "R1066P_FR1_output_position_0_0_2.pkl\n",
      "R1066P_FR1_PLI_pows_0_0_0.nc\n",
      "R1066P_FR1_PLI_pows_0_0_1.nc\n",
      "R1066P_FR1_PLI_pows_0_0_2.nc\n",
      "R1066P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1066P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1066P_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1066P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1066P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1066P_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1066P_FR1_sr.npy\n",
      "R1067P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1067P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1067P_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1067P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1067P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1067P_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1067P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1067P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1067P_FR1_deliberation_pows_0_0_2.nc\n",
      "R1067P_FR1_ELI_pows_0_0_0.nc\n",
      "R1067P_FR1_ELI_pows_0_0_1.nc\n",
      "R1067P_FR1_ELI_pows_0_0_2.nc\n",
      "R1067P_FR1_events_index_0_0_0.pkl\n",
      "R1067P_FR1_events_index_0_0_1.pkl\n",
      "R1067P_FR1_events_index_0_0_2.pkl\n",
      "R1067P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1067P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1067P_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1067P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1067P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1067P_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1067P_FR1_output_position_0_0_0.pkl\n",
      "R1067P_FR1_output_position_0_0_1.pkl\n",
      "R1067P_FR1_output_position_0_0_2.pkl\n",
      "R1067P_FR1_PLI_pows_0_0_0.nc\n",
      "R1067P_FR1_PLI_pows_0_0_1.nc\n",
      "R1067P_FR1_PLI_pows_0_0_2.nc\n",
      "R1067P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1067P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1067P_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1067P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1067P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1067P_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1067P_FR1_sr.npy\n",
      "R1068J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1068J_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1068J_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1068J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1068J_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1068J_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1068J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1068J_FR1_deliberation_pows_0_0_1.nc\n",
      "R1068J_FR1_deliberation_pows_0_0_2.nc\n",
      "R1068J_FR1_ELI_pows_0_0_0.nc\n",
      "R1068J_FR1_ELI_pows_0_0_1.nc\n",
      "R1068J_FR1_ELI_pows_0_0_2.nc\n",
      "R1068J_FR1_events_index_0_0_0.pkl\n",
      "R1068J_FR1_events_index_0_0_1.pkl\n",
      "R1068J_FR1_events_index_0_0_2.pkl\n",
      "R1068J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1068J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1068J_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1068J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1068J_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1068J_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1068J_FR1_output_position_0_0_0.pkl\n",
      "R1068J_FR1_output_position_0_0_1.pkl\n",
      "R1068J_FR1_output_position_0_0_2.pkl\n",
      "R1068J_FR1_PLI_pows_0_0_0.nc\n",
      "R1068J_FR1_PLI_pows_0_0_1.nc\n",
      "R1068J_FR1_PLI_pows_0_0_2.nc\n",
      "R1068J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1068J_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1068J_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1068J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1068J_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1068J_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1068J_FR1_sr.npy\n",
      "R1077T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1077T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1077T_FR1_all_intrusions_pows_0_0_3.nc\n",
      "R1077T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1077T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1077T_FR1_correct_recall_pows_0_0_3.nc\n",
      "R1077T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1077T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1077T_FR1_deliberation_pows_0_0_3.nc\n",
      "R1077T_FR1_ELI_pows_0_0_0.nc\n",
      "R1077T_FR1_ELI_pows_0_0_2.nc\n",
      "R1077T_FR1_ELI_pows_0_0_3.nc\n",
      "R1077T_FR1_events_index_0_0_0.pkl\n",
      "R1077T_FR1_events_index_0_0_1.pkl\n",
      "R1077T_FR1_events_index_0_0_2.pkl\n",
      "R1077T_FR1_events_index_0_0_3.pkl\n",
      "R1077T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1077T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1077T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1077T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1077T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1077T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1077T_FR1_nonrelated_intrusions_pows_0_0_3.nc\n",
      "R1077T_FR1_output_position_0_0_0.pkl\n",
      "R1077T_FR1_output_position_0_0_2.pkl\n",
      "R1077T_FR1_output_position_0_0_3.pkl\n",
      "R1077T_FR1_PLI_pows_0_0_0.nc\n",
      "R1077T_FR1_PLI_pows_0_0_2.nc\n",
      "R1077T_FR1_PLI_pows_0_0_3.nc\n",
      "R1077T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1077T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1077T_FR1_related_intrusions_pows_0_0_3.nc\n",
      "R1077T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1077T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1077T_FR1_semantic_similarity_0_0_3.pkl\n",
      "R1077T_FR1_sr.npy\n",
      "R1080E_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1080E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1080E_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1080E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1080E_FR1_deliberation_pows_0_0_0.nc\n",
      "R1080E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1080E_FR1_ELI_pows_0_0_0.nc\n",
      "R1080E_FR1_ELI_pows_0_0_1.nc\n",
      "R1080E_FR1_events_index_0_0_0.pkl\n",
      "R1080E_FR1_events_index_0_0_1.pkl\n",
      "R1080E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1080E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1080E_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1080E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1080E_FR1_output_position_0_0_0.pkl\n",
      "R1080E_FR1_output_position_0_0_1.pkl\n",
      "R1080E_FR1_PLI_pows_0_0_0.nc\n",
      "R1080E_FR1_PLI_pows_0_0_1.nc\n",
      "R1080E_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1080E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1080E_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1080E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1080E_FR1_sr.npy\n",
      "R1083J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1083J_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1083J_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1083J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1083J_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1083J_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1083J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1083J_FR1_deliberation_pows_0_0_1.nc\n",
      "R1083J_FR1_deliberation_pows_0_0_2.nc\n",
      "R1083J_FR1_ELI_pows_0_0_0.nc\n",
      "R1083J_FR1_ELI_pows_0_0_1.nc\n",
      "R1083J_FR1_ELI_pows_0_0_2.nc\n",
      "R1083J_FR1_events_index_0_0_0.pkl\n",
      "R1083J_FR1_events_index_0_0_1.pkl\n",
      "R1083J_FR1_events_index_0_0_2.pkl\n",
      "R1083J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1083J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1083J_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1083J_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1083J_FR1_hipp_electrodes_0_0_4.npy\n",
      "R1083J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1083J_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1083J_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1083J_FR1_output_position_0_0_0.pkl\n",
      "R1083J_FR1_output_position_0_0_1.pkl\n",
      "R1083J_FR1_output_position_0_0_2.pkl\n",
      "R1083J_FR1_PLI_pows_0_0_0.nc\n",
      "R1083J_FR1_PLI_pows_0_0_1.nc\n",
      "R1083J_FR1_PLI_pows_0_0_2.nc\n",
      "R1083J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1083J_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1083J_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1083J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1083J_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1083J_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1083J_FR1_sr.npy\n",
      "R1089P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1089P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1089P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1089P_FR1_ELI_pows_0_0_0.nc\n",
      "R1089P_FR1_events_index_0_0_0.pkl\n",
      "R1089P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1089P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1089P_FR1_output_position_0_0_0.pkl\n",
      "R1089P_FR1_PLI_pows_0_0_0.nc\n",
      "R1089P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1089P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1089P_FR1_sr.npy\n",
      "R1092J_FR1_hipp_electrodes_0_2_0.npy\n",
      "R1092J_FR1_hipp_electrodes_0_2_1.npy\n",
      "R1092J_FR1_hipp_electrodes_0_2_2.npy\n",
      "R1092J_FR1_hipp_electrodes_0_3_3.npy\n",
      "R1092J_FR1_sr.npy\n",
      "R1094T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1094T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1094T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1094T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1094T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1094T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1094T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1094T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1094T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1094T_FR1_ELI_pows_0_0_0.nc\n",
      "R1094T_FR1_ELI_pows_0_0_1.nc\n",
      "R1094T_FR1_ELI_pows_0_0_2.nc\n",
      "R1094T_FR1_events_index_0_0_0.pkl\n",
      "R1094T_FR1_events_index_0_0_1.pkl\n",
      "R1094T_FR1_events_index_0_0_2.pkl\n",
      "R1094T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1094T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1094T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1094T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1094T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1094T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1094T_FR1_output_position_0_0_0.pkl\n",
      "R1094T_FR1_output_position_0_0_1.pkl\n",
      "R1094T_FR1_output_position_0_0_2.pkl\n",
      "R1094T_FR1_PLI_pows_0_0_0.nc\n",
      "R1094T_FR1_PLI_pows_0_0_1.nc\n",
      "R1094T_FR1_PLI_pows_0_0_2.nc\n",
      "R1094T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1094T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1094T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1094T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1094T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1094T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1094T_FR1_sr.npy\n",
      "R1096E_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1096E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1096E_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1096E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1096E_FR1_deliberation_pows_0_0_0.nc\n",
      "R1096E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1096E_FR1_ELI_pows_0_0_0.nc\n",
      "R1096E_FR1_ELI_pows_0_0_1.nc\n",
      "R1096E_FR1_events_index_0_0_0.pkl\n",
      "R1096E_FR1_events_index_0_0_1.pkl\n",
      "R1096E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1096E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1096E_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1096E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1096E_FR1_output_position_0_0_0.pkl\n",
      "R1096E_FR1_output_position_0_0_1.pkl\n",
      "R1096E_FR1_PLI_pows_0_0_0.nc\n",
      "R1096E_FR1_PLI_pows_0_0_1.nc\n",
      "R1096E_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1096E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1096E_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1096E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1096E_FR1_sr.npy\n",
      "R1102P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1102P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1102P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1102P_FR1_ELI_pows_0_0_0.nc\n",
      "R1102P_FR1_events_index_0_0_0.pkl\n",
      "R1102P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1102P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1102P_FR1_output_position_0_0_0.pkl\n",
      "R1102P_FR1_PLI_pows_0_0_0.nc\n",
      "R1102P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1102P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1102P_FR1_sr.npy\n",
      "R1108J_FR1_all_intrusions_pows_0_1_0.nc\n",
      "R1108J_FR1_all_intrusions_pows_0_1_2.nc\n",
      "R1108J_FR1_all_intrusions_pows_0_1_3.nc\n",
      "R1108J_FR1_correct_recall_pows_0_1_0.nc\n",
      "R1108J_FR1_correct_recall_pows_0_1_2.nc\n",
      "R1108J_FR1_correct_recall_pows_0_1_3.nc\n",
      "R1108J_FR1_deliberation_pows_0_1_0.nc\n",
      "R1108J_FR1_deliberation_pows_0_1_2.nc\n",
      "R1108J_FR1_deliberation_pows_0_1_3.nc\n",
      "R1108J_FR1_ELI_pows_0_1_0.nc\n",
      "R1108J_FR1_ELI_pows_0_1_2.nc\n",
      "R1108J_FR1_ELI_pows_0_1_3.nc\n",
      "R1108J_FR1_events_index_0_1_0.pkl\n",
      "R1108J_FR1_events_index_0_1_2.pkl\n",
      "R1108J_FR1_events_index_0_1_3.pkl\n",
      "R1108J_FR1_hipp_electrodes_0_1_0.npy\n",
      "R1108J_FR1_hipp_electrodes_0_1_1.npy\n",
      "R1108J_FR1_hipp_electrodes_0_1_2.npy\n",
      "R1108J_FR1_hipp_electrodes_0_1_3.npy\n",
      "R1108J_FR1_nonrelated_intrusions_pows_0_1_0.nc\n",
      "R1108J_FR1_nonrelated_intrusions_pows_0_1_2.nc\n",
      "R1108J_FR1_nonrelated_intrusions_pows_0_1_3.nc\n",
      "R1108J_FR1_output_position_0_1_0.pkl\n",
      "R1108J_FR1_output_position_0_1_2.pkl\n",
      "R1108J_FR1_output_position_0_1_3.pkl\n",
      "R1108J_FR1_PLI_pows_0_1_0.nc\n",
      "R1108J_FR1_PLI_pows_0_1_2.nc\n",
      "R1108J_FR1_PLI_pows_0_1_3.nc\n",
      "R1108J_FR1_related_intrusions_pows_0_1_0.nc\n",
      "R1108J_FR1_related_intrusions_pows_0_1_2.nc\n",
      "R1108J_FR1_related_intrusions_pows_0_1_3.nc\n",
      "R1108J_FR1_semantic_similarity_0_1_0.pkl\n",
      "R1108J_FR1_semantic_similarity_0_1_2.pkl\n",
      "R1108J_FR1_semantic_similarity_0_1_3.pkl\n",
      "R1108J_FR1_sr.npy\n",
      "R1112M_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1112M_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1112M_FR1_deliberation_pows_0_0_0.nc\n",
      "R1112M_FR1_ELI_pows_0_0_0.nc\n",
      "R1112M_FR1_events_index_0_0_0.pkl\n",
      "R1112M_FR1_events_index_0_0_1.pkl\n",
      "R1112M_FR1_events_index_0_0_2.pkl\n",
      "R1112M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1112M_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1112M_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1112M_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1112M_FR1_output_position_0_0_0.pkl\n",
      "R1112M_FR1_PLI_pows_0_0_0.nc\n",
      "R1112M_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1112M_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1112M_FR1_sr.npy\n",
      "R1120E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1120E_FR1_sr.npy\n",
      "R1122E_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1122E_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1122E_FR1_deliberation_pows_0_0_0.nc\n",
      "R1122E_FR1_ELI_pows_0_0_0.nc\n",
      "R1122E_FR1_events_index_0_0_0.pkl\n",
      "R1122E_FR1_events_index_0_0_1.pkl\n",
      "R1122E_FR1_events_index_0_0_2.pkl\n",
      "R1122E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1122E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1122E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1122E_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1122E_FR1_output_position_0_0_0.pkl\n",
      "R1122E_FR1_PLI_pows_0_0_0.nc\n",
      "R1122E_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1122E_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1122E_FR1_sr.npy\n",
      "R1123C_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1123C_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1123C_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1123C_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1123C_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1123C_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1123C_FR1_deliberation_pows_0_0_0.nc\n",
      "R1123C_FR1_deliberation_pows_0_0_1.nc\n",
      "R1123C_FR1_deliberation_pows_0_0_2.nc\n",
      "R1123C_FR1_ELI_pows_0_0_0.nc\n",
      "R1123C_FR1_ELI_pows_0_0_1.nc\n",
      "R1123C_FR1_ELI_pows_0_0_2.nc\n",
      "R1123C_FR1_events_index_0_0_0.pkl\n",
      "R1123C_FR1_events_index_0_0_1.pkl\n",
      "R1123C_FR1_events_index_0_0_2.pkl\n",
      "R1123C_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1123C_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1123C_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1123C_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1123C_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1123C_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1123C_FR1_output_position_0_0_0.pkl\n",
      "R1123C_FR1_output_position_0_0_1.pkl\n",
      "R1123C_FR1_output_position_0_0_2.pkl\n",
      "R1123C_FR1_PLI_pows_0_0_0.nc\n",
      "R1123C_FR1_PLI_pows_0_0_1.nc\n",
      "R1123C_FR1_PLI_pows_0_0_2.nc\n",
      "R1123C_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1123C_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1123C_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1123C_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1123C_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1123C_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1123C_FR1_sr.npy\n",
      "R1125T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1125T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1125T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1125T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1125T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1125T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1125T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1125T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1125T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1125T_FR1_ELI_pows_0_0_0.nc\n",
      "R1125T_FR1_ELI_pows_0_0_1.nc\n",
      "R1125T_FR1_ELI_pows_0_0_2.nc\n",
      "R1125T_FR1_events_index_0_0_0.pkl\n",
      "R1125T_FR1_events_index_0_0_1.pkl\n",
      "R1125T_FR1_events_index_0_0_2.pkl\n",
      "R1125T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1125T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1125T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1125T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1125T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1125T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1125T_FR1_output_position_0_0_0.pkl\n",
      "R1125T_FR1_output_position_0_0_1.pkl\n",
      "R1125T_FR1_output_position_0_0_2.pkl\n",
      "R1125T_FR1_PLI_pows_0_0_0.nc\n",
      "R1125T_FR1_PLI_pows_0_0_1.nc\n",
      "R1125T_FR1_PLI_pows_0_0_2.nc\n",
      "R1125T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1125T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1125T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1125T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1125T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1125T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1125T_FR1_sr.npy\n",
      "R1134T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1134T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1134T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1134T_FR1_sr.npy\n",
      "R1137E_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1137E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1137E_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1137E_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1137E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1137E_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1137E_FR1_deliberation_pows_0_0_0.nc\n",
      "R1137E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1137E_FR1_deliberation_pows_0_0_2.nc\n",
      "R1137E_FR1_ELI_pows_0_0_0.nc\n",
      "R1137E_FR1_ELI_pows_0_0_1.nc\n",
      "R1137E_FR1_ELI_pows_0_0_2.nc\n",
      "R1137E_FR1_events_index_0_0_0.pkl\n",
      "R1137E_FR1_events_index_0_0_1.pkl\n",
      "R1137E_FR1_events_index_0_0_2.pkl\n",
      "R1137E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1137E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1137E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1137E_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1137E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1137E_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1137E_FR1_output_position_0_0_0.pkl\n",
      "R1137E_FR1_output_position_0_0_1.pkl\n",
      "R1137E_FR1_output_position_0_0_2.pkl\n",
      "R1137E_FR1_PLI_pows_0_0_0.nc\n",
      "R1137E_FR1_PLI_pows_0_0_1.nc\n",
      "R1137E_FR1_PLI_pows_0_0_2.nc\n",
      "R1137E_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1137E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1137E_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1137E_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1137E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1137E_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1137E_FR1_sr.npy\n",
      "R1138T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1138T_FR1_sr.npy\n",
      "R1145J_FR1_all_intrusions_pows_0_1_0.nc\n",
      "R1145J_FR1_all_intrusions_pows_0_1_1.nc\n",
      "R1145J_FR1_all_intrusions_pows_0_1_3.nc\n",
      "R1145J_FR1_correct_recall_pows_0_1_0.nc\n",
      "R1145J_FR1_correct_recall_pows_0_1_1.nc\n",
      "R1145J_FR1_correct_recall_pows_0_1_3.nc\n",
      "R1145J_FR1_deliberation_pows_0_1_0.nc\n",
      "R1145J_FR1_deliberation_pows_0_1_1.nc\n",
      "R1145J_FR1_deliberation_pows_0_1_3.nc\n",
      "R1145J_FR1_ELI_pows_0_1_0.nc\n",
      "R1145J_FR1_ELI_pows_0_1_1.nc\n",
      "R1145J_FR1_ELI_pows_0_1_3.nc\n",
      "R1145J_FR1_events_index_0_1_0.pkl\n",
      "R1145J_FR1_events_index_0_1_1.pkl\n",
      "R1145J_FR1_events_index_0_1_3.pkl\n",
      "R1145J_FR1_hipp_electrodes_0_1_0.npy\n",
      "R1145J_FR1_hipp_electrodes_0_1_1.npy\n",
      "R1145J_FR1_hipp_electrodes_0_1_2.npy\n",
      "R1145J_FR1_hipp_electrodes_0_1_3.npy\n",
      "R1145J_FR1_nonrelated_intrusions_pows_0_1_0.nc\n",
      "R1145J_FR1_nonrelated_intrusions_pows_0_1_1.nc\n",
      "R1145J_FR1_nonrelated_intrusions_pows_0_1_3.nc\n",
      "R1145J_FR1_output_position_0_1_0.pkl\n",
      "R1145J_FR1_output_position_0_1_1.pkl\n",
      "R1145J_FR1_output_position_0_1_3.pkl\n",
      "R1145J_FR1_PLI_pows_0_1_0.nc\n",
      "R1145J_FR1_PLI_pows_0_1_1.nc\n",
      "R1145J_FR1_PLI_pows_0_1_3.nc\n",
      "R1145J_FR1_related_intrusions_pows_0_1_0.nc\n",
      "R1145J_FR1_related_intrusions_pows_0_1_1.nc\n",
      "R1145J_FR1_related_intrusions_pows_0_1_3.nc\n",
      "R1145J_FR1_semantic_similarity_0_1_0.pkl\n",
      "R1145J_FR1_semantic_similarity_0_1_1.pkl\n",
      "R1145J_FR1_semantic_similarity_0_1_3.pkl\n",
      "R1145J_FR1_sr.npy\n",
      "R1147P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1147P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1147P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1147P_FR1_ELI_pows_0_0_1.nc\n",
      "R1147P_FR1_events_index_0_0_1.pkl\n",
      "R1147P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1147P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1147P_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1147P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1147P_FR1_output_position_0_0_1.pkl\n",
      "R1147P_FR1_PLI_pows_0_0_1.nc\n",
      "R1147P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1147P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1147P_FR1_sr.npy\n",
      "R1148P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1148P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1148P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1148P_FR1_ELI_pows_0_0_0.nc\n",
      "R1148P_FR1_events_index_0_0_0.pkl\n",
      "R1148P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1148P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1148P_FR1_output_position_0_0_0.pkl\n",
      "R1148P_FR1_PLI_pows_0_0_0.nc\n",
      "R1148P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1148P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1148P_FR1_sr.npy\n",
      "R1150J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1150J_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1150J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1150J_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1150J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1150J_FR1_deliberation_pows_0_0_1.nc\n",
      "R1150J_FR1_ELI_pows_0_0_0.nc\n",
      "R1150J_FR1_ELI_pows_0_0_1.nc\n",
      "R1150J_FR1_events_index_0_0_0.pkl\n",
      "R1150J_FR1_events_index_0_0_1.pkl\n",
      "R1150J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1150J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1150J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1150J_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1150J_FR1_output_position_0_0_0.pkl\n",
      "R1150J_FR1_output_position_0_0_1.pkl\n",
      "R1150J_FR1_PLI_pows_0_0_0.nc\n",
      "R1150J_FR1_PLI_pows_0_0_1.nc\n",
      "R1150J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1150J_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1150J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1150J_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1150J_FR1_sr.npy\n",
      "R1151E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1151E_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1151E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1151E_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1151E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1151E_FR1_deliberation_pows_0_0_2.nc\n",
      "R1151E_FR1_ELI_pows_0_0_1.nc\n",
      "R1151E_FR1_ELI_pows_0_0_2.nc\n",
      "R1151E_FR1_events_index_0_0_1.pkl\n",
      "R1151E_FR1_events_index_0_0_2.pkl\n",
      "R1151E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1151E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1151E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1151E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1151E_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1151E_FR1_output_position_0_0_1.pkl\n",
      "R1151E_FR1_output_position_0_0_2.pkl\n",
      "R1151E_FR1_PLI_pows_0_0_1.nc\n",
      "R1151E_FR1_PLI_pows_0_0_2.nc\n",
      "R1151E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1151E_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1151E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1151E_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1151E_FR1_sr.npy\n",
      "R1153T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1153T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1153T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1153T_FR1_ELI_pows_0_0_2.nc\n",
      "R1153T_FR1_events_index_0_0_2.pkl\n",
      "R1153T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1153T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1153T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1153T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1153T_FR1_output_position_0_0_2.pkl\n",
      "R1153T_FR1_PLI_pows_0_0_2.nc\n",
      "R1153T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1153T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1153T_FR1_sr.npy\n",
      "R1154D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1154D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1154D_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1154D_FR1_sr.npy\n",
      "R1158T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1158T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1158T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1158T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1158T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1158T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1158T_FR1_ELI_pows_0_0_0.nc\n",
      "R1158T_FR1_ELI_pows_0_0_1.nc\n",
      "R1158T_FR1_events_index_0_0_0.pkl\n",
      "R1158T_FR1_events_index_0_0_1.pkl\n",
      "R1158T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1158T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1158T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1158T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1158T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1158T_FR1_output_position_0_0_0.pkl\n",
      "R1158T_FR1_output_position_0_0_1.pkl\n",
      "R1158T_FR1_PLI_pows_0_0_0.nc\n",
      "R1158T_FR1_PLI_pows_0_0_1.nc\n",
      "R1158T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1158T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1158T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1158T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1158T_FR1_sr.npy\n",
      "R1161E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1161E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1161E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1161E_FR1_ELI_pows_0_0_1.nc\n",
      "R1161E_FR1_events_index_0_0_1.pkl\n",
      "R1161E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1161E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1161E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1161E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1161E_FR1_output_position_0_0_1.pkl\n",
      "R1161E_FR1_PLI_pows_0_0_1.nc\n",
      "R1161E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1161E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1161E_FR1_sr.npy\n",
      "R1162N_FR1_events_index_0_0_0.pkl\n",
      "R1162N_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1162N_FR1_sr.npy\n",
      "R1167M_FR1_events_index_0_0_0.pkl\n",
      "R1167M_FR1_events_index_0_0_1.pkl\n",
      "R1167M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1167M_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1167M_FR1_sr.npy\n",
      "R1168T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1168T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1168T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1168T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1168T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1168T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1168T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1168T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1168T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1168T_FR1_ELI_pows_0_0_0.nc\n",
      "R1168T_FR1_ELI_pows_0_0_1.nc\n",
      "R1168T_FR1_ELI_pows_0_0_2.nc\n",
      "R1168T_FR1_events_index_0_0_0.pkl\n",
      "R1168T_FR1_events_index_0_0_1.pkl\n",
      "R1168T_FR1_events_index_0_0_2.pkl\n",
      "R1168T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1168T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1168T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1168T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1168T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1168T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1168T_FR1_output_position_0_0_0.pkl\n",
      "R1168T_FR1_output_position_0_0_1.pkl\n",
      "R1168T_FR1_output_position_0_0_2.pkl\n",
      "R1168T_FR1_PLI_pows_0_0_0.nc\n",
      "R1168T_FR1_PLI_pows_0_0_1.nc\n",
      "R1168T_FR1_PLI_pows_0_0_2.nc\n",
      "R1168T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1168T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1168T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1168T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1168T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1168T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1168T_FR1_sr.npy\n",
      "R1169P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1169P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1169P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1169P_FR1_ELI_pows_0_0_0.nc\n",
      "R1169P_FR1_events_index_0_0_0.pkl\n",
      "R1169P_FR1_events_index_0_0_1.pkl\n",
      "R1169P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1169P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1169P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1169P_FR1_output_position_0_0_0.pkl\n",
      "R1169P_FR1_PLI_pows_0_0_0.nc\n",
      "R1169P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1169P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1169P_FR1_sr.npy\n",
      "R1172E_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1172E_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1172E_FR1_deliberation_pows_0_0_2.nc\n",
      "R1172E_FR1_ELI_pows_0_0_2.nc\n",
      "R1172E_FR1_events_index_0_0_2.pkl\n",
      "R1172E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1172E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1172E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1172E_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1172E_FR1_output_position_0_0_2.pkl\n",
      "R1172E_FR1_PLI_pows_0_0_2.nc\n",
      "R1172E_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1172E_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1172E_FR1_sr.npy\n",
      "R1174T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1174T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1174T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1174T_FR1_ELI_pows_0_0_0.nc\n",
      "R1174T_FR1_events_index_0_0_0.pkl\n",
      "R1174T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1174T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1174T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1174T_FR1_output_position_0_0_0.pkl\n",
      "R1174T_FR1_PLI_pows_0_0_0.nc\n",
      "R1174T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1174T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1174T_FR1_sr.npy\n",
      "R1187P_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1187P_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1187P_FR1_deliberation_pows_0_0_1.nc\n",
      "R1187P_FR1_ELI_pows_0_0_1.nc\n",
      "R1187P_FR1_events_index_0_0_1.pkl\n",
      "R1187P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1187P_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1187P_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1187P_FR1_output_position_0_0_1.pkl\n",
      "R1187P_FR1_PLI_pows_0_0_1.nc\n",
      "R1187P_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1187P_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1187P_FR1_sr.npy\n",
      "R1191J_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1191J_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1191J_FR1_deliberation_pows_0_0_0.nc\n",
      "R1191J_FR1_ELI_pows_0_0_0.nc\n",
      "R1191J_FR1_events_index_0_0_0.pkl\n",
      "R1191J_FR1_events_index_0_0_1.pkl\n",
      "R1191J_FR1_events_index_0_0_2.pkl\n",
      "R1191J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1191J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1191J_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1191J_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1191J_FR1_output_position_0_0_0.pkl\n",
      "R1191J_FR1_PLI_pows_0_0_0.nc\n",
      "R1191J_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1191J_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1191J_FR1_sr.npy\n",
      "R1195E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1195E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1195E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1195E_FR1_sr.npy\n",
      "R1200T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1200T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1200T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1200T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1200T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1200T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1200T_FR1_ELI_pows_0_0_0.nc\n",
      "R1200T_FR1_ELI_pows_0_0_2.nc\n",
      "R1200T_FR1_events_index_0_0_0.pkl\n",
      "R1200T_FR1_events_index_0_0_2.pkl\n",
      "R1200T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1200T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1200T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1200T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1200T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1200T_FR1_output_position_0_0_0.pkl\n",
      "R1200T_FR1_output_position_0_0_2.pkl\n",
      "R1200T_FR1_PLI_pows_0_0_0.nc\n",
      "R1200T_FR1_PLI_pows_0_0_2.nc\n",
      "R1200T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1200T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1200T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1200T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1200T_FR1_sr.npy\n",
      "R1201P_FR1_hipp_electrodes_0_1_0.npy\n",
      "R1201P_FR1_hipp_electrodes_0_1_1.npy\n",
      "R1201P_FR1_sr.npy\n",
      "R1203T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1203T_FR1_sr.npy\n",
      "R1215M_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1215M_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1215M_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1215M_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1215M_FR1_deliberation_pows_0_0_1.nc\n",
      "R1215M_FR1_deliberation_pows_0_0_2.nc\n",
      "R1215M_FR1_ELI_pows_0_0_1.nc\n",
      "R1215M_FR1_ELI_pows_0_0_2.nc\n",
      "R1215M_FR1_events_index_0_0_1.pkl\n",
      "R1215M_FR1_events_index_0_0_2.pkl\n",
      "R1215M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1215M_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1215M_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1215M_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1215M_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1215M_FR1_output_position_0_0_1.pkl\n",
      "R1215M_FR1_output_position_0_0_2.pkl\n",
      "R1215M_FR1_PLI_pows_0_0_1.nc\n",
      "R1215M_FR1_PLI_pows_0_0_2.nc\n",
      "R1215M_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1215M_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1215M_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1215M_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1215M_FR1_sr.npy\n",
      "R1217T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1217T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1217T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1217T_FR1_ELI_pows_0_0_0.nc\n",
      "R1217T_FR1_events_index_0_0_0.pkl\n",
      "R1217T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1217T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1217T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1217T_FR1_output_position_0_0_0.pkl\n",
      "R1217T_FR1_PLI_pows_0_0_0.nc\n",
      "R1217T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1217T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1217T_FR1_sr.npy\n",
      "R1226D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1226D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1226D_FR1_sr.npy\n",
      "R1228M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1228M_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1228M_FR1_sr.npy\n",
      "R1230J_FR1_all_intrusions_pows_0_0_5.nc\n",
      "R1230J_FR1_all_intrusions_pows_0_0_6.nc\n",
      "R1230J_FR1_correct_recall_pows_0_0_5.nc\n",
      "R1230J_FR1_correct_recall_pows_0_0_6.nc\n",
      "R1230J_FR1_deliberation_pows_0_0_5.nc\n",
      "R1230J_FR1_deliberation_pows_0_0_6.nc\n",
      "R1230J_FR1_ELI_pows_0_0_5.nc\n",
      "R1230J_FR1_ELI_pows_0_0_6.nc\n",
      "R1230J_FR1_events_index_0_0_5.pkl\n",
      "R1230J_FR1_events_index_0_0_6.pkl\n",
      "R1230J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1230J_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1230J_FR1_hipp_electrodes_0_0_4.npy\n",
      "R1230J_FR1_hipp_electrodes_0_0_5.npy\n",
      "R1230J_FR1_hipp_electrodes_0_0_6.npy\n",
      "R1230J_FR1_nonrelated_intrusions_pows_0_0_5.nc\n",
      "R1230J_FR1_nonrelated_intrusions_pows_0_0_6.nc\n",
      "R1230J_FR1_output_position_0_0_5.pkl\n",
      "R1230J_FR1_output_position_0_0_6.pkl\n",
      "R1230J_FR1_PLI_pows_0_0_5.nc\n",
      "R1230J_FR1_PLI_pows_0_0_6.nc\n",
      "R1230J_FR1_related_intrusions_pows_0_0_5.nc\n",
      "R1230J_FR1_related_intrusions_pows_0_0_6.nc\n",
      "R1230J_FR1_semantic_similarity_0_0_5.pkl\n",
      "R1230J_FR1_semantic_similarity_0_0_6.pkl\n",
      "R1230J_FR1_sr.npy\n",
      "R1236J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1236J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1236J_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1236J_FR1_sr.npy\n",
      "R1240T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1240T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1240T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1240T_FR1_ELI_pows_0_0_0.nc\n",
      "R1240T_FR1_events_index_0_0_0.pkl\n",
      "R1240T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1240T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1240T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1240T_FR1_output_position_0_0_0.pkl\n",
      "R1240T_FR1_PLI_pows_0_0_0.nc\n",
      "R1240T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1240T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1240T_FR1_sr.npy\n",
      "R1243T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1243T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1243T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1243T_FR1_ELI_pows_0_0_2.nc\n",
      "R1243T_FR1_events_index_0_0_2.pkl\n",
      "R1243T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1243T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1243T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1243T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1243T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1243T_FR1_output_position_0_0_2.pkl\n",
      "R1243T_FR1_PLI_pows_0_0_2.nc\n",
      "R1243T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1243T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1243T_FR1_sr.npy\n",
      "R1247P_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1247P_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1247P_FR1_deliberation_pows_0_0_0.nc\n",
      "R1247P_FR1_ELI_pows_0_0_0.nc\n",
      "R1247P_FR1_events_index_0_0_0.pkl\n",
      "R1247P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1247P_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1247P_FR1_output_position_0_0_0.pkl\n",
      "R1247P_FR1_PLI_pows_0_0_0.nc\n",
      "R1247P_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1247P_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1247P_FR1_sr.npy\n",
      "R1260D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1260D_FR1_sr.npy\n",
      "R1275D_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1275D_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1275D_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1275D_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1275D_FR1_deliberation_pows_0_0_0.nc\n",
      "R1275D_FR1_deliberation_pows_0_0_1.nc\n",
      "R1275D_FR1_ELI_pows_0_0_0.nc\n",
      "R1275D_FR1_ELI_pows_0_0_1.nc\n",
      "R1275D_FR1_events_index_0_0_0.pkl\n",
      "R1275D_FR1_events_index_0_0_1.pkl\n",
      "R1275D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1275D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1275D_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1275D_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1275D_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1275D_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1275D_FR1_output_position_0_0_0.pkl\n",
      "R1275D_FR1_output_position_0_0_1.pkl\n",
      "R1275D_FR1_PLI_pows_0_0_0.nc\n",
      "R1275D_FR1_PLI_pows_0_0_1.nc\n",
      "R1275D_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1275D_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1275D_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1275D_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1275D_FR1_sr.npy\n",
      "R1281E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1281E_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1281E_FR1_sr.npy\n",
      "R1283T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1283T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1283T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1283T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1283T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1283T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1283T_FR1_ELI_pows_0_0_0.nc\n",
      "R1283T_FR1_ELI_pows_0_0_1.nc\n",
      "R1283T_FR1_events_index_0_0_0.pkl\n",
      "R1283T_FR1_events_index_0_0_1.pkl\n",
      "R1283T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1283T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1283T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1283T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1283T_FR1_output_position_0_0_0.pkl\n",
      "R1283T_FR1_output_position_0_0_1.pkl\n",
      "R1283T_FR1_PLI_pows_0_0_0.nc\n",
      "R1283T_FR1_PLI_pows_0_0_1.nc\n",
      "R1283T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1283T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1283T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1283T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1283T_FR1_sr.npy\n",
      "R1286J_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1286J_FR1_sr.npy\n",
      "R1288P_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1288P_FR1_sr.npy\n",
      "R1291M_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1291M_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1291M_FR1_deliberation_pows_0_0_0.nc\n",
      "R1291M_FR1_ELI_pows_0_0_0.nc\n",
      "R1291M_FR1_events_index_0_0_0.pkl\n",
      "R1291M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1291M_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1291M_FR1_output_position_0_0_0.pkl\n",
      "R1291M_FR1_PLI_pows_0_0_0.nc\n",
      "R1291M_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1291M_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1291M_FR1_sr.npy\n",
      "R1292E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1292E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1292E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1292E_FR1_ELI_pows_0_0_1.nc\n",
      "R1292E_FR1_events_index_0_0_0.pkl\n",
      "R1292E_FR1_events_index_0_0_1.pkl\n",
      "R1292E_FR1_events_index_0_0_3.pkl\n",
      "R1292E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1292E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1292E_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1292E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1292E_FR1_output_position_0_0_1.pkl\n",
      "R1292E_FR1_PLI_pows_0_0_1.nc\n",
      "R1292E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1292E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1292E_FR1_sr.npy\n",
      "R1293P_FR1_all_intrusions_pows_0_0_4.nc\n",
      "R1293P_FR1_correct_recall_pows_0_0_4.nc\n",
      "R1293P_FR1_deliberation_pows_0_0_4.nc\n",
      "R1293P_FR1_ELI_pows_0_0_4.nc\n",
      "R1293P_FR1_events_index_0_0_4.pkl\n",
      "R1293P_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1293P_FR1_hipp_electrodes_0_0_4.npy\n",
      "R1293P_FR1_nonrelated_intrusions_pows_0_0_4.nc\n",
      "R1293P_FR1_output_position_0_0_4.pkl\n",
      "R1293P_FR1_PLI_pows_0_0_4.nc\n",
      "R1293P_FR1_related_intrusions_pows_0_0_4.nc\n",
      "R1293P_FR1_semantic_similarity_0_0_4.pkl\n",
      "R1293P_FR1_sr.npy\n",
      "R1299T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1299T_FR1_all_intrusions_pows_0_0_9.nc\n",
      "R1299T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1299T_FR1_correct_recall_pows_0_0_9.nc\n",
      "R1299T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1299T_FR1_deliberation_pows_0_0_9.nc\n",
      "R1299T_FR1_ELI_pows_0_0_0.nc\n",
      "R1299T_FR1_ELI_pows_0_0_9.nc\n",
      "R1299T_FR1_events_index_0_0_0.pkl\n",
      "R1299T_FR1_events_index_0_0_9.pkl\n",
      "R1299T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_4.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_5.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_6.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_7.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_8.npy\n",
      "R1299T_FR1_hipp_electrodes_0_0_9.npy\n",
      "R1299T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1299T_FR1_nonrelated_intrusions_pows_0_0_9.nc\n",
      "R1299T_FR1_output_position_0_0_0.pkl\n",
      "R1299T_FR1_output_position_0_0_9.pkl\n",
      "R1299T_FR1_PLI_pows_0_0_0.nc\n",
      "R1299T_FR1_PLI_pows_0_0_9.nc\n",
      "R1299T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1299T_FR1_related_intrusions_pows_0_0_9.nc\n",
      "R1299T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1299T_FR1_semantic_similarity_0_0_9.pkl\n",
      "R1299T_FR1_sr.npy\n",
      "R1308T_FR1_events_index_0_0_2.pkl\n",
      "R1308T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1308T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1308T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1308T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1308T_FR1_hipp_electrodes_0_0_4.npy\n",
      "R1308T_FR1_sr.npy\n",
      "R1310J_FR1_events_index_0_0_1.pkl\n",
      "R1310J_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1310J_FR1_sr.npy\n",
      "R1311T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1311T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1311T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1311T_FR1_ELI_pows_0_0_1.nc\n",
      "R1311T_FR1_events_index_0_0_0.pkl\n",
      "R1311T_FR1_events_index_0_0_1.pkl\n",
      "R1311T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1311T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1311T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1311T_FR1_output_position_0_0_1.pkl\n",
      "R1311T_FR1_PLI_pows_0_0_1.nc\n",
      "R1311T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1311T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1311T_FR1_sr.npy\n",
      "R1315T_FR1_events_index_0_0_0.pkl\n",
      "R1315T_FR1_events_index_0_0_1.pkl\n",
      "R1315T_FR1_events_index_0_0_2.pkl\n",
      "R1315T_FR1_events_index_0_0_3.pkl\n",
      "R1315T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1315T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1315T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1315T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1315T_FR1_sr.npy\n",
      "R1316T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1316T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1316T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1316T_FR1_ELI_pows_0_0_0.nc\n",
      "R1316T_FR1_events_index_0_0_0.pkl\n",
      "R1316T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1316T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1316T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1316T_FR1_output_position_0_0_0.pkl\n",
      "R1316T_FR1_PLI_pows_0_0_0.nc\n",
      "R1316T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1316T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1316T_FR1_sr.npy\n",
      "R1323T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1323T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1323T_FR1_sr.npy\n",
      "R1325C_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1325C_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1325C_FR1_deliberation_pows_0_0_1.nc\n",
      "R1325C_FR1_ELI_pows_0_0_1.nc\n",
      "R1325C_FR1_events_index_0_0_1.pkl\n",
      "R1325C_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1325C_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1325C_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1325C_FR1_output_position_0_0_1.pkl\n",
      "R1325C_FR1_PLI_pows_0_0_1.nc\n",
      "R1325C_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1325C_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1325C_FR1_sr.npy\n",
      "R1328E_FR1_events_index_0_0_0.pkl\n",
      "R1328E_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1328E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1328E_FR1_sr.npy\n",
      "R1330D_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1330D_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1330D_FR1_deliberation_pows_0_0_0.nc\n",
      "R1330D_FR1_ELI_pows_0_0_0.nc\n",
      "R1330D_FR1_events_index_0_0_0.pkl\n",
      "R1330D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1330D_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1330D_FR1_output_position_0_0_0.pkl\n",
      "R1330D_FR1_PLI_pows_0_0_0.nc\n",
      "R1330D_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1330D_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1330D_FR1_sr.npy\n",
      "R1331T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1331T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1331T_FR1_sr.npy\n",
      "R1332M_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1332M_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1332M_FR1_sr.npy\n",
      "R1334T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1334T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1334T_FR1_sr.npy\n",
      "R1336T_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1336T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1336T_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1336T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1336T_FR1_deliberation_pows_0_0_0.nc\n",
      "R1336T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1336T_FR1_ELI_pows_0_0_0.nc\n",
      "R1336T_FR1_ELI_pows_0_0_1.nc\n",
      "R1336T_FR1_events_index_0_0_0.pkl\n",
      "R1336T_FR1_events_index_0_0_1.pkl\n",
      "R1336T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1336T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1336T_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1336T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1336T_FR1_output_position_0_0_0.pkl\n",
      "R1336T_FR1_output_position_0_0_1.pkl\n",
      "R1336T_FR1_PLI_pows_0_0_0.nc\n",
      "R1336T_FR1_PLI_pows_0_0_1.nc\n",
      "R1336T_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1336T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1336T_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1336T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1336T_FR1_sr.npy\n",
      "R1337E_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1337E_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1337E_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1337E_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1337E_FR1_deliberation_pows_0_0_1.nc\n",
      "R1337E_FR1_deliberation_pows_0_0_2.nc\n",
      "R1337E_FR1_ELI_pows_0_0_1.nc\n",
      "R1337E_FR1_ELI_pows_0_0_2.nc\n",
      "R1337E_FR1_events_index_0_0_1.pkl\n",
      "R1337E_FR1_events_index_0_0_2.pkl\n",
      "R1337E_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1337E_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1337E_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1337E_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1337E_FR1_output_position_0_0_1.pkl\n",
      "R1337E_FR1_output_position_0_0_2.pkl\n",
      "R1337E_FR1_PLI_pows_0_0_1.nc\n",
      "R1337E_FR1_PLI_pows_0_0_2.nc\n",
      "R1337E_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1337E_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1337E_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1337E_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1337E_FR1_sr.npy\n",
      "R1338T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1338T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1338T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1338T_FR1_ELI_pows_0_0_1.nc\n",
      "R1338T_FR1_events_index_0_0_1.pkl\n",
      "R1338T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1338T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1338T_FR1_output_position_0_0_1.pkl\n",
      "R1338T_FR1_PLI_pows_0_0_1.nc\n",
      "R1338T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1338T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1338T_FR1_sr.npy\n",
      "R1339D_FR1_all_intrusions_pows_0_0_0.nc\n",
      "R1339D_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1339D_FR1_all_intrusions_pows_0_0_3.nc\n",
      "R1339D_FR1_correct_recall_pows_0_0_0.nc\n",
      "R1339D_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1339D_FR1_correct_recall_pows_0_0_3.nc\n",
      "R1339D_FR1_deliberation_pows_0_0_0.nc\n",
      "R1339D_FR1_deliberation_pows_0_0_2.nc\n",
      "R1339D_FR1_deliberation_pows_0_0_3.nc\n",
      "R1339D_FR1_ELI_pows_0_0_0.nc\n",
      "R1339D_FR1_ELI_pows_0_0_2.nc\n",
      "R1339D_FR1_ELI_pows_0_0_3.nc\n",
      "R1339D_FR1_events_index_0_0_0.pkl\n",
      "R1339D_FR1_events_index_0_0_2.pkl\n",
      "R1339D_FR1_events_index_0_0_3.pkl\n",
      "R1339D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1339D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1339D_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1339D_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1339D_FR1_nonrelated_intrusions_pows_0_0_0.nc\n",
      "R1339D_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1339D_FR1_nonrelated_intrusions_pows_0_0_3.nc\n",
      "R1339D_FR1_output_position_0_0_0.pkl\n",
      "R1339D_FR1_output_position_0_0_2.pkl\n",
      "R1339D_FR1_output_position_0_0_3.pkl\n",
      "R1339D_FR1_PLI_pows_0_0_0.nc\n",
      "R1339D_FR1_PLI_pows_0_0_2.nc\n",
      "R1339D_FR1_PLI_pows_0_0_3.nc\n",
      "R1339D_FR1_related_intrusions_pows_0_0_0.nc\n",
      "R1339D_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1339D_FR1_related_intrusions_pows_0_0_3.nc\n",
      "R1339D_FR1_semantic_similarity_0_0_0.pkl\n",
      "R1339D_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1339D_FR1_semantic_similarity_0_0_3.pkl\n",
      "R1339D_FR1_sr.npy\n",
      "R1341T_FR1_all_intrusions_pows_0_0_3.nc\n",
      "R1341T_FR1_correct_recall_pows_0_0_3.nc\n",
      "R1341T_FR1_deliberation_pows_0_0_3.nc\n",
      "R1341T_FR1_ELI_pows_0_0_3.nc\n",
      "R1341T_FR1_events_index_0_0_0.pkl\n",
      "R1341T_FR1_events_index_0_0_1.pkl\n",
      "R1341T_FR1_events_index_0_0_3.pkl\n",
      "R1341T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1341T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1341T_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1341T_FR1_nonrelated_intrusions_pows_0_0_3.nc\n",
      "R1341T_FR1_output_position_0_0_3.pkl\n",
      "R1341T_FR1_PLI_pows_0_0_3.nc\n",
      "R1341T_FR1_related_intrusions_pows_0_0_3.nc\n",
      "R1341T_FR1_semantic_similarity_0_0_3.pkl\n",
      "R1341T_FR1_sr.npy\n",
      "R1346T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1346T_FR1_hipp_electrodes_0_0_100.npy\n",
      "R1346T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1346T_FR1_sr.npy\n",
      "R1349T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1349T_FR1_sr.npy\n",
      "R1350D_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1350D_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1350D_FR1_deliberation_pows_0_0_2.nc\n",
      "R1350D_FR1_ELI_pows_0_0_2.nc\n",
      "R1350D_FR1_events_index_0_0_2.pkl\n",
      "R1350D_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1350D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1350D_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1350D_FR1_hipp_electrodes_0_0_3.npy\n",
      "R1350D_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1350D_FR1_output_position_0_0_2.pkl\n",
      "R1350D_FR1_PLI_pows_0_0_2.nc\n",
      "R1350D_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1350D_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1350D_FR1_sr.npy\n",
      "R1374T_FR1_all_intrusions_pows_0_0_1.nc\n",
      "R1374T_FR1_all_intrusions_pows_0_0_2.nc\n",
      "R1374T_FR1_correct_recall_pows_0_0_1.nc\n",
      "R1374T_FR1_correct_recall_pows_0_0_2.nc\n",
      "R1374T_FR1_deliberation_pows_0_0_1.nc\n",
      "R1374T_FR1_deliberation_pows_0_0_2.nc\n",
      "R1374T_FR1_ELI_pows_0_0_1.nc\n",
      "R1374T_FR1_ELI_pows_0_0_2.nc\n",
      "R1374T_FR1_events_index_0_0_1.pkl\n",
      "R1374T_FR1_events_index_0_0_2.pkl\n",
      "R1374T_FR1_hipp_electrodes_0_0_0.npy\n",
      "R1374T_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1374T_FR1_hipp_electrodes_0_0_2.npy\n",
      "R1374T_FR1_nonrelated_intrusions_pows_0_0_1.nc\n",
      "R1374T_FR1_nonrelated_intrusions_pows_0_0_2.nc\n",
      "R1374T_FR1_output_position_0_0_1.pkl\n",
      "R1374T_FR1_output_position_0_0_2.pkl\n",
      "R1374T_FR1_PLI_pows_0_0_1.nc\n",
      "R1374T_FR1_PLI_pows_0_0_2.nc\n",
      "R1374T_FR1_related_intrusions_pows_0_0_1.nc\n",
      "R1374T_FR1_related_intrusions_pows_0_0_2.nc\n",
      "R1374T_FR1_semantic_similarity_0_0_1.pkl\n",
      "R1374T_FR1_semantic_similarity_0_0_2.pkl\n",
      "R1374T_FR1_sr.npy\n",
      "R1397D_FR1_events_index_0_0_1.pkl\n",
      "R1397D_FR1_hipp_electrodes_0_0_1.npy\n",
      "R1397D_FR1_sr.npy\n"
     ]
    }
   ],
   "source": [
    "%cd '/scratch/noaherz/False-Memory/hippo_pre_recall'\n",
    "%ls\n",
    "# %rm R*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total number of subjects:  50\n",
      "number of not-succesfully analysed subs:  26\n"
     ]
    }
   ],
   "source": [
    "# check which subjects are missing:\n",
    "# %cd '/scratch/noaherz/False-Memory'\n",
    "save_path='/scratch/noaherz/False-Memory/hippo_pre_recall'\n",
    "os.chdir(save_path)\n",
    "subs=[]\n",
    "missing_subs=[]\n",
    "for row in range(0,len(subject_info[0:50])):\n",
    "    sub=subject_info.iloc[row]['subject']\n",
    "    exp=subject_info.iloc[row]['experiment']\n",
    "    loc=int(subject_info.iloc[row]['localization'])\n",
    "    mont=int(subject_info.iloc[row]['montage'])\n",
    "    sess=int(subject_info.iloc[row]['session'])\n",
    "    file_name=f\"{sub}_{exp}_semantic_similarity_{loc}_{mont}_{sess}.pkl\"\n",
    "    try:\n",
    "        semantic_similarity_df = pd.read_pickle(file_name)\n",
    "    except:\n",
    "#         print('sub ', sub,' session ',sess,' is missing')\n",
    "        missing_subs.append(sub)\n",
    "print('total number of subjects: ',len(subject_info[0:50]))        \n",
    "print('number of not-succesfully analysed subs: ',len(missing_subs))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10,\n",
       " 13,\n",
       " 18,\n",
       " 19,\n",
       " 20,\n",
       " 23,\n",
       " 24,\n",
       " 25,\n",
       " 26,\n",
       " 24,\n",
       " 25,\n",
       " 26,\n",
       " 24,\n",
       " 25,\n",
       " 26,\n",
       " 30,\n",
       " 31,\n",
       " 32,\n",
       " 33,\n",
       " 34,\n",
       " 31,\n",
       " 32,\n",
       " 33,\n",
       " 34,\n",
       " 31,\n",
       " 32,\n",
       " 33,\n",
       " 34,\n",
       " 31,\n",
       " 32,\n",
       " 33,\n",
       " 34,\n",
       " 35,\n",
       " 36,\n",
       " 37,\n",
       " 38,\n",
       " 35,\n",
       " 36,\n",
       " 37,\n",
       " 38,\n",
       " 39,\n",
       " 40,\n",
       " 41,\n",
       " 42,\n",
       " 39,\n",
       " 40,\n",
       " 41,\n",
       " 42,\n",
       " 39,\n",
       " 40,\n",
       " 41,\n",
       " 42,\n",
       " 39,\n",
       " 40,\n",
       " 41,\n",
       " 42,\n",
       " 43,\n",
       " 44,\n",
       " 45,\n",
       " 46,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50,\n",
       " 45,\n",
       " 46,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50,\n",
       " 45,\n",
       " 46,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50,\n",
       " 45,\n",
       " 46,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50,\n",
       " 45,\n",
       " 46,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50]"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# OPTIONAL - relevant only for bug fixing...\n",
    "missing_rows=[]\n",
    "for sub in missing_subs:\n",
    "    for row in range(0,len(subject_info)):\n",
    "        if subject_info['subject'].iloc[row]==sub:\n",
    "#             print('Chosen subject is on row: ',row)\n",
    "            missing_rows.append(row)\n",
    "missing_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "subject_info_re=subject_info.iloc[missing_rows]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FR1\n",
      "minimum sr: 500\n",
      "maximum sr: 1600\n",
      "number of subjects: 99\n"
     ]
    }
   ],
   "source": [
    "#load sampling rate:\n",
    "save_path='/scratch/noaherz/False-Memory/hippo_pre_recall'\n",
    "os.chdir(save_path)\n",
    "subs_sr=[]\n",
    "# exp='catFR1'\n",
    "print(exp)\n",
    "for sub in subject_info['subject'].unique():\n",
    "    try:\n",
    "        subs_sr.append(np.load(f\"{sub}_{exp}_sr.npy\").tolist()) # R1001P_hipp_electrodes_1_0_0.npy) # add *sr*?\n",
    "    except:\n",
    "#         print('sub ', sub,'is missing')\n",
    "        continue\n",
    "print('minimum sr:',min(subs_sr))\n",
    "print('maximum sr:',max(subs_sr))\n",
    "print('number of subjects:',len(subs_sr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>localization</th>\n",
       "      <th>montage</th>\n",
       "      <th>session</th>\n",
       "      <th>subject</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1001P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1001P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1215M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>R1230J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1168T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>R1083J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>R1061T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1049J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1010J</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1010J</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>116 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    localization montage session subject\n",
       "0              0       0       0  R1001P\n",
       "1              0       0       1  R1001P\n",
       "2              0       0       1  R1215M\n",
       "3              0       0       6  R1230J\n",
       "4              0       0       0  R1168T\n",
       "..           ...     ...     ...     ...\n",
       "111            0       0       2  R1083J\n",
       "112            0       0       2  R1061T\n",
       "113            0       0       0  R1049J\n",
       "114            0       0       0  R1010J\n",
       "115            0       0       1  R1010J\n",
       "\n",
       "[116 rows x 4 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# USE THIS!\n",
    "# load power\n",
    "# file names are saved in the shape of: {loc}_{mont}_{sess} \n",
    "\n",
    "subs_inserted_to_analysis=pd.DataFrame([])\n",
    "PLI_ELIsubs_inserted_to_analysis = pd.DataFrame([])\n",
    "# initialize power variables (mean across hipp electrodes):\n",
    "correct_recall_hipp_pows=[];all_intrusions_hipp_pows=[];ELI_hipp_pows=[];PLI_hipp_pows=[];deliberation_hipp_pows=[];\n",
    "related_intrusions_pows=[]; nonrelated_intrusions_pows =[]\n",
    "\n",
    "# initialize power veriables for classifier (all electrodes):\n",
    "correct_recall_pow=[];all_intrusions_pow=[];ELI_pow=[];PLI_pow=[];deliberation_pow=[];\n",
    "related_intrusions_pow=[]; nonrelated_intrusions_pow =[]\n",
    "\n",
    "# initialize output position:\n",
    "correct_recall_output_position=[] ; all_intrusions_output_position=[];deliberation_output_position=[]\n",
    "PLI_output_position=[] ; ELI_output_position=[] ; nonrelated_intrusions_output_position=[]; related_intrusions_output_position=[];\n",
    "\n",
    "# initiaize semantic similarity:\n",
    "correct_recall_semantic_similarity=[]; all_intrusions_semantic_similarity=[];\n",
    "deliberation_semantic_similarity=[]; PLI_semantic_similarity=[]; ELI_semantic_similarity=[] ;\n",
    " \n",
    "# initialize semantic relatedness:\n",
    "correct_recall_semantic_relatedness =[]; all_intrusions_semantic_relatedness = [];\n",
    "deliberation_semantic_relatedness = []; PLI_semantic_relatedness=[]; ELI_semantic_relatedness=[];\n",
    "\n",
    "# for i in range(0,len(subject_info)):\n",
    "#     info=(subject_info['subject'].iloc[i], subject_info['experiment'].iloc[i],int(subject_info['localization'].iloc[i]), int(subject_info['montage'].iloc[i]), int(subject_info['session'].iloc[i]))\n",
    "\n",
    "# files=!find -P /scratch/noaherz/False-Memory -type f -name \"*_events_index_*\"\n",
    "os.chdir(save_path)\n",
    "files=!find -P -type f -name \"*_semantic_similarity_*\"\n",
    "files=[i[-40:-1] for i in files]\n",
    "\n",
    "for i in range(0,len(files)):\n",
    "    if exp=='catFR1':\n",
    "#     info=[files[i][30:36],files[i][37:43],files[i][-9:-8],files[i][-7:-6],files[i][-5:-4]]\n",
    "        info=[files[i][0:6],files[i][7:13],files[i][-8:-7],files[i][-6:-5],files[i][-4:-3]]\n",
    "    elif exp=='FR1':\n",
    "        info=[files[i][0:6],files[i][7:10],files[i][-8:-7],files[i][-6:-5],files[i][-4:-3]]\n",
    "\n",
    "    # load channel mask\n",
    "    channel_filename=f\"{info[0]}_{info[1]}_hipp_electrodes_{info[2]}_{info[3]}_{info[4]}.npy\"\n",
    "    hipp_electrodes=np.load(channel_filename) # R1001P_hipp_electrodes_1_0_0.npy\n",
    "\n",
    "    # load event mask\n",
    "    event_filename=f\"{info[0]}_{info[1]}_events_index_{info[2]}_{info[3]}_{info[4]}.pkl\"\n",
    "    event_df= pd.read_pickle(event_filename)\n",
    "\n",
    "    # load output_position \n",
    "    output_position_filename=f\"{info[0]}_{info[1]}_output_position_{info[2]}_{info[3]}_{info[4]}.pkl\"\n",
    "    output_position_df = pd.read_pickle(output_position_filename)\n",
    "\n",
    "    # load semantic similarity:\n",
    "    if exp=='catFR1':\n",
    "        semantic_similarity_filename=f\"{info[0]}_{info[1]}_semantic_similarity_{info[2]}_{info[3]}_{info[4]}.pkl\"\n",
    "        semantic_similarity_df = pd.read_pickle(semantic_similarity_filename)\n",
    "\n",
    "    if len(event_df['correct_recall_serial_index'][0]) > 0:\n",
    "        # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_correct_recall_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        correct_recall_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        hipp_correct_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['correct_recall_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(output_position_df['correct_recall_output_position'][~np.isnan(output_position_df['correct_recall_output_position'].str.len())].values[0])\n",
    "        correct_recall_hipp_pows.append(hipp_correct_pow_mean)# frequency (40), event, time (47?)\n",
    "        event_power.close()\n",
    "        \n",
    "        correct_recall_output_position.append(output_position_df['correct_recall_output_position'][~np.isnan(output_position_df['correct_recall_output_position'].str.len())].values)\n",
    "        if exp=='catFR1':\n",
    "            correct_recall_semantic_similarity.append(semantic_similarity_df['correct_recall_semantic_similarity'].iloc[6])\n",
    "            correct_recall_semantic_relatedness.append(semantic_similarity_df['correct_recall_semantic_relatedness'].iloc[7])\n",
    "        \n",
    "        subs_inserted_to_analysis=subs_inserted_to_analysis.append({'subject':info[0],'session':info[4],'montage':info[3],'localization':info[2]},ignore_index=True)\n",
    "\n",
    "    if len(event_df['all_intrusions_serial_index'][0]) > 0:\n",
    "        # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_all_intrusions_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        all_intrusions_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        hipp_intrusions_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['all_intrusions_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert len(hipp_intrusions_pow_mean[0][0])==len(output_position_df['all_intrusions_output_position'][~np.isnan(output_position_df['all_intrusions_output_position'].str.len())].values[0])\n",
    "        all_intrusions_hipp_pows.append(hipp_intrusions_pow_mean) # frequency (40), event, time (47?)\n",
    "        event_power.close()\n",
    "        \n",
    "        all_intrusions_output_position.append(output_position_df['all_intrusions_output_position'][~np.isnan(output_position_df['all_intrusions_output_position'].str.len())].values)\n",
    "        if exp=='catFR1':\n",
    "            all_intrusions_semantic_similarity.append(semantic_similarity_df['all_intrusions_semantic_similarity'].iloc[6])\n",
    "            all_intrusions_semantic_relatedness.append(semantic_similarity_df['all_intrusions_semantic_relatedness'].iloc[7])\n",
    "\n",
    "      \n",
    "    if len(event_df['deliberation_serial_index'][0]) > 0:\n",
    "       # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_deliberation_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        deliberation_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        hipp_deliberation_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['deliberation_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(output_position_df['deliberation_output_position'][~np.isnan(output_position_df['deliberation_output_position'].str.len())].values[0])\n",
    "        deliberation_hipp_pows.append(hipp_deliberation_pow_mean)\n",
    "        event_power.close()\n",
    "        deliberation_output_position.append(output_position_df['deliberation_output_position'][~np.isnan(output_position_df['deliberation_output_position'].str.len())].values)\n",
    "        if exp=='catFR1':\n",
    "            deliberation_semantic_similarity.append(semantic_similarity_df['deliberation_semantic_similarity'].iloc[6])\n",
    "            deliberation_semantic_relatedness.append(semantic_similarity_df['deliberation_semantic_relatedness'].iloc[7])\n",
    " \n",
    "    if len(event_df['PLI_serial_index'][0]) > 0 and 'PLI_output_position' in output_position_df.columns:\n",
    "        # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_PLI_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        PLI_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        PLI_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['PLI_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(output_position_df['PLI_output_position'][~np.isnan(output_position_df['PLI_output_position'].str.len())].values[0])\n",
    "        PLI_hipp_pows.append(PLI_pow_mean)\n",
    "        event_power.close()\n",
    "        \n",
    "        PLI_output_position.append(output_position_df['PLI_output_position'][~np.isnan(output_position_df['PLI_output_position'].str.len())].values)\n",
    "        if exp=='catFR1':\n",
    "            PLI_semantic_similarity.append(semantic_similarity_df['PLI_semantic_similarity'].iloc[6])\n",
    "            PLI_semantic_relatedness.append(semantic_similarity_df['PLI_semantic_relatedness'].iloc[7])\n",
    "\n",
    "        PLI_ELIsubs_inserted_to_analysis=PLI_ELIsubs_inserted_to_analysis.append({'subject':info[0],'session':info[4],'montage':info[3],'localization':info[2]},ignore_index=True)\n",
    "\n",
    "    \n",
    "    if len(event_df['ELI_serial_index'][0]) > 0  and 'ELI_output_position' in output_position_df.columns:\n",
    "       # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_ELI_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        ELI_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        ELI_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['ELI_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(output_position_df['ELI_output_position'][~np.isnan(output_position_df['ELI_output_position'].str.len())].values[0])\n",
    "        ELI_hipp_pows.append(ELI_pow_mean)\n",
    "        event_power.close()\n",
    "        \n",
    "        ELI_output_position.append(output_position_df['ELI_output_position'][~np.isnan(output_position_df['ELI_output_position'].str.len())].values)\n",
    "        if exp=='catFR1':\n",
    "            ELI_semantic_similarity.append(semantic_similarity_df['ELI_semantic_similarity'].iloc[6])\n",
    "            ELI_semantic_relatedness.append(semantic_similarity_df['ELI_semantic_relatedness'].iloc[7])\n",
    " \n",
    " \n",
    "    if len(event_df['related_intrusions_serial_index'][0]) > 0:\n",
    "        # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_related_intrusions_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        related_intrusions_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        related_intrusions_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['related_intrusions_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(output_position_df['related_intrusions_output_position'][~np.isnan(output_position_df['related_intrusions_output_position'].str.len())].values[0])\n",
    "        related_intrusions_pows.append(hipp_correct_pow_mean)\n",
    "        event_power.close()\n",
    "\n",
    "        related_intrusions_output_position.append(output_position_df['related_intrusions_output_position'][~np.isnan(output_position_df['related_intrusions_output_position'].str.len())].values)\n",
    "\n",
    "        \n",
    "    if len(event_df['nonrelated_intrusions_serial_index'][0]) > 0:\n",
    "#         nonrelated_intrusions_semantic_similarity.append(semantic_similarity_df['nonrelated_intrusions_semantic_similarity'].iloc[6])\n",
    "#         nonrelated_intrusions_semantic_relatedness.append(semantic_similarity_df['nonrelated_intrusions_semantic_relatedness'].iloc[7])\n",
    "        # load power\n",
    "        power_filename=f\"{info[0]}_{info[1]}_nonrelated_intrusions_pows_{info[2]}_{info[3]}_{info[4]}.nc\"\n",
    "        event_power = xr.open_dataset(power_filename)\n",
    "        nonrelated_intrusions_pow.append(event_power.isel(channel=hipp_electrodes)) # for classifier\n",
    "        nonrelated_intrusions_pow_mean=list(event_power.isel(channel=hipp_electrodes).mean(dim='channel').values())\n",
    "        assert event_power.channel.shape[0]==len(hipp_electrodes),'mismached channel dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(event_df['nonrelated_intrusions_serial_index'][0]),'mismached event dimension for sub '+info[0]\n",
    "        assert event_power.event.shape[0]==len(output_position_df['nonrelated_intrusions_output_position'][~np.isnan(output_position_df['nonrelated_intrusions_output_position'].str.len())].values[0])\n",
    "        nonrelated_intrusions_pows.append(hipp_correct_pow_mean)\n",
    "        event_power.close()\n",
    "        \n",
    "        nonrelated_intrusions_output_position.append(output_position_df['nonrelated_intrusions_output_position'][~np.isnan(output_position_df['nonrelated_intrusions_output_position'].str.len())].values)\n",
    "\n",
    "\n",
    "# len(correct_recall_hipp_pows_xr)==len(correct_recall_output_position)\n",
    "subs_inserted_to_analysis\n",
    "# PLI_ELIsubs_inserted_to_analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "116"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(correct_recall_output_position)\n",
    "# len(correct_recall_hipp_pows[3][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(0,len(all_intrusions_hipp_pows)):\n",
    "    assert len(all_intrusions_output_position[i][0])==len(all_intrusions_hipp_pows[i][0][0]),f\"error in row {i}\"\n",
    "    \n",
    "for i in range(0,len(deliberation_hipp_pows)):\n",
    "    assert len(deliberation_output_position[i][0])==len(deliberation_hipp_pows[i][0][0]),f\"error in row {i}\"\n",
    "    \n",
    "for i in range(0,len(ELI_hipp_pows)):\n",
    "    assert len(ELI_output_position[i][0])==len(ELI_hipp_pows[i][0][0]),f\"error in row {i}\"    \n",
    "    \n",
    "for i in range(0,len(PLI_hipp_pows)):\n",
    "    assert len(PLI_output_position[i][0])==len(PLI_hipp_pows[i][0][0]),f\"error in row {i}\"    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each subject, I average spectral power over high frequencies and low-frequencies across all electrodes. \n",
    "Then, I take the high-frequency–low-frequency difference as a measure of the tilt. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If starting from here - let's load the data!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-249-47bd6b97ae7f>, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-249-47bd6b97ae7f>\"\u001b[0;36m, line \u001b[0;32m6\u001b[0m\n\u001b[0;31m    subs_info=subs[i],montage[i],session[i] for i in range(0,len(files))\u001b[0m\n\u001b[0m                                              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# # file names are saved in the shape of: {loc}_{mont}_{sess} \n",
    "# files=!find -P /scratch/noaherz/False-Memory -type f -name \"*_correct_recall_pows_*\"\n",
    "# subs=[files[i][30:36] for i in range(0,len(files))]\n",
    "# session=[files[i][-4:-3] for i in range(0,len(files))]\n",
    "# montage=[files[i][-6:-5] for i in range(0,len(files))]\n",
    "# subs_info=subs[i],montage[i],session[i] for i in range(0,len(files))\n",
    "# # print(files)\n",
    "# # print(session)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of rows removed:  349\n",
      "number of subjects removed: 129\n"
     ]
    }
   ],
   "source": [
    "# remove subject that doesn't have eeg data   \n",
    "keep_index = []\n",
    "for i,j in subs_inserted_to_analysis.iterrows():\n",
    "    subject_data=subject_info[subject_info['subject']==j['subject']]\n",
    "    montage_data=subject_data[subject_data['montage']==float(j['montage'])]\n",
    "    session_data = montage_data[montage_data['session']==float(j['session'])]\n",
    "    keep_index.append(session_data.index[0])\n",
    "new_subject_info=subject_info.loc[keep_index]\n",
    "print('number of rows removed: ',len(subject_info.index)-len(keep_index)) # keep only overlapping index    \n",
    "print('number of subjects removed:', len(subject_info['subject'].unique())-len(new_subject_info['subject'].unique()))  \n",
    "\n",
    "remove_subs_ind=[]\n",
    "for subj in new_subject_info['subject'].unique():\n",
    "    sub_data=new_subject_info[new_subject_info['subject']==subj]\n",
    "    sub_PLI=sum(sub_data['number of prior-list intrusions'])\n",
    "    sub_ELI=sum(sub_data['number of extra-list intrusions'])\n",
    "    if sub_PLI<5 or sub_ELI<5:\n",
    "        remove_subs_ind.extend(list(PLI_ELIsubs_inserted_to_analysis[PLI_ELIsubs_inserted_to_analysis['subject']==subj].index))\n",
    "PLI_ELIsubs_inserted_to_analysis=PLI_ELIsubs_inserted_to_analysis.drop(index=remove_subs_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# counts of intrusions\n",
    "# from add_semantic_relatedness import add_semantic_relatedness,categorized_words\n",
    "total_ELIs=[]\n",
    "total_PLIs=[]\n",
    "total_sem_related=[]\n",
    "total_sem_nonrelated =[]\n",
    "ELIs_sem_related = []\n",
    "ELIs_sem_nonrelated = []\n",
    "PLIs_sem_related = []\n",
    "PLIs_sem_nonrelated = []\n",
    "\n",
    "if exp=='catFR1':\n",
    "    for i in new_subject_info.index:\n",
    "    #     row_data=new_subject_info.loc[row]\n",
    "\n",
    "        sub = new_subject_info.loc[i]['subject']\n",
    "        exp = new_subject_info.loc[i]['experiment']\n",
    "        sess= int(new_subject_info.loc[i]['session']) \n",
    "        mont= int(new_subject_info.loc[i]['montage'])\n",
    "        loc=  int(new_subject_info.loc[i]['localization']) # mostly 0  \n",
    "        trials= new_subject_info.loc[i]['trials for analysis'] +new_subject_info.loc[i]['<>verbalization_trials']   \n",
    "\n",
    "        reader = CMLReader(sub, exp, sess, montage=mont, localization=loc)\n",
    "        evs = reader.load('task_events')\n",
    "\n",
    "        # Semantic_similarity measure: run only on catFR\n",
    "        if exp=='catFR1':\n",
    "            evs=add_semantic_relatedness(evs)\n",
    "\n",
    "        if len(trials)==0:\n",
    "            continue\n",
    "        chosen_data = evs.loc[trials]\n",
    "\n",
    "        #intrusions count (as a function of semantic and temporal similarity)\n",
    "        intrusion_data=chosen_data[chosen_data['intrusion']!=0]\n",
    "    #     total_n_intrusions=len(intrusion_data)\n",
    "        ELIs_num=len(intrusion_data[intrusion_data['intrusion']<0])\n",
    "        PLIs_num=len(intrusion_data[intrusion_data['intrusion']>0])\n",
    "        total_ELIs.append(ELIs_num)\n",
    "        total_PLIs.append(PLIs_num)\n",
    "        total_sem_related.append(len(intrusion_data[intrusion_data['semantic_relatedness']==1]))\n",
    "        total_sem_nonrelated.append(len(intrusion_data[intrusion_data['semantic_relatedness']==0]))\n",
    "        if ELIs_num >=5 and PLIs_num >=5:\n",
    "            ELIs_sem_related.append(sum(np.logical_and(intrusion_data['intrusion']<0,intrusion_data['semantic_relatedness']==1)))\n",
    "            ELIs_sem_nonrelated.append(sum(np.logical_and(intrusion_data['intrusion']<0,intrusion_data['semantic_relatedness']==0)))\n",
    "            PLIs_sem_related.append(sum(np.logical_and(intrusion_data['intrusion']>0,intrusion_data['semantic_relatedness']==1)))\n",
    "            PLIs_sem_nonrelated.append(sum(np.logical_and(intrusion_data['intrusion']>0,intrusion_data['semantic_relatedness']==0)))\n",
    "\n",
    "        print('total_ELIs:', np.sum(total_ELIs))\n",
    "        print('total_PLIs:', np.sum(total_PLIs))\n",
    "        print('total semantically related:', np.sum(total_sem_related))\n",
    "        print('total semantically nonrelated:', np.sum(total_sem_nonrelated))\n",
    "        print('total ELIs semantically nonrelated:', np.sum(ELIs_sem_nonrelated))\n",
    "        print('total PLIs semantically nonrelated:', np.sum(PLIs_sem_nonrelated))\n",
    "        print('total ELIs semantically related:', np.sum(ELIs_sem_related))\n",
    "        print('total PLIs semantically related:', np.sum(PLIs_sem_related))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up a Data Frame in a long format\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# choose time windows:\n",
    "verbalization_start = convertMstoWindowNumber(0,-2500,-100,100,50)\n",
    "pre_verbalization_end_window = convertMstoWindowNumber(-100,-2500,-100,100,50)\n",
    "pre_verbalization_window = convertMstoWindowNumber(-600,-2500,-100,100,50)\n",
    "deliberation_start_window = convertMstoWindowNumber(-2000,-2500,-100,100,50)\n",
    "deliberation_end_window = convertMstoWindowNumber(-1500,-2500,-100,100,50)\n",
    "\n",
    "assert deliberation_end_window > 0 \n",
    "myfreqs = np.logspace(np.log10(4), np.log10(100), 40)  #2-100 Hz, 46 frequencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['R1001P', 'R1215M', 'R1230J', 'R1168T', 'R1137E', 'R1125T',\n",
       "       'R1066P', 'R1336T', 'R1339D', 'R1200T', 'R1006P', 'R1034D',\n",
       "       'R1169P', 'R1151E', 'R1067P', 'R1123C', 'R1275D', 'R1158T',\n",
       "       'R1293P', 'R1108J', 'R1374T', 'R1145J', 'R1350D', 'R1240T',\n",
       "       'R1337E', 'R1153T', 'R1283T', 'R1325C', 'R1122E', 'R1112M',\n",
       "       'R1338T', 'R1341T', 'R1002P', 'R1094T', 'R1299T', 'R1102P',\n",
       "       'R1068J', 'R1077T', 'R1187P', 'R1174T', 'R1311T', 'R1148P',\n",
       "       'R1150J', 'R1291M', 'R1161E', 'R1083J', 'R1217T', 'R1022J',\n",
       "       'R1316T', 'R1003P', 'R1292E', 'R1080E', 'R1033D', 'R1191J',\n",
       "       'R1243T', 'R1172E', 'R1096E', 'R1247P', 'R1330D', 'R1063C',\n",
       "       'R1052E', 'R1061T', 'R1048E', 'R1053M', 'R1089P', 'R1020J',\n",
       "       'R1049J', 'R1010J'], dtype=object)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dependednt variable: power, independent vars: output position, event type (correct recall/intrusion/deliberation)\n",
    "# d = {’event_type’: event_type,’output_position’: output_position, 'subject': subject,’power’:power} with:\n",
    "# event_type (‘ correct recall' /'intrusion'/ 'deliberation’), \n",
    "# output_position (number of output position. e.g. 3), \n",
    "# subject (e.g. ‘R1111M’), \n",
    "# power (mean power in a certain frequency band).\n",
    "\n",
    "\n",
    "# average over frequencies:\n",
    "HFA_index=np.where((myfreqs>=44) & (myfreqs<=100))[0] # similar to Long et al.\n",
    "LFA_index=np.where((myfreqs>=4) & (myfreqs<=18))[0]# I combined the theta 4–8 Hz, alpha 8–12 Hz and beta 12-18 Hz ranges. \n",
    "\n",
    "event_type_names=['correct recall', 'intrusion','deliberation','PLI','ELI']\n",
    "# event_type_names=['intrusion']\n",
    "\n",
    "event_type_output_position=[correct_recall_output_position,all_intrusions_output_position,deliberation_output_position,PLI_output_position,ELI_output_position]\n",
    "# event_type_output_position=[all_intrusions_output_position]\n",
    "\n",
    "if exp=='catFR1':\n",
    "    event_type_semantic_similarity = [correct_recall_semantic_similarity,all_intrusions_semantic_similarity,deliberation_semantic_similarity,PLI_semantic_similarity,ELI_semantic_similarity]\n",
    "    event_type_semantic_relatedness = [correct_recall_semantic_relatedness,all_intrusions_semantic_relatedness,deliberation_semantic_relatedness,PLI_semantic_relatedness,ELI_semantic_relatedness]\n",
    "\n",
    "event_counter=-1\n",
    "long_df=pd.DataFrame([])\n",
    "for event in [correct_recall_hipp_pows,all_intrusions_hipp_pows,deliberation_hipp_pows,PLI_hipp_pows,ELI_hipp_pows]:    \n",
    "# for event in [all_intrusions_hipp_pows_xr]:    \n",
    "    event_counter=event_counter+1 # will start from 0\n",
    "    if event_counter<=2: # for correct recall,intrusions or deliberations:\n",
    "        subs=subs_inserted_to_analysis\n",
    "    elif event_counter>=3: # PLI and ELI:\n",
    "        subs=PLI_ELIsubs_inserted_to_analysis\n",
    "    for sub_ind in range(0,len(subs)):\n",
    "#         print(sub_ind)\n",
    "        sub_info=subs.iloc[sub_ind]\n",
    "        power=np.array(event[sub_ind])\n",
    "        power=np.reshape(power,(power.shape[1],power.shape[2],power.shape[3])) # squeeze 1 dimension\n",
    "        if event_type_names[event_counter]=='deliberation':\n",
    "            time_mean=np.mean(power[:,:,deliberation_start_window:deliberation_end_window],axis=2)\n",
    "        else:\n",
    "            time_mean=np.mean(power[:,:,pre_verbalization_window:pre_verbalization_end_window],axis=2)\n",
    "        HFA_mean=np.mean(time_mean[HFA_index,:],axis=0)\n",
    "        LFA_mean=np.mean(time_mean[LFA_index,:],axis=0)\n",
    "#         print(sub_info)\n",
    "#         assert len(event_type_output_position[event_counter][sub_ind][0])==len(event[sub_ind][0][0]) # compare number of trials\n",
    "        assert power.shape[1] == len(event_type_output_position[event_counter][sub_ind][0]),f\"problem with sub {sub_ind}\"\n",
    "        if exp=='catFR1': \n",
    "            for trial_num in range(0,time_mean.shape[1]):\n",
    "                long_df=long_df.append({'trial_number':trial_num,'subject':sub_info['subject'],\n",
    "                                        'sessions':sub_info['session'],'event_type':event_type_names[event_counter],\n",
    "                                       'HFA':HFA_mean[trial_num],\n",
    "                                       'LFA':LFA_mean[trial_num],\n",
    "                                       'HFA_LFA_diff':HFA_mean[trial_num]-LFA_mean[trial_num],\n",
    "                                       'output_position':event_type_output_position[event_counter][sub_ind][0].iloc[trial_num],\n",
    "                                       'semantic_similarity':event_type_semantic_similarity[event_counter][sub_ind].iloc[trial_num],\n",
    "                                       'semantic_relatedness': event_type_semantic_relatedness[event_counter][sub_ind].iloc[trial_num]},ignore_index=True)\n",
    "        elif exp in ['FR1','pyFR']: \n",
    "            for trial_num in range(0,time_mean.shape[1]):\n",
    "                long_df=long_df.append({'trial_number':trial_num,'subject':sub_info['subject'],\n",
    "                                        'sessions':sub_info['session'],'event_type':event_type_names[event_counter],\n",
    "                                       'HFA':HFA_mean[trial_num],\n",
    "                                       'LFA':LFA_mean[trial_num],\n",
    "                                       'HFA_LFA_diff':HFA_mean[trial_num]-LFA_mean[trial_num],\n",
    "                                       'output_position':event_type_output_position[event_counter][sub_ind][0].iloc[trial_num],\n",
    "                                       },ignore_index=True)\n",
    "\n",
    "long_df['subject'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "101    7.0\n",
      "155    7.0\n",
      "204    4.0\n",
      "226    1.0\n",
      "Name: output position, dtype: float64\n",
      "2\n",
      "localization         0\n",
      "montage              0\n",
      "session              1\n",
      "subject         R1144E\n",
      "Name: 2, dtype: object\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<xarray.DataArray '__xarray_dataarray_variable__' (frequency: 40, event: 19, time: 99)>\n",
       " array([[[ 0.88110651,  0.77041045,  0.58036965, ..., -0.82797279,\n",
       "          -0.43199009, -0.30289565],\n",
       "         [ 1.37665934,  1.31944149,  1.21348672, ..., -0.85174606,\n",
       "          -1.10447831, -1.38182482],\n",
       "         [ 0.28681901,  0.0252779 , -0.41459152, ..., -1.17368219,\n",
       "          -0.57707648, -0.2700142 ],\n",
       "         ...,\n",
       "         [-0.39441959, -0.39494353, -0.51482928, ..., -0.89346692,\n",
       "          -1.14990517, -2.01517016],\n",
       "         [-0.56888702, -0.73566042, -0.99689374, ...,  1.01316411,\n",
       "           0.82507183,  0.59685415],\n",
       "         [-0.70531492, -0.60164347, -0.60869881, ..., -0.75704337,\n",
       "          -0.98346575, -1.27861026]],\n",
       " \n",
       "        [[ 0.81575492,  0.69417418,  0.45827647, ..., -0.50457892,\n",
       "          -0.411368  , -0.54560052],\n",
       "         [ 1.17952457,  1.14300593,  1.03524801, ..., -1.59307324,\n",
       "          -1.85439649, -1.91383074],\n",
       "         [ 0.43812214,  0.1617202 , -0.27513809, ..., -1.40698611,\n",
       "          -0.66683792, -0.25262332],\n",
       "         ...,\n",
       "         [ 0.10798634,  0.058918  , -0.09360185, ..., -0.74463299,\n",
       "          -0.98728644, -1.5773384 ],\n",
       "         [-0.3086041 , -0.59880849, -1.13471666, ...,  1.27797245,\n",
       "           1.15612398,  1.01912165],\n",
       "         [-1.13570492, -0.69542577, -0.55365696, ..., -0.44933048,\n",
       "          -0.66504886, -0.88852889]],\n",
       " \n",
       "        [[ 0.68410408,  0.59241048,  0.37298575, ..., -0.15046443,\n",
       "          -0.27431767, -0.95412658],\n",
       "         [ 0.90612547,  0.93981483,  0.86338368, ..., -0.80285192,\n",
       "          -0.92400154, -0.7845285 ],\n",
       "         [ 0.58163463,  0.28437277, -0.15860387, ..., -1.86942965,\n",
       "          -0.70353841, -0.15001543],\n",
       "         ...,\n",
       "         [ 0.48985562,  0.40732341,  0.22756921, ..., -0.66768972,\n",
       "          -0.81738793, -1.13982636],\n",
       "         [ 0.07731104, -0.27662377, -0.97526184, ...,  1.43485479,\n",
       "           1.32303699,  1.20034631],\n",
       "         [-1.11529967, -0.68398744, -0.48472655, ..., -0.240377  ,\n",
       "          -0.52426623, -0.81278735]],\n",
       " \n",
       "        ...,\n",
       " \n",
       "        [[-0.10031087, -0.58991579, -1.68684049, ...,  0.14267823,\n",
       "           0.61927599,  0.54525471],\n",
       "         [-0.66090491,  0.57480814, -0.0115787 , ...,  0.67581845,\n",
       "          -0.09889616,  0.07691567],\n",
       "         [-0.01702063, -0.46274913,  0.21433871, ..., -0.04220225,\n",
       "          -0.11409454, -0.30906174],\n",
       "         ...,\n",
       "         [ 1.04334109, -0.73814054, -0.8492484 , ...,  0.43010637,\n",
       "           0.34571691,  0.17722823],\n",
       "         [-1.15584942,  0.28918019,  0.29558901, ..., -0.08902353,\n",
       "           0.63795017,  0.43255596],\n",
       "         [ 0.23324291, -0.0383417 , -0.64518122, ..., -0.53993588,\n",
       "          -0.611227  , -0.27351718]],\n",
       " \n",
       "        [[ 0.21546407, -0.28453944, -1.70300104, ...,  0.02878681,\n",
       "           1.056959  ,  0.93065717],\n",
       "         [-0.44034476,  0.76717833, -0.11973442, ...,  0.66566389,\n",
       "          -0.07341711,  0.02786622],\n",
       "         [-0.46655041, -0.90100239, -0.32302818, ..., -0.28154873,\n",
       "          -0.07573614, -0.3902627 ],\n",
       "         ...,\n",
       "         [ 0.76830246, -0.78230621, -0.83185255, ...,  0.28354227,\n",
       "           0.38933579,  0.08173014],\n",
       "         [-1.00767442,  0.54070798,  0.24506601, ..., -0.4836056 ,\n",
       "           0.24256067,  0.41905623],\n",
       "         [ 0.7315727 ,  0.66532265, -0.13425923, ..., -0.82879168,\n",
       "          -0.5531674 , -0.1995654 ]],\n",
       " \n",
       "        [[ 0.54854279, -0.06042764, -1.51941299, ...,  0.16269978,\n",
       "           1.50070225,  0.99934955],\n",
       "         [-0.32493576,  0.69870058, -0.00618813, ...,  0.67122876,\n",
       "          -0.05566302, -0.16106007],\n",
       "         [-0.93457227, -1.13306026, -0.44130705, ..., -0.24503548,\n",
       "          -0.01280188, -0.21496349],\n",
       "         ...,\n",
       "         [ 0.72672288, -0.53841896, -0.64822767, ...,  0.10028794,\n",
       "           0.44276599,  0.40951858],\n",
       "         [-1.236776  ,  0.44937805,  0.38840433, ..., -0.56325748,\n",
       "           0.21476788,  0.22291895],\n",
       "         [ 1.10657256,  1.29492753,  0.10844445, ..., -0.69380317,\n",
       "          -0.45915802, -0.01594942]]])\n",
       " Dimensions without coordinates: frequency, event, time]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# event_type_output_position\n",
    "print(event_counter)\n",
    "print(event_type_output_position[event_counter][sub_ind][0])\n",
    "print(sub_ind)\n",
    "# event[sub_ind][0][0]\n",
    "# all_intrusions_hipp_pows[5]\n",
    "# all_intrusions_output_position[5]\n",
    "print(sub_info)\n",
    "correct_recall_hipp_pows[sub_ind]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional: save dataframe\n",
    "with open('/home1/noaherz/Long2017/FR1_replication_results/mirrored_buffer/FR1/hipp_pre_vocalization/long_df','wb') as filehandle:\n",
    "    pickle.dump(long_df,filehandle)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load\n",
    "with open('/home1/noaherz/Long2017/FR1_replication_results/mirrored_buffer/FR1/hipp_pre_vocalization/long_df','rb') as pickle_file:\n",
    "    long_df=pickle.load(pickle_file)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HFA</th>\n",
       "      <th>HFA_LFA_diff</th>\n",
       "      <th>LFA</th>\n",
       "      <th>event_type</th>\n",
       "      <th>output_position</th>\n",
       "      <th>sessions</th>\n",
       "      <th>subject</th>\n",
       "      <th>trial_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.136906</td>\n",
       "      <td>0.439617</td>\n",
       "      <td>-0.302712</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.191464</td>\n",
       "      <td>-0.064291</td>\n",
       "      <td>-0.127173</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.125442</td>\n",
       "      <td>-0.092538</td>\n",
       "      <td>0.217980</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.545734</td>\n",
       "      <td>-0.287537</td>\n",
       "      <td>-0.258196</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.166733</td>\n",
       "      <td>-0.294674</td>\n",
       "      <td>0.127941</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6114</th>\n",
       "      <td>-0.370915</td>\n",
       "      <td>-0.276943</td>\n",
       "      <td>-0.093972</td>\n",
       "      <td>ELI</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1010J</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6115</th>\n",
       "      <td>-0.073644</td>\n",
       "      <td>-0.121871</td>\n",
       "      <td>0.048227</td>\n",
       "      <td>ELI</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1010J</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6116</th>\n",
       "      <td>0.202968</td>\n",
       "      <td>0.383499</td>\n",
       "      <td>-0.180531</td>\n",
       "      <td>ELI</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1010J</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6117</th>\n",
       "      <td>-0.312292</td>\n",
       "      <td>0.170730</td>\n",
       "      <td>-0.483022</td>\n",
       "      <td>ELI</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1010J</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6118</th>\n",
       "      <td>-0.009336</td>\n",
       "      <td>-0.063829</td>\n",
       "      <td>0.054493</td>\n",
       "      <td>ELI</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>R1010J</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6119 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           HFA  HFA_LFA_diff       LFA      event_type  output_position  \\\n",
       "0     0.136906      0.439617 -0.302712  correct recall              3.0   \n",
       "1    -0.191464     -0.064291 -0.127173  correct recall              5.0   \n",
       "2     0.125442     -0.092538  0.217980  correct recall              5.0   \n",
       "3    -0.545734     -0.287537 -0.258196  correct recall              6.0   \n",
       "4    -0.166733     -0.294674  0.127941  correct recall              2.0   \n",
       "...        ...           ...       ...             ...              ...   \n",
       "6114 -0.370915     -0.276943 -0.093972             ELI              3.0   \n",
       "6115 -0.073644     -0.121871  0.048227             ELI              3.0   \n",
       "6116  0.202968      0.383499 -0.180531             ELI              4.0   \n",
       "6117 -0.312292      0.170730 -0.483022             ELI              2.0   \n",
       "6118 -0.009336     -0.063829  0.054493             ELI              3.0   \n",
       "\n",
       "     sessions subject  trial_number  \n",
       "0           0  R1001P           0.0  \n",
       "1           0  R1001P           1.0  \n",
       "2           0  R1001P           2.0  \n",
       "3           0  R1001P           3.0  \n",
       "4           0  R1001P           4.0  \n",
       "...       ...     ...           ...  \n",
       "6114        1  R1010J           3.0  \n",
       "6115        1  R1010J           4.0  \n",
       "6116        1  R1010J           5.0  \n",
       "6117        1  R1010J           6.0  \n",
       "6118        1  R1010J           7.0  \n",
       "\n",
       "[6119 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HFA</th>\n",
       "      <th>HFA_LFA_diff</th>\n",
       "      <th>LFA</th>\n",
       "      <th>event_type</th>\n",
       "      <th>output_position</th>\n",
       "      <th>sessions</th>\n",
       "      <th>subject</th>\n",
       "      <th>trial_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HFA, HFA_LFA_diff, LFA, event_type, output_position, sessions, subject, trial_number]\n",
       "Index: []"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_df[np.logical_and(long_df['event_type']=='correct recall',long_df['event_type']=='intrusion')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['correct recall', 'intrusion', 'deliberation', 'PLI', 'ELI'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_df['event_type'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Mixed Linear Model Regression Results\n",
      "========================================================\n",
      "Model:            MixedLM Dependent Variable: HFA       \n",
      "No. Observations: 5244    Method:             ML        \n",
      "No. Groups:       68      Scale:              0.1000    \n",
      "Min. group size:  9       Log-Likelihood:     -1414.5632\n",
      "Max. group size:  173     Converged:          Yes       \n",
      "Mean group size:  77.1                                  \n",
      "--------------------------------------------------------\n",
      "                Coef. Std.Err.   z   P>|z| [0.025 0.975]\n",
      "--------------------------------------------------------\n",
      "Intercept       0.015    0.005 2.748 0.006  0.004  0.025\n",
      "subject Var     0.001    0.001                          \n",
      "========================================================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                Mixed Linear Model Regression Results\n",
      "=====================================================================================================\n",
      "Model:                           MixedLM                Dependent Variable:                HFA       \n",
      "No. Observations:                5244                   Method:                            ML        \n",
      "No. Groups:                      68                     Scale:                             0.0967    \n",
      "Min. group size:                 9                      Log-Likelihood:                    -1322.3979\n",
      "Max. group size:                 173                    Converged:                         Yes       \n",
      "Mean group size:                 77.1                                                                \n",
      "-----------------------------------------------------------------------------------------------------\n",
      "                                                           Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------------------------------------------------\n",
      "Intercept                                                  -0.041    0.007 -6.318 0.000 -0.054 -0.029\n",
      "C(event_type, Treatment(\"deliberation\"))[T.correct recall]  0.135    0.010 13.424 0.000  0.115  0.155\n",
      "C(event_type, Treatment(\"deliberation\"))[T.intrusion]       0.081    0.011  7.163 0.000  0.059  0.103\n",
      "subject Var                                                 0.000    0.001                           \n",
      "=====================================================================================================\n",
      "\n",
      "Main effect of event type (HFA)\n",
      "LR test, p value: 184.3306, 0.000000000000000000000000000000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                              Mixed Linear Model Regression Results\n",
      "==================================================================================================\n",
      "Model:                          MixedLM               Dependent Variable:               HFA       \n",
      "No. Observations:               5244                  Method:                           ML        \n",
      "No. Groups:                     68                    Scale:                            0.0967    \n",
      "Min. group size:                9                     Log-Likelihood:                   -1322.3979\n",
      "Max. group size:                173                   Converged:                        Yes       \n",
      "Mean group size:                77.1                                                              \n",
      "--------------------------------------------------------------------------------------------------\n",
      "                                                        Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "--------------------------------------------------------------------------------------------------\n",
      "Intercept                                                0.039    0.010  4.043 0.000  0.020  0.059\n",
      "C(event_type, Treatment(\"intrusion\"))[T.correct recall]  0.054    0.012  4.377 0.000  0.030  0.078\n",
      "C(event_type, Treatment(\"intrusion\"))[T.deliberation]   -0.081    0.011 -7.163 0.000 -0.103 -0.059\n",
      "subject Var                                              0.000    0.001                           \n",
      "==================================================================================================\n",
      "\n",
      "Intercept                                                  5.279405e-05\n",
      "C(event_type, Treatment(\"intrusion\"))[T.correct recall]    1.203113e-05\n",
      "C(event_type, Treatment(\"intrusion\"))[T.deliberation]      7.921045e-13\n",
      "subject Var                                                2.049957e-01\n",
      "dtype: float64\n",
      "Main effect of event type (HFA) with intrusion as a reference\n",
      "LR test, p value: 184.3306, 0.00000000000000000000000000000000000000009399782972\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Mixed Linear Model Regression Results\n",
      "==========================================================\n",
      "Model:              MixedLM Dependent Variable: HFA       \n",
      "No. Observations:   5244    Method:             ML        \n",
      "No. Groups:         68      Scale:              0.0999    \n",
      "Min. group size:    9       Log-Likelihood:     -1411.9195\n",
      "Max. group size:    173     Converged:          Yes       \n",
      "Mean group size:    77.1                                  \n",
      "----------------------------------------------------------\n",
      "                Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "----------------------------------------------------------\n",
      "Intercept       -0.011    0.012 -0.871 0.384 -0.035  0.013\n",
      "output_position  0.006    0.003  2.301 0.021  0.001  0.011\n",
      "subject Var      0.001    0.001                           \n",
      "==========================================================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                Mixed Linear Model Regression Results\n",
      "=====================================================================================================\n",
      "Model:                           MixedLM                Dependent Variable:                HFA       \n",
      "No. Observations:                5244                   Method:                            ML        \n",
      "No. Groups:                      68                     Scale:                             0.0966    \n",
      "Min. group size:                 9                      Log-Likelihood:                    -1319.3186\n",
      "Max. group size:                 173                    Converged:                         Yes       \n",
      "Mean group size:                 77.1                                                                \n",
      "-----------------------------------------------------------------------------------------------------\n",
      "                                                           Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------------------------------------------------\n",
      "Intercept                                                  -0.068    0.013 -5.382 0.000 -0.093 -0.044\n",
      "C(event_type, Treatment(\"deliberation\"))[T.correct recall]  0.135    0.010 13.459 0.000  0.115  0.155\n",
      "C(event_type, Treatment(\"deliberation\"))[T.intrusion]       0.081    0.011  7.178 0.000  0.059  0.103\n",
      "output_position                                             0.006    0.003  2.484 0.013  0.001  0.011\n",
      "subject Var                                                 0.000    0.001                           \n",
      "=====================================================================================================\n",
      "\n",
      "                                Mixed Linear Model Regression Results\n",
      "=====================================================================================================\n",
      "Model:                           MixedLM                Dependent Variable:                HFA       \n",
      "No. Observations:                5244                   Method:                            ML        \n",
      "No. Groups:                      68                     Scale:                             0.0966    \n",
      "Min. group size:                 9                      Log-Likelihood:                    -1319.3186\n",
      "Max. group size:                 173                    Converged:                         Yes       \n",
      "Mean group size:                 77.1                                                                \n",
      "-----------------------------------------------------------------------------------------------------\n",
      "                                                           Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------------------------------------------------\n",
      "Intercept                                                  -0.068    0.013 -5.382 0.000 -0.093 -0.044\n",
      "C(event_type, Treatment(\"deliberation\"))[T.correct recall]  0.135    0.010 13.459 0.000  0.115  0.155\n",
      "C(event_type, Treatment(\"deliberation\"))[T.intrusion]       0.081    0.011  7.178 0.000  0.059  0.103\n",
      "output_position                                             0.006    0.003  2.484 0.013  0.001  0.011\n",
      "subject Var                                                 0.000    0.001                           \n",
      "=====================================================================================================\n",
      "\n",
      "Main effect of event type (HFA) after including output position\n",
      "LR test, p value: 185.2018, 0.00000000000000000000000000000000000000006080486265\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Mixed Linear Model Regression Results\n",
      "========================================================\n",
      "Model:            MixedLM Dependent Variable: LFA       \n",
      "No. Observations: 5244    Method:             ML        \n",
      "No. Groups:       68      Scale:              0.1438    \n",
      "Min. group size:  9       Log-Likelihood:     -2356.3567\n",
      "Max. group size:  173     Converged:          Yes       \n",
      "Mean group size:  77.1                                  \n",
      "--------------------------------------------------------\n",
      "              Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "--------------------------------------------------------\n",
      "Intercept     -0.001    0.005 -0.217 0.828 -0.011  0.009\n",
      "subject Var    0.000    0.001                           \n",
      "========================================================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                Mixed Linear Model Regression Results\n",
      "=====================================================================================================\n",
      "Model:                           MixedLM                Dependent Variable:                LFA       \n",
      "No. Observations:                5244                   Method:                            ML        \n",
      "No. Groups:                      68                     Scale:                             0.1432    \n",
      "Min. group size:                 9                      Log-Likelihood:                    -2345.4378\n",
      "Max. group size:                 173                    Converged:                         Yes       \n",
      "Mean group size:                 77.1                                                                \n",
      "-----------------------------------------------------------------------------------------------------\n",
      "                                                           Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------------------------------------------------\n",
      "Intercept                                                   0.021    0.007  2.852 0.004  0.007  0.036\n",
      "C(event_type, Treatment(\"deliberation\"))[T.correct recall] -0.056    0.012 -4.658 0.000 -0.080 -0.033\n",
      "C(event_type, Treatment(\"deliberation\"))[T.intrusion]      -0.027    0.014 -1.949 0.051 -0.053  0.000\n",
      "subject Var                                                 0.000    0.001                           \n",
      "=====================================================================================================\n",
      "\n",
      "Main effect of event type (LFA)\n",
      "LR test, p value: 21.8379, 0.000018111797644148732518327993\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                              Mixed Linear Model Regression Results\n",
      "==================================================================================================\n",
      "Model:                          MixedLM               Dependent Variable:               LFA       \n",
      "No. Observations:               5244                  Method:                           ML        \n",
      "No. Groups:                     68                    Scale:                            0.1432    \n",
      "Min. group size:                9                     Log-Likelihood:                   -2345.4378\n",
      "Max. group size:                173                   Converged:                        Yes       \n",
      "Mean group size:                77.1                                                              \n",
      "--------------------------------------------------------------------------------------------------\n",
      "                                                        Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "--------------------------------------------------------------------------------------------------\n",
      "Intercept                                               -0.005    0.011 -0.472 0.637 -0.028  0.017\n",
      "C(event_type, Treatment(\"intrusion\"))[T.correct recall] -0.030    0.015 -2.000 0.045 -0.059 -0.001\n",
      "C(event_type, Treatment(\"intrusion\"))[T.deliberation]    0.027    0.014  1.949 0.051 -0.000  0.053\n",
      "subject Var                                              0.000    0.001                           \n",
      "==================================================================================================\n",
      "\n",
      "Intercept                                                  0.636591\n",
      "C(event_type, Treatment(\"intrusion\"))[T.correct recall]    0.045474\n",
      "C(event_type, Treatment(\"intrusion\"))[T.deliberation]      0.051289\n",
      "subject Var                                                1.000000\n",
      "dtype: float64\n",
      "Main effect of event type (LFA) whith intrusion as a reference group\n",
      "LR test, p value: 21.8379, 0.000018111797644148732518327993\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Mixed Linear Model Regression Results\n",
      "==========================================================\n",
      "Model:              MixedLM Dependent Variable: LFA       \n",
      "No. Observations:   5244    Method:             ML        \n",
      "No. Groups:         68      Scale:              0.1435    \n",
      "Min. group size:    9       Log-Likelihood:     -2351.2574\n",
      "Max. group size:    173     Converged:          Yes       \n",
      "Mean group size:    77.1                                  \n",
      "----------------------------------------------------------\n",
      "                Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "----------------------------------------------------------\n",
      "Intercept       -0.043    0.014 -3.049 0.002 -0.071 -0.015\n",
      "output_position  0.010    0.003  3.195 0.001  0.004  0.016\n",
      "subject Var      0.000    0.001                           \n",
      "==========================================================\n",
      "\n",
      "                                Mixed Linear Model Regression Results\n",
      "=====================================================================================================\n",
      "Model:                           MixedLM                Dependent Variable:                LFA       \n",
      "No. Observations:                5244                   Method:                            ML        \n",
      "No. Groups:                      68                     Scale:                             0.1430    \n",
      "Min. group size:                 9                      Log-Likelihood:                    -2340.4499\n",
      "Max. group size:                 173                    Converged:                         Yes       \n",
      "Mean group size:                 77.1                                                                \n",
      "-----------------------------------------------------------------------------------------------------\n",
      "                                                           Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------------------------------------------------\n",
      "Intercept                                                  -0.021    0.015 -1.354 0.176 -0.050  0.009\n",
      "C(event_type, Treatment(\"deliberation\"))[T.correct recall] -0.056    0.012 -4.635 0.000 -0.080 -0.032\n",
      "C(event_type, Treatment(\"deliberation\"))[T.intrusion]      -0.026    0.014 -1.934 0.053 -0.053  0.000\n",
      "output_position                                             0.010    0.003  3.160 0.002  0.004  0.016\n",
      "subject Var                                                 0.000    0.001                           \n",
      "=====================================================================================================\n",
      "\n",
      "Main effect of event type (LFA) after including output position\n",
      "LR test, p value: 21.6151, 0.0000202460975889768425930743261931255006\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# long-format df - event type\n",
    "long_df_three_evs=long_df[long_df['event_type']!='ELI']\n",
    "long_df_three_evs=long_df_three_evs[long_df_three_evs['event_type']!='PLI']\n",
    "\n",
    "# event type main effect on HFA\n",
    "model = sm.MixedLM.from_formula('HFA ~ 1', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('HFA ~ C(event_type, Treatment(\"deliberation\"))', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_event =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of event type (HFA)')\n",
    "lr, p = lrtest(llf_empty, llf_event, df = 2) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.30f}'.format(lr, p))\n",
    "\n",
    "model = sm.MixedLM.from_formula('HFA ~ C(event_type, Treatment(\"intrusion\"))', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_event =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "print(result.pvalues)\n",
    "\n",
    "# Likelihood ratio tests for main effects with intrusion as a reference group\n",
    "print('Main effect of event type (HFA) with intrusion as a reference')\n",
    "lr, p = lrtest(llf_empty, llf_event, df = 2) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.50f}'.format(lr, p))\n",
    "\n",
    "\n",
    "# output position main effect on HFA\n",
    "model = sm.MixedLM.from_formula('HFA ~ output_position', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_output =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# event type main effect while output position is in the model (on HFA)\n",
    "model = sm.MixedLM.from_formula('HFA ~ C(event_type, Treatment(\"deliberation\")) + output_position', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_full =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "smry=result.summary()\n",
    "print(smry)\n",
    "\n",
    "# Likelihood ratio tests for main effect beyond output position\n",
    "print('Main effect of event type (HFA) after including output position')\n",
    "lr, p = lrtest(llf_output, llf_full, df = 2) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.50f}'.format(lr, p))\n",
    "\n",
    "#### LFA #####\n",
    "\n",
    "# event type main effect on LFA\n",
    "model = sm.MixedLM.from_formula('LFA ~ 1', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('LFA ~ C(event_type,Treatment(\"deliberation\"))', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_event =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects \n",
    "print('Main effect of event type (LFA)')\n",
    "lr, p = lrtest(llf_empty, llf_event, df = 2) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.30f}'.format(lr, p))\n",
    "\n",
    "model = sm.MixedLM.from_formula('LFA ~ C(event_type,Treatment(\"intrusion\"))', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_event =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "print(result.pvalues)\n",
    "\n",
    "# Likelihood ratio tests for main effects \n",
    "print('Main effect of event type (LFA) whith intrusion as a reference group')\n",
    "lr, p = lrtest(llf_empty, llf_event, df = 2) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.30f}'.format(lr, p))\n",
    "\n",
    "\n",
    "# output position main effect on LFA\n",
    "model = sm.MixedLM.from_formula('LFA ~ output_position', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_output =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# event type main effect while output position is in the model (on LFA)\n",
    "model = sm.MixedLM.from_formula('LFA ~ C(event_type, Treatment(\"deliberation\")) + output_position', groups='subject', data=long_df_three_evs) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_full =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effect beyond output position\n",
    "print('Main effect of event type (LFA) after including output position')\n",
    "lr, p = lrtest(llf_output, llf_full, df = 2) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.40f}'.format(lr, p))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of missing rows for output position:  0\n"
     ]
    }
   ],
   "source": [
    "print('number of missing rows for output position: ',len(long_df[np.isnan(long_df['output_position'])]))\n",
    "# How many semantic similarity values are missing?\n",
    "if exp=='catFR1':\n",
    "    percent_missing_semantic=len(long_df[np.isnan(long_df['semantic_similarity'])])/len(long_df)\n",
    "    print(len(long_df[np.isnan(long_df['semantic_similarity'])]),' out of ',len(long_df),' rows are missing for semantic similarity (',percent_missing_semantic*100,'%)')\n",
    "    percent_missing_relatedness=len(long_df[np.isnan(long_df['semantic_relatedness'])])/len(long_df)\n",
    "    print(len(long_df[np.isnan(long_df['semantic_relatedness'])]),' out of ',len(long_df),' rows are missing for semantic relatedness (',percent_missing_relatedness*100,'%)')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # counts of intrusion type:\n",
    "# for sub in long_df['subject'].unique():\n",
    "#     sub_data=long_df[long_df['subject']==sub]\n",
    "#     intrusions_data=sub_data[sub_data['event_type']=='intrusion']\n",
    "#     total_intrusion_n=len(intrusions_data)\n",
    "#     total_sem_related=len(intrusions_data[intrusions_data['semantic_relatedness']==1])\n",
    "#     total_sem_nonrelated=len(intrusions_data[intrusions_data['semantic_relatedness']==0])\n",
    "    \n",
    "#     eli_data=sub_data[sub_data['event_type']=='ELI']\n",
    "#     total_elis_n=len(eli_data)\n",
    "#     elis_sem_related=len(eli_data[eli_data['semantic_relatedness']==1])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check whether event type predicts spectral tilt, and investigate whether the effect remain significant \n",
    "after including output position in the model:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The following model is relevant only for catFR.\n",
    "It investigate whether spectral tilt is predicted by semantic similarity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check whether event type predicts spectral tilt, and investigate whether the effect remain significant after including semantic similarity (wrod2vec) in the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional: Drop rows without semantic similarity values\n",
    "if exp == 'catFR1':\n",
    "    long_df_sem=long_df_three_evs.dropna(axis=0,subset=['semantic_similarity'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Mixed Linear Model Regression Results\n",
      "======================================================\n",
      "Model:             MixedLM Dependent Variable: HFA    \n",
      "No. Observations:  26      Method:             ML     \n",
      "No. Groups:        2       Scale:              0.0882 \n",
      "Min. group size:   10      Log-Likelihood:     -5.3315\n",
      "Max. group size:   16      Converged:          Yes    \n",
      "Mean group size:   13.0                               \n",
      "------------------------------------------------------\n",
      "            Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "------------------------------------------------------\n",
      "Intercept   -0.084    0.058 -1.450 0.147 -0.196  0.029\n",
      "subject Var  0.000                                    \n",
      "======================================================\n",
      "\n",
      "            Mixed Linear Model Regression Results\n",
      "==============================================================\n",
      "Model:               MixedLM    Dependent Variable:    HFA    \n",
      "No. Observations:    26         Method:                ML     \n",
      "No. Groups:          2          Scale:                 0.0879 \n",
      "Min. group size:     10         Log-Likelihood:        -5.2809\n",
      "Max. group size:     16         Converged:             Yes    \n",
      "Mean group size:     13.0                                     \n",
      "--------------------------------------------------------------\n",
      "                    Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "--------------------------------------------------------------\n",
      "Intercept           -0.144    0.195 -0.735 0.462 -0.526  0.239\n",
      "semantic_similarity  0.391    1.220  0.320 0.749 -2.001  2.783\n",
      "subject Var          0.000                                    \n",
      "==============================================================\n",
      "\n",
      "Main effect of semantic similarity (HFA)\n",
      "LR test, p value: 0.1012, 0.75036096072005675772\n",
      "        Mixed Linear Model Regression Results\n",
      "=====================================================\n",
      "Model:            MixedLM Dependent Variable: LFA    \n",
      "No. Observations: 26      Method:             ML     \n",
      "No. Groups:       2       Scale:              0.0759 \n",
      "Min. group size:  10      Log-Likelihood:     -3.3664\n",
      "Max. group size:  16      Converged:          Yes    \n",
      "Mean group size:  13.0                               \n",
      "-----------------------------------------------------\n",
      "             Coef. Std.Err.   z   P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------\n",
      "Intercept    0.006    0.050 0.123 0.902 -0.092  0.104\n",
      "subject Var  0.000                                   \n",
      "=====================================================\n",
      "\n",
      "            Mixed Linear Model Regression Results\n",
      "==============================================================\n",
      "Model:               MixedLM    Dependent Variable:    LFA    \n",
      "No. Observations:    26         Method:                ML     \n",
      "No. Groups:          2          Scale:                 0.0751 \n",
      "Min. group size:     10         Log-Likelihood:        -3.2418\n",
      "Max. group size:     16         Converged:             Yes    \n",
      "Mean group size:     13.0                                     \n",
      "--------------------------------------------------------------\n",
      "                    Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "--------------------------------------------------------------\n",
      "Intercept            0.093    0.139  0.672 0.502 -0.179  0.366\n",
      "semantic_similarity -0.568    0.984 -0.577 0.564 -2.496  1.360\n",
      "subject Var          0.000                                    \n",
      "==============================================================\n",
      "\n",
      "Main effect of semantic similarity LFA\n",
      "LR test, p value: 0.2493, 0.61757337111575683064\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/base/model.py:1354: RuntimeWarning: invalid value encountered in sqrt\n",
      "  bse_ = np.sqrt(np.diag(self.cov_params()))\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# Take only intrusion events for this analysis\n",
    "intrusion_long_df=long_df_sem[long_df_sem['event_type']=='intrusion']\n",
    "\n",
    "model = sm.MixedLM.from_formula('HFA ~ 1', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# # Add semantic similarity\n",
    "model = sm.MixedLM.from_formula('HFA ~ semantic_similarity', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_sem_sim =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of semantic similarity (HFA)')\n",
    "lr, p = lrtest(llf_empty, llf_sem_sim, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.20f}'.format(lr, p))\n",
    "\n",
    "\n",
    "# # # semantic similarity effect for LFA only\n",
    "model = sm.MixedLM.from_formula('LFA ~ 1', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('LFA ~ semantic_similarity', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_sem_sim_LFA =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of semantic similarity LFA')\n",
    "lr, p = lrtest(llf_empty, llf_sem_sim_LFA, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.20f}'.format(lr, p))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of subjects: 2\n",
      "number of non-related events: 14\n",
      "number of related events: 12\n",
      "        Mixed Linear Model Regression Results\n",
      "======================================================\n",
      "Model:             MixedLM Dependent Variable: HFA    \n",
      "No. Observations:  26      Method:             ML     \n",
      "No. Groups:        2       Scale:              0.0882 \n",
      "Min. group size:   10      Log-Likelihood:     -5.3315\n",
      "Max. group size:   16      Converged:          Yes    \n",
      "Mean group size:   13.0                               \n",
      "------------------------------------------------------\n",
      "            Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "------------------------------------------------------\n",
      "Intercept   -0.084    0.058 -1.450 0.147 -0.196  0.029\n",
      "subject Var  0.000                                    \n",
      "======================================================\n",
      "\n",
      "                  Mixed Linear Model Regression Results\n",
      "=========================================================================\n",
      "Model:                    MixedLM       Dependent Variable:       HFA    \n",
      "No. Observations:         26            Method:                   ML     \n",
      "No. Groups:               2             Scale:                    0.0882 \n",
      "Min. group size:          10            Log-Likelihood:           -5.3305\n",
      "Max. group size:          16            Converged:                Yes    \n",
      "Mean group size:          13.0                                           \n",
      "-------------------------------------------------------------------------\n",
      "                               Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-------------------------------------------------------------------------\n",
      "Intercept                      -0.081    0.078 -1.043 0.297 -0.233  0.071\n",
      "C(semantic_relatedness)[T.1.0] -0.005    0.116 -0.046 0.963 -0.232  0.221\n",
      "subject Var                     0.000                                    \n",
      "=========================================================================\n",
      "\n",
      "Main effect of semantic relatedness on HFA\n",
      "LR test, p value: 0.0021, 0.96336106\n",
      "        Mixed Linear Model Regression Results\n",
      "=====================================================\n",
      "Model:            MixedLM Dependent Variable: LFA    \n",
      "No. Observations: 26      Method:             ML     \n",
      "No. Groups:       2       Scale:              0.0759 \n",
      "Min. group size:  10      Log-Likelihood:     -3.3664\n",
      "Max. group size:  16      Converged:          Yes    \n",
      "Mean group size:  13.0                               \n",
      "-----------------------------------------------------\n",
      "             Coef. Std.Err.   z   P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------\n",
      "Intercept    0.006    0.050 0.123 0.902 -0.092  0.104\n",
      "subject Var  0.000                                   \n",
      "=====================================================\n",
      "\n",
      "                  Mixed Linear Model Regression Results\n",
      "=========================================================================\n",
      "Model:                    MixedLM       Dependent Variable:       LFA    \n",
      "No. Observations:         26            Method:                   ML     \n",
      "No. Groups:               2             Scale:                    0.0757 \n",
      "Min. group size:          10            Log-Likelihood:           -3.3474\n",
      "Max. group size:          16            Converged:                Yes    \n",
      "Mean group size:          13.0                                           \n",
      "-------------------------------------------------------------------------\n",
      "                               Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-------------------------------------------------------------------------\n",
      "Intercept                      -0.004    0.066 -0.054 0.957 -0.134  0.127\n",
      "C(semantic_relatedness)[T.1.0]  0.021    0.104  0.204 0.839 -0.182  0.224\n",
      "subject Var                     0.000                                    \n",
      "=========================================================================\n",
      "\n",
      "Main effect of semantic relatedness on LFA\n",
      "LR test, p value: 0.0380, 0.84553210\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/base/model.py:1354: RuntimeWarning: invalid value encountered in sqrt\n",
      "  bse_ = np.sqrt(np.diag(self.cov_params()))\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n",
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2170: ConvergenceWarning: The Hessian matrix at the estimated parameter values is not positive definite.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "#Spectral tilt as a function of semantic relatedness (binary variable):\n",
    "intrusions_long_df=long_df[long_df['event_type']=='intrusion']\n",
    "print('number of subjects:', len(intrusions_long_df['subject'].unique()))\n",
    "print('number of non-related events:',len(intrusions_long_df[intrusions_long_df['semantic_relatedness']==0]))\n",
    "print('number of related events:',len(intrusions_long_df[intrusions_long_df['semantic_relatedness']==1]))\n",
    "\n",
    "model = sm.MixedLM.from_formula('HFA ~ 1', groups='subject', data=intrusions_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# # Add semantic relatedness\n",
    "model = sm.MixedLM.from_formula('HFA ~ C(semantic_relatedness)', groups='subject', data=intrusions_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_sem_sim =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of semantic relatedness on HFA')\n",
    "lr, p = lrtest(llf_empty, llf_sem_sim, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))\n",
    "\n",
    "# # LFA only \n",
    "model = sm.MixedLM.from_formula('LFA ~ 1', groups='subject', data=intrusions_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('LFA ~ C(semantic_relatedness)', groups='subject', data=intrusions_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_sem_LFA =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of semantic relatedness on LFA')\n",
    "lr, p = lrtest(llf_empty, llf_sem_LFA, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HFA</th>\n",
       "      <th>HFA_LFA_diff</th>\n",
       "      <th>LFA</th>\n",
       "      <th>event_type</th>\n",
       "      <th>output_position</th>\n",
       "      <th>sessions</th>\n",
       "      <th>subject</th>\n",
       "      <th>trial_number</th>\n",
       "      <th>experiment</th>\n",
       "      <th>semantic_similarity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.029388</td>\n",
       "      <td>0.247505</td>\n",
       "      <td>-0.276893</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>0.0</td>\n",
       "      <td>FR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.046086</td>\n",
       "      <td>-0.029595</td>\n",
       "      <td>-0.016491</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>1.0</td>\n",
       "      <td>FR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.239894</td>\n",
       "      <td>-0.093053</td>\n",
       "      <td>0.332947</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>2.0</td>\n",
       "      <td>FR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.302953</td>\n",
       "      <td>0.388800</td>\n",
       "      <td>-0.085847</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>3.0</td>\n",
       "      <td>FR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.182156</td>\n",
       "      <td>-0.145512</td>\n",
       "      <td>0.327668</td>\n",
       "      <td>correct recall</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>4.0</td>\n",
       "      <td>FR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8269</th>\n",
       "      <td>0.198940</td>\n",
       "      <td>0.666686</td>\n",
       "      <td>-0.467746</td>\n",
       "      <td>ELI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1518T</td>\n",
       "      <td>0.0</td>\n",
       "      <td>catFR</td>\n",
       "      <td>0.208612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8270</th>\n",
       "      <td>-0.014664</td>\n",
       "      <td>0.089583</td>\n",
       "      <td>-0.104247</td>\n",
       "      <td>ELI</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>R1518T</td>\n",
       "      <td>1.0</td>\n",
       "      <td>catFR</td>\n",
       "      <td>0.174512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8271</th>\n",
       "      <td>0.120627</td>\n",
       "      <td>0.134884</td>\n",
       "      <td>-0.014258</td>\n",
       "      <td>ELI</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R1518T</td>\n",
       "      <td>0.0</td>\n",
       "      <td>catFR</td>\n",
       "      <td>0.146636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8272</th>\n",
       "      <td>0.452799</td>\n",
       "      <td>0.598445</td>\n",
       "      <td>-0.145646</td>\n",
       "      <td>ELI</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R1518T</td>\n",
       "      <td>1.0</td>\n",
       "      <td>catFR</td>\n",
       "      <td>0.224276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8273</th>\n",
       "      <td>0.235357</td>\n",
       "      <td>0.012782</td>\n",
       "      <td>0.222575</td>\n",
       "      <td>ELI</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>R1518T</td>\n",
       "      <td>0.0</td>\n",
       "      <td>catFR</td>\n",
       "      <td>0.172596</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21084 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           HFA  HFA_LFA_diff       LFA      event_type  output_position  \\\n",
       "0    -0.029388      0.247505 -0.276893  correct recall              3.0   \n",
       "1    -0.046086     -0.029595 -0.016491  correct recall              5.0   \n",
       "2     0.239894     -0.093053  0.332947  correct recall              1.0   \n",
       "3     0.302953      0.388800 -0.085847  correct recall              6.0   \n",
       "4     0.182156     -0.145512  0.327668  correct recall              2.0   \n",
       "...        ...           ...       ...             ...              ...   \n",
       "8269  0.198940      0.666686 -0.467746             ELI              6.0   \n",
       "8270 -0.014664      0.089583 -0.104247             ELI              7.0   \n",
       "8271  0.120627      0.134884 -0.014258             ELI              9.0   \n",
       "8272  0.452799      0.598445 -0.145646             ELI              7.0   \n",
       "8273  0.235357      0.012782  0.222575             ELI              4.0   \n",
       "\n",
       "      sessions subject  trial_number experiment  semantic_similarity  \n",
       "0          0.0  R1001P           0.0         FR                  NaN  \n",
       "1          0.0  R1001P           1.0         FR                  NaN  \n",
       "2          0.0  R1001P           2.0         FR                  NaN  \n",
       "3          0.0  R1001P           3.0         FR                  NaN  \n",
       "4          0.0  R1001P           4.0         FR                  NaN  \n",
       "...        ...     ...           ...        ...                  ...  \n",
       "8269       0.0  R1518T           0.0      catFR             0.208612  \n",
       "8270       0.0  R1518T           1.0      catFR             0.174512  \n",
       "8271       1.0  R1518T           0.0      catFR             0.146636  \n",
       "8272       1.0  R1518T           1.0      catFR             0.224276  \n",
       "8273       2.0  R1518T           0.0      catFR             0.172596  \n",
       "\n",
       "[21084 rows x 10 columns]"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load data of both experiments\n",
    "# hippocampus: 'hippocampus_john'\n",
    "# PHG: 'phg_john'\n",
    "with open('/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/hippocampus_john/long_df','rb') as pickle_file:\n",
    "    long_df_catFR=pickle.load(pickle_file)\n",
    "with open('/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/hippocampus_john/long_df','rb') as pickle_file:\n",
    "    long_df_FR=pickle.load(pickle_file)\n",
    "long_df_FR['experiment']='FR'\n",
    "long_df_catFR['experiment']='catFR'\n",
    "long_df=pd.concat([long_df_FR,long_df_catFR])\n",
    "long_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Mixed Linear Model Regression Results\n",
      "=======================================================\n",
      "Model:            MixedLM Dependent Variable: HFA      \n",
      "No. Observations: 1710    Method:             ML       \n",
      "No. Groups:       57      Scale:              0.0672   \n",
      "Min. group size:  10      Log-Likelihood:     -131.3815\n",
      "Max. group size:  108     Converged:          Yes      \n",
      "Mean group size:  30.0                                 \n",
      "-------------------------------------------------------\n",
      "               Coef. Std.Err.   z   P>|z| [0.025 0.975]\n",
      "-------------------------------------------------------\n",
      "Intercept      0.026    0.009 3.053 0.002  0.009  0.043\n",
      "subject Var    0.002    0.003                          \n",
      "=======================================================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Mixed Linear Model Regression Results\n",
      "===============================================================\n",
      "Model:                MixedLM   Dependent Variable:   HFA      \n",
      "No. Observations:     1710      Method:               ML       \n",
      "No. Groups:           57        Scale:                0.0672   \n",
      "Min. group size:      10        Log-Likelihood:       -131.1962\n",
      "Max. group size:      108       Converged:            Yes      \n",
      "Mean group size:      30.0                                     \n",
      "---------------------------------------------------------------\n",
      "                     Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "---------------------------------------------------------------\n",
      "Intercept             0.030    0.011  2.751 0.006  0.009  0.052\n",
      "C(event_type)[T.PLI] -0.008    0.013 -0.609 0.543 -0.033  0.017\n",
      "subject Var           0.002    0.003                           \n",
      "===============================================================\n",
      "\n",
      "Main effect of event_type (HFA)\n",
      "LR test, p value: 0.3705, 0.54271331526015087476\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Mixed Linear Model Regression Results\n",
      "=======================================================\n",
      "Model:            MixedLM Dependent Variable: LFA      \n",
      "No. Observations: 1710    Method:             ML       \n",
      "No. Groups:       57      Scale:              0.1280   \n",
      "Min. group size:  10      Log-Likelihood:     -680.1201\n",
      "Max. group size:  108     Converged:          Yes      \n",
      "Mean group size:  30.0                                 \n",
      "-------------------------------------------------------\n",
      "             Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-------------------------------------------------------\n",
      "Intercept    -0.009    0.011 -0.766 0.444 -0.031  0.013\n",
      "subject Var   0.002    0.004                           \n",
      "=======================================================\n",
      "\n",
      "             Mixed Linear Model Regression Results\n",
      "===============================================================\n",
      "Model:                MixedLM   Dependent Variable:   LFA      \n",
      "No. Observations:     1710      Method:               ML       \n",
      "No. Groups:           57        Scale:                0.1279   \n",
      "Min. group size:      10        Log-Likelihood:       -679.7000\n",
      "Max. group size:      108       Converged:            Yes      \n",
      "Mean group size:      30.0                                     \n",
      "---------------------------------------------------------------\n",
      "                     Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "---------------------------------------------------------------\n",
      "Intercept             0.000    0.015  0.013 0.990 -0.029  0.029\n",
      "C(event_type)[T.PLI] -0.016    0.018 -0.917 0.359 -0.051  0.018\n",
      "subject Var           0.002    0.004                           \n",
      "===============================================================\n",
      "\n",
      "Main effect of event_type - LFA\n",
      "LR test, p value: 0.8401, 0.35936179351401076332\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# PLIs and ELIs\n",
    "intrusion_rows=np.logical_or(long_df['event_type']=='ELI',long_df['event_type']=='PLI')\n",
    "intrusion_long_df=long_df[intrusion_rows]\n",
    "\n",
    "model = sm.MixedLM.from_formula('HFA ~ 1', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# # Add semantic similarity\n",
    "model = sm.MixedLM.from_formula('HFA ~ C(event_type)', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_sem_sim =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of event_type (HFA)')\n",
    "lr, p = lrtest(llf_empty, llf_sem_sim, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.20f}'.format(lr, p))\n",
    "\n",
    "\n",
    "# # # semantic similarity effect for LFA only\n",
    "model = sm.MixedLM.from_formula('LFA ~ 1', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('LFA ~ C(event_type)', groups='subject', data=intrusion_long_df) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_sem_sim_LFA =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of event_type - LFA')\n",
    "lr, p = lrtest(llf_empty, llf_sem_sim_LFA, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.20f}'.format(lr, p))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Inspect the data for simple correlation between spectral tilt and semantic similarity\n",
    "(relevant only for catFR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/ipykernel_launcher.py:2: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Spectral tilt: 0.050367329910326594 p value: 0.02472061785269855\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 540x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# events=(long_df_sem['event_type']=='intrusion') | (long_df['event_type']=='correct recall')\n",
    "# use_data=long_df_sem[events]\n",
    "# ax=sns.lmplot(x='LFA',y='semantic_similarity', hue='event_type',row='event_type',data=use_data,palette=['#5d1451','#a484ac'],sharex=True,legend_out=False,aspect=1.5) # remove deliberations\n",
    "\n",
    "# ax.set_xlabels('LFA',fontsize=18)\n",
    "# ax.set_ylabels('Semantic similarity',fontsize=18)\n",
    "# ax.set_xticklabels(fontsize=12)\n",
    "# ax.set_yticklabels(fontsize=12)\n",
    "\n",
    "# r,p=stats.pearsonr(use_data[use_data['event_type']=='correct recall']['HFA_LFA_diff'],use_data[use_data['event_type']=='correct recall']['semantic_similarity'])\n",
    "# plt.text(1.0,0.85,'r=%.3f, p=%.3f' %(r, p),fontsize=14)\n",
    "# r,p=stats.pearsonr(use_data[use_data['event_type']=='intrusion']['HFA_LFA_diff'],use_data[use_data['event_type']=='intrusion']['semantic_similarity'])\n",
    "# plt.text(1.0,0.35,'r=%.3f, p=%.3f' %(r, p),fontsize=14)\n",
    "\n",
    "# # pearson across event type:\n",
    "# r,p=stats.pearsonr(use_data['HFA_LFA_diff'],use_data['semantic_similarity'])\n",
    "# # plt.text(2.4,0.035,'r=%.3f, p=%.3f' %(r, p),fontsize=16)\n",
    "# plt.tight_layout()# title('r=%.3f, p=%.3f' %(r, p),fontsize=16)\n",
    "\n",
    "# plt.subplots_adjust(hspace=0.2,wspace=0.1)\n",
    "# print('Spectral tilt:',r,'p value:',p)\n",
    "# savefig('corr_semantic_sim_spectral_tilt_event',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n",
    "# # Plot all events together:\n",
    "\n",
    "# sns.set_palette(\"magma\",2) #(\"Paired\")\n",
    "# ax=sns.lmplot(x='HFA_LFA_diff',y='semantic_similarity',data=use_data,palette='pastel')#,color=['#5d1451']) # remove deliberations\n",
    "# pal = sns.color_palette()\n",
    "\n",
    "# plt.text(2.4,0.035,'r=%.3f, p=%.3f' %(r, p),fontsize=16)\n",
    "# ax.set_xlabels('Spectral tilt',fontsize=18)\n",
    "# ax.set_ylabels('Semantic similarity',fontsize=18)\n",
    "# ax.set_xticklabels(fontsize=12)\n",
    "# ax.set_yticklabels(fontsize=12)\n",
    "# sns.set(style=\"white\")\n",
    "\n",
    "# # savefig('corr_semantic_sim_spectral_tilt',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# pearson_r=[]\n",
    "# pearson_p=[]\n",
    "# for sub in use_data['subject'].unique():\n",
    "#     subj_mean=use_data[use_data['subject']==sub] \n",
    "#     subj_mean_intrusion=subj_mean[subj_mean['event_type']=='intrusion']\n",
    "#     if len(subj_mean_intrusion)>=7:\n",
    "#         r,p=stats.pearsonr(subj_mean_intrusion['HFA_LFA_diff'],subj_mean_intrusion['semantic_similarity'])\n",
    "#         pearson_r.append(r)\n",
    "#         pearson_p.append(p)\n",
    "# plt.hist(pearson_r,bins=20, color=pal[0])\n",
    "# mean_r=np.mean(pearson_r)\n",
    "# plt.axvline(x=mean_r,color='r',linestyle='--',linewidth=3)\n",
    "# plt.xlim(xmin=-0.35, xmax=0.35)\n",
    "# plt.xlabel('Within subject correlation',fontsize=18)\n",
    "# plt.ylabel('Frequency',fontsize=18)\n",
    "# plt.axvline(x=0,color='gray',linestyle='--',linewidth=1)\n",
    "# # plt.hist(pearson_p,bins=20, color=None)\n",
    "# plt.text(0.14,8.1,'$M_{r}$ = %.3f' %mean_r)\n",
    "\n",
    "\n",
    "# # one sample t-test on correlation values\n",
    "# from scipy.stats import ttest_1samp\n",
    "# tscore, pvalue = ttest_1samp(pearson_r, popmean=0)\n",
    "# df=len(pearson_r)-1\n",
    "# # print(\"t Statistic: \", tscore)  \n",
    "# # print(\"P Value: \", pvalue)\n",
    "# plt.title('t(%1.f)=%.3f, p= %.3f' %(df,tscore,pvalue),fontsize=16) \n",
    "\n",
    "\n",
    "# savefig('hist_semantic_sim_spectral_tilt',transparent=True,bbox_inches='tight', pad_inches=0.08)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From here I compute means per event type and plot the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compute means\n",
    "# column_string: 'HFA_LFA_diff'/'LFA'/'HFA'\n",
    "# condition: 'all'/'related'/'nonrelated'\n",
    "# exmaple: average_tilt(long_df,'all','HFA_LFA_diff'):\n",
    "def average_tilt(long_df,condition,column_string):\n",
    "    '''\n",
    "    Compute average for each event type (correct recall/intrusion/deliberation) as well as the difference between correct recalls and intrusions.\n",
    "    column_string can be: 'HFA_LFA_diff'/'LFA'/'HFA'\n",
    "    condition can be: 'all'/'related'/'nonrelated'\n",
    "    exmaple: average_tilt(long_df,'all','HFA_LFA_diff')\n",
    "    '''\n",
    "    \n",
    "    import pandas as pd\n",
    "    if condition == 'all':\n",
    "        print('Mean over all intrusions is calculated')\n",
    "        pass\n",
    "    elif condition == 'related': \n",
    "        long_df = long_df[long_df['semantic_relatedness']==1]\n",
    "    elif condition == 'nonrelated':        \n",
    "        intrusions_index=long_df[long_df['event_type'].isin(['intrusion','PLI','ELI'])].index\n",
    "        intrusions_only=long_df.loc[intrusions_index]\n",
    "        intrusions_related=intrusions_only[intrusions_only['semantic_relatedness']==1].index\n",
    "        long_df = long_df.drop(labels=list(intrusions_related))\n",
    "    else:\n",
    "        print('Wrong condition parameter. Options are: \"all\"/\"related\" or \"nonrelated\" ')\n",
    "        \n",
    "    diff=pd.DataFrame([])\n",
    "    correct_recall_mean_tilt=[]\n",
    "    intrusion_mean_tilt=[]\n",
    "    deliberation_mean_tilt=[]\n",
    "    ELI_mean_tilt=[]\n",
    "    PLI_mean_tilt=[]\n",
    "    for sub in long_df['subject'].unique():\n",
    "        print(sub)\n",
    "        subj_mean=long_df[long_df['subject']==sub]\n",
    "        try:\n",
    "            assert 'correct recall' in subj_mean['event_type'].unique(),f'correct recall missing for subject {sub}'\n",
    "            assert 'intrusion' in subj_mean['event_type'].unique(),f'intrusions missing for subject {sub}'\n",
    "            assert 'deliberation' in subj_mean['event_type'].unique(),f'deliberations missing for subject {sub}'\n",
    "            if 'PLI' in subj_mean['event_type'].unique():\n",
    "                sub_num=subj_mean['subject'].unique()\n",
    "                assert 'ELI' in subj_mean['event_type'].unique(), f'problem with subject {sub_num}'\n",
    "            \n",
    "            for event in subj_mean['event_type'].unique():\n",
    "                mean_tilt=np.mean(subj_mean[subj_mean['event_type']==event][column_string])\n",
    "                if event=='correct recall':\n",
    "                    correct_recall_mean_tilt.append(mean_tilt)\n",
    "                elif event=='intrusion':\n",
    "                    intrusion_mean_tilt.append(mean_tilt)\n",
    "                elif event=='deliberation':\n",
    "                    deliberation_mean_tilt.append(mean_tilt)\n",
    "                elif event=='PLI':\n",
    "                    PLI_mean_tilt.append(mean_tilt)\n",
    "                elif event=='ELI':\n",
    "                    ELI_mean_tilt.append(mean_tilt) \n",
    "\n",
    "            for sess in subj_mean['sessions'].unique():\n",
    "                sess_data=subj_mean[subj_mean['sessions']==sess]\n",
    "                correct_rec=np.mean(sess_data[sess_data['event_type']=='correct recall'][column_string])\n",
    "                intrusion=np.mean(sess_data[sess_data['event_type']=='intrusion'][column_string])\n",
    "    #             tilt_diff.append(correct_r_tilt - intrusion_tilt)\n",
    "                diff=diff.append({'subject': sub, 'session':sess,'correct_intrusion_diff': correct_rec - intrusion},ignore_index=True)\n",
    "        except: \n",
    "            pass\n",
    "    return diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean over all intrusions is calculated\n",
      "R1001P\n",
      "R1215M\n",
      "R1230J\n",
      "R1168T\n",
      "R1137E\n",
      "R1125T\n",
      "R1066P\n",
      "R1336T\n",
      "R1339D\n",
      "R1200T\n",
      "R1006P\n",
      "R1034D\n",
      "R1169P\n",
      "R1151E\n",
      "R1067P\n",
      "R1123C\n",
      "R1275D\n",
      "R1158T\n",
      "R1293P\n",
      "R1108J\n",
      "R1374T\n",
      "R1145J\n",
      "R1350D\n",
      "R1240T\n",
      "R1337E\n",
      "R1153T\n",
      "R1283T\n",
      "R1325C\n",
      "R1122E\n",
      "R1112M\n",
      "R1338T\n",
      "R1341T\n",
      "R1002P\n",
      "R1094T\n",
      "R1299T\n",
      "R1102P\n",
      "R1068J\n",
      "R1077T\n",
      "R1187P\n",
      "R1174T\n",
      "R1311T\n",
      "R1148P\n",
      "R1150J\n",
      "R1291M\n",
      "R1161E\n",
      "R1083J\n",
      "R1217T\n",
      "R1022J\n",
      "R1316T\n",
      "R1003P\n",
      "R1292E\n",
      "R1080E\n",
      "R1033D\n",
      "R1191J\n",
      "R1243T\n",
      "R1172E\n",
      "R1096E\n",
      "R1247P\n",
      "R1330D\n",
      "R1063C\n",
      "R1052E\n",
      "R1061T\n",
      "R1048E\n",
      "R1053M\n",
      "R1089P\n",
      "R1020J\n",
      "R1049J\n",
      "R1010J\n",
      "Mean over all intrusions is calculated\n",
      "R1001P\n",
      "R1215M\n",
      "R1230J\n",
      "R1168T\n",
      "R1137E\n",
      "R1125T\n",
      "R1066P\n",
      "R1336T\n",
      "R1339D\n",
      "R1200T\n",
      "R1006P\n",
      "R1034D\n",
      "R1169P\n",
      "R1151E\n",
      "R1067P\n",
      "R1123C\n",
      "R1275D\n",
      "R1158T\n",
      "R1293P\n",
      "R1108J\n",
      "R1374T\n",
      "R1145J\n",
      "R1350D\n",
      "R1240T\n",
      "R1337E\n",
      "R1153T\n",
      "R1283T\n",
      "R1325C\n",
      "R1122E\n",
      "R1112M\n",
      "R1338T\n",
      "R1341T\n",
      "R1002P\n",
      "R1094T\n",
      "R1299T\n",
      "R1102P\n",
      "R1068J\n",
      "R1077T\n",
      "R1187P\n",
      "R1174T\n",
      "R1311T\n",
      "R1148P\n",
      "R1150J\n",
      "R1291M\n",
      "R1161E\n",
      "R1083J\n",
      "R1217T\n",
      "R1022J\n",
      "R1316T\n",
      "R1003P\n",
      "R1292E\n",
      "R1080E\n",
      "R1033D\n",
      "R1191J\n",
      "R1243T\n",
      "R1172E\n",
      "R1096E\n",
      "R1247P\n",
      "R1330D\n",
      "R1063C\n",
      "R1052E\n",
      "R1061T\n",
      "R1048E\n",
      "R1053M\n",
      "R1089P\n",
      "R1020J\n",
      "R1049J\n",
      "R1010J\n"
     ]
    }
   ],
   "source": [
    "# #choose between:\n",
    "# 1.  < / > median semantic similarity:\n",
    "# if exp=='catFR':\n",
    "#     median_similarity=nanmedian(long_df['semantic_similarity'])\n",
    "\n",
    "#     tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(long_df[long_df['semantic_similarity']>median_similarity])\n",
    "\n",
    "# # Spectral-tilt (HFA-LFA):\n",
    "# # 2. tilt of intrusions that are semanticaly related to encoded categories (1)\n",
    "# tilt_diff_related,correct_recall_mean_tilt_related,intrusion_mean_tilt_related,deliberation_mean_tilt_related,PLI_mean_tilt_related,ELI_mean_tilt_related=average_tilt(long_df,'related','HFA_LFA_diff')\n",
    "\n",
    "# # 3. tilt of intrusions that are semantivaly nomrelated to encoded categories (0)\n",
    "# tilt_diff_nonrelated,correct_recall_mean_tilt_nonrelated,intrusion_mean_tilt_nonrelated,deliberation_mean_tilt_nonrelated,PLI_mean_tilt_nonrelated,ELI_mean_tilt_nonrelated=average_tilt(long_df,'nonrelated','HFA_LFA_diff')\n",
    "\n",
    "# # 4. tilt of all data\n",
    "# tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(long_df,'all','HFA_LFA_diff')\n",
    "\n",
    "# #  -- HFA only:\n",
    "# # 5. HFA of intrusions that are semanticaly related to encoded categories (1)\n",
    "# HFA_diff_related,correct_recall_mean_HFA_related,intrusion_mean_HFA_related,deliberation_mean_HFA_related,PLI_mean_HFA_related,HFA_mean_HFA_related=average_tilt(long_df,'related','HFA')\n",
    "\n",
    "# # 6. HFA of intrusions that are semanticaly nonrelated to encoded categories (0)\n",
    "# HFA_diff_nonrelated,correct_recall_mean_HFA_nonrelated,intrusion_mean_HFA_nonrelated,deliberation_mean_HFA_nonrelated,PLI_mean_HFA_nonrelated,ELI_mean_HFA_nonrelated=average_tilt(long_df,'nonrelated','HFA')\n",
    "\n",
    "# 7. HFA of all data\n",
    "HFA_diff,correct_recall_mean_HFA,intrusion_mean_HFA,deliberation_mean_HFA,PLI_mean_HFA,ELI_mean_HFA=average_tilt(long_df,'all','HFA')\n",
    "\n",
    "\n",
    "#  -- LFA only:\n",
    "# # 5. LFA of intrusions that are semanticaly related to encoded categories (1)\n",
    "# LFA_diff_related,correct_recall_mean_LFA_related,intrusion_mean_LFA_related,deliberation_mean_LFA_related,PLI_mean_LFA_related,ELI_mean_LFA_related=average_tilt(long_df,'related','LFA')\n",
    "\n",
    "# # 6. LFA of intrusions that are semanticaly nonrelated to encoded categories (0)\n",
    "# LFA_diff_nonrelated,correct_recall_mean_LFA_nonrelated,intrusion_mean_LFA_nonrelated,deliberation_mean_LFA_nonrelated,PLI_mean_LFA_nonrelated,ELI_mean_LFA_nonrelated=average_tilt(long_df,'nonrelated','LFA')\n",
    "\n",
    "# 7. LFA of all data\n",
    "LFA_diff,correct_recall_mean_LFA,intrusion_mean_LFA,deliberation_mean_LFA,PLI_mean_LFA,ELI_mean_LFA=average_tilt(long_df,'all','LFA')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-0.035246245415007794,\n",
       " -0.08391495587795088,\n",
       " 0.07389141134135221,\n",
       " -0.07607683161615995,\n",
       " 0.03811863144281619,\n",
       " -0.057586631439824607,\n",
       " 0.003089573103740446,\n",
       " -0.033293778623656116,\n",
       " 0.03233654015415159,\n",
       " -0.048979724519787084,\n",
       " -0.08043715289844318,\n",
       " -0.07648918020663373,\n",
       " -0.012270045349065138,\n",
       " -0.05505844294600603,\n",
       " 0.00048691933662694034,\n",
       " 0.03791204802880635,\n",
       " -0.0056140464775711035,\n",
       " 0.009957394625823325,\n",
       " -0.5687160439553686,\n",
       " -0.05205760063340107,\n",
       " -0.11293544413390887,\n",
       " -0.09915918171492337,\n",
       " -0.03056575222864729,\n",
       " 0.2895484434194133,\n",
       " 0.24846179108281619,\n",
       " 0.30159549475592806,\n",
       " -0.11258379615810359,\n",
       " -0.17631086052796427,\n",
       " -0.06489428697893224,\n",
       " -0.07013749314127976,\n",
       " 0.0031830555310777,\n",
       " 0.04895821588577015,\n",
       " 0.021359568546624665,\n",
       " -0.17259369341384537,\n",
       " 0.036150924752195134,\n",
       " 0.09567977946021432,\n",
       " 0.05860970782648964,\n",
       " 0.038621315470523686,\n",
       " -0.26969379023067286,\n",
       " 0.20284554202588778,\n",
       " -0.12617251727161624,\n",
       " -0.07459729669680733,\n",
       " 0.07255395727537635,\n",
       " -0.03099895817005624,\n",
       " -0.18857688398931446,\n",
       " -0.1610244633212345,\n",
       " 0.1209911932027811,\n",
       " -0.01643455685927426,\n",
       " -0.021279288600553725,\n",
       " -0.06686133587512742,\n",
       " -0.006830595820116574,\n",
       " -0.016184664748573458,\n",
       " 0.11745521504113585,\n",
       " -0.024621914768729724,\n",
       " -0.3244959518398817,\n",
       " 0.026824760807490772,\n",
       " 0.027482840334694243,\n",
       " -0.0179468584193316,\n",
       " -0.0043675828808381854,\n",
       " -0.07978737109415816,\n",
       " -0.19119986200649097,\n",
       " 0.03649821241689364,\n",
       " -0.027928931263750553,\n",
       " -0.03252989368934297,\n",
       " -0.011476875779128272,\n",
       " -0.0838202354753613,\n",
       " -0.3870181062133817,\n",
       " -0.08613190443679294]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correct_recall_mean_LFA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def events_avg(event_type):\n",
    "    avg_event=np.mean(event_type)\n",
    "    ste_mean_event=np.std(event_type)/np.sqrt(len(event_type))\n",
    "    return avg_event,ste_mean_event"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'correct_recall_mean_tilt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-73-e45c0ca5e28e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Compute mean and ste of ** spectral-tilt ** for each event type (and for both semantic related and nonrelated intrusions)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Correct-recall:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mavg_mean_correct_recall\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mste_mean_correct_recall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevents_avg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrect_recall_mean_tilt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m# avg_mean_correct_recall_nonrelated, ste_mean_correct_recall_nonrelated = events_avg(correct_recall_mean_tilt_nonrelated)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# avg_mean_correct_recall_related, ste_mean_correct_recall_related = events_avg(correct_recall_mean_tilt_related)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'correct_recall_mean_tilt' is not defined"
     ]
    }
   ],
   "source": [
    "# Compute mean and ste of ** spectral-tilt ** for each event type (and for both semantic related and nonrelated intrusions)\n",
    "# Correct-recall:\n",
    "avg_mean_correct_recall, ste_mean_correct_recall = events_avg(correct_recall_mean_tilt)\n",
    "avg_mean_correct_recall_nonrelated, ste_mean_correct_recall_nonrelated = events_avg(correct_recall_mean_tilt_nonrelated)\n",
    "avg_mean_correct_recall_related, ste_mean_correct_recall_related = events_avg(correct_recall_mean_tilt_related)\n",
    "# Intrusion:\n",
    "avg_mean_intrusion, ste_mean_intrusion = events_avg(intrusion_mean_tilt)\n",
    "avg_mean_intrusion_nonrelated, ste_mean_intrusion_nonrelated = events_avg(intrusion_mean_tilt_nonrelated)\n",
    "avg_mean_intrusion_related, ste_mean_intrusion_related = events_avg(intrusion_mean_tilt_related)\n",
    "# Deliberation:\n",
    "avg_mean_deliberation, ste_mean_deliberation = events_avg(deliberation_mean_tilt)\n",
    "avg_mean_deliberation_nonrelated, ste_mean_deliberation_nonrelated = events_avg(deliberation_mean_tilt_nonrelated)\n",
    "avg_mean_deliberation_related, ste_mean_deliberation_related = events_avg(deliberation_mean_tilt_related)\n",
    "# PLI:\n",
    "avg_mean_PLI, ste_mean_PLI = events_avg(PLI_mean_tilt)\n",
    "avg_mean_PLI_nonrelated, ste_mean_PLI_nonrelated = events_avg(PLI_mean_tilt_nonrelated)\n",
    "avg_mean_PLI_related, ste_mean_PLI_related = events_avg(PLI_mean_tilt_related)\n",
    "# ELI:\n",
    "avg_mean_ELI, ste_mean_ELI = events_avg(ELI_mean_tilt)\n",
    "avg_mean_ELI_nonrelated, ste_mean_ELI_nonrelated = events_avg(ELI_mean_tilt_nonrelated)\n",
    "avg_mean_ELI_related, ste_mean_ELI_related = events_avg(ELI_mean_tilt_related)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# OR: Compute mean and ste of ** LFA **\n",
    "# correct-recall\n",
    "avg_mean_correct_recall, ste_mean_correct_recall = events_avg(correct_recall_mean_LFA) \n",
    "# avg_mean_correct_recall_nonrelated, ste_mean_correct_recall_nonrelated = events_avg(correct_recall_mean_LFA_nonrelated)\n",
    "# avg_mean_correct_recall_related, ste_mean_correct_recall_related = events_avg(correct_recall_mean_LFA_related)\n",
    "# Intrusion:\n",
    "avg_mean_intrusion, ste_mean_intrusion = events_avg(intrusion_mean_LFA)\n",
    "# avg_mean_intrusion_nonrelated, ste_mean_intrusion_nonrelated = events_avg(intrusion_mean_LFA_nonrelated)\n",
    "# avg_mean_intrusion_related, ste_mean_intrusion_related = events_avg(intrusion_mean_LFA_related)\n",
    "# Deliberation:\n",
    "avg_mean_deliberation, ste_mean_deliberation = events_avg(deliberation_mean_LFA)\n",
    "# avg_mean_deliberation_nonrelated, ste_mean_deliberation_nonrelated = events_avg(deliberation_mean_LFA_nonrelated)\n",
    "# avg_mean_deliberation_related, ste_mean_deliberation_related = events_avg(deliberation_mean_LFA_related)\n",
    "# PLI:\n",
    "avg_mean_PLI, ste_mean_PLI = events_avg(PLI_mean_LFA)\n",
    "# avg_mean_PLI_nonrelated, ste_mean_PLI_nonrelated = events_avg(PLI_mean_LFA_nonrelated)\n",
    "# avg_mean_PLI_related, ste_mean_PLI_related = events_avg(PLI_mean_LFA_related)\n",
    "# ELI:\n",
    "avg_mean_ELI, ste_mean_ELI = events_avg(ELI_mean_LFA)\n",
    "# avg_mean_ELI_nonrelated, ste_mean_ELI_nonrelated = events_avg(ELI_mean_LFA_nonrelated)\n",
    "# avg_mean_ELI_related, ste_mean_ELI_related = events_avg(ELI_mean_LFA_related)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# #set color scheme\n",
    "if exp=='catFR1':\n",
    "#     colors=['#5d1451','#a484ac','#b1a1c0','thistle']#['#734a65','#a484ac','thistle']#['rebeccapurple','mediumpurple','thistle']\n",
    "#     colors=['#351c75','#674ea7','#8e7cc3','#b4a7d6']#['#734a65','#a484ac','thistle']#['rebeccapurple','mediumpurple','thistle']\n",
    "#     colors=['#240b3a','#775a90','#b1a1c0','#d8d0df']\n",
    "#     colors=['#65365a','#775a90','#b1a1c0','#d8d0df']\n",
    "#     colors=['#355c7d','#6c5b7b','#c06c84','#d8d0df']\n",
    "    colors=['#5d1451','#a484ac','indianred','thistle']#['#734a65','#a484ac','thistle']#['rebeccapurple','mediumpurple','thistle']\n",
    "\n",
    "\n",
    "#     colors=['#240b3a','#5d1451','#b1a1c0','thistle']#['#734a65','#a484ac','thistle']#['rebeccapurple','mediumpurple','thistle']\n",
    "elif exp in ['FR1','pyFR']:\n",
    "#     colors=['#1f6357','#65ab7c','#bcecac'] #mediumseagreen\n",
    "    colors=['#1f6357','#65ab7c','#bcecac','mediumseagreen']\n",
    "# plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAEJCAYAAADB8rOLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAVr0lEQVR4nO3df5BlZX3n8fcHEIZBRMyMAWaz4poy/DARpUFl1YC/I+qm1h8LK6tC6exuMuigm4pVKmi0lmwCgqAbM5pVdgWWsAWyqNn4a4eyohbTrMQJBCyEURaUzDARxWFAne/+cW4vTXu7+3b3vXPP6X6/qqZO3+c859zvnTvw6fOcc56TqkKSpLbZZ9wFSJLUjwElSWolA0qS1EoGlCSplQwoSVIrGVCSpFYyoCRJrdT5gEqyT5JzktyWZHeSu5NcmOSgAbZ9XJKPJ7kpyY4kDye5K8lVSZ61N+qXJPWXrt+om+QjwNuBa4G/Ao4Gzga+BrykqvbMse1BwA3A14E7gZ8A/xQ4EzgMeEVVfXWkH0CS1FenAyrJscBW4Nqqeu209rOBS4A3VtUVi9jv4cD3gS9V1SuHVa8kaXBdH+I7HQhw8Yz2TwC7gDMWud9/AHYDhy6+NEnSUuw37gKW6ARgD3Dj9Maq2p3k5t76eSXZlyaM9gN+DfgPwOOBLwy1WknSwLoeUEcAO6rq4T7r7gFOSrJ/VT0yz36OphkqnPIAcH7vz6ySrAfWAxxzzDHH33LLLQMXLkkCmlGwvro+xLca6BdO0AzRTfWZz13AS4FTgXcA3wEOAQ6Ya6Oq2lRVE1U1ceCBBw5WsSRpIF0/gtoFPHmWdaum9ZlTVf0U+PLU6yT/Bfg/wDXAy5dYoyRpEbp+BHUvsCZJvyOddTTDf/MN7/2SqnqQJpxeluRpS6xRkrQIXQ+oLTSf4cTpjUlWAccBk0vY99SY3ZOWsA9J0iJ1PaCuAgrYOKP9bTTnni6fakhyeJKjkqye1rY2yS/9HSQ5DHg98CDglQ+SNAadPgdVVVuTfAzYkOQamsvCj6aZWeIGYPpNuucDbwZOATb32t4IbExyLc2FEo8AT+/1OxR4a1XNew5LkjR8nQ6ono3ANprLvU8FdgCXAufONc1Rz9do7pV6Nc3URvsD99FcMPGRqvr6iGqWJM2j01MdtcnExERNTi7llJckrUjL9j4oSdIyZUBJklrJgJIktZIBJUlqJQNKktRKBpQkqZUMKElSKxlQkqRWMqAkSa1kQEmSWsmAkiS1kgElSWolA0qS1EoGlCSplQwoSVIrGVCSpFYyoCRJrWRASZJayYCSJLWSASVJaiUDSpLUSgaUJKmVDChJUisZUJKkVjKgJEmtZEBJklrJgJIktZIBJUlqJQNKktRKBpQkqZU6H1BJ9klyTpLbkuxOcneSC5McNMC2hyZ5R5Iv9rZ7KMntSTYl+bW9Ub8kqb/OBxRwEfBh4FbgbOBq4O3A9Unm+3zPAS4ECvgosAH4AnAGsDXJMaMqWpI0t/3GXcBSJDmWJpSuqarXTmu/C7gEOA24Yo5d3Ab8RlV9d8Z+Pw98Cfgj4HXDrluSNL+uH0GdDgS4eEb7J4BdNEdCs6qqbTPDqdf+ZWAn8Iwh1SlJWqCuB9QJwB7gxumNVbUbuLm3fsGSHAIcDNy31AIlSYvT9YA6AthRVQ/3WXcPsCbJ/ovY73uBxwGXzdUpyfokk0kmt2/fvoi3kSTNpusBtRroF04Au6f1GViS1wHvAv4a+NRcfatqU1VNVNXE2rVrF/I2kqR5dD2gdgEHzLJu1bQ+A0nySuBy4CbgDVVVSytPkrRYXQ+oe2mG8fqF1Dqa4b9HBtlRklcA1wC3AC+rqh8Pr0xJ0kJ1PaC20HyGE6c3JlkFHAdMDrKTJC8HrqW57PwlVfWPQ65TkrRAXQ+oq2hust04o/1tNOeeLp9qSHJ4kqOSPOacVJKXAZ8FvgO8uKp2jrZkSdIgOn2jblVtTfIxYEOSa2hmgTiaZiaJG3jsTbrnA28GTgE2AySZAK6juZfqU8DvJJn5Hp8Z7aeQJPXT6YDq2QhsA9YDpwI7gEuBc6tqzzzbPoNHL6a4aJY+BpQkjUG8UG04JiYmanJyoFNekqRHZbYVXT8HJUlapgwoSVIrGVCSpFYyoCRJrWRASZJayYCSJLWSASVJaiUDSpLUSgaUJKmVDChJUisZUJKkVjKgJEmtZEBJklrJgJIktZIBJUlqJQNKktRKBpQkqZUMKElSKxlQkqRWMqAkSa1kQEmSWsmAkiS1kgElSWolA0qS1EoGlCSplQwoSVIrGVCSpFYyoCRJrWRASZJaqfMBlWSfJOckuS3J7iR3J7kwyUEDbv+GJJ9K8rdJfpakkhw52qolSfPpfEABFwEfBm4FzgauBt4OXJ9kkM/3e8BpwEPAd0dVpCRpYfYbdwFLkeRYmlC6pqpeO639LuASmuC5Yp7dvAm4t6p+nuSjwG+Mql5J0uC6fgR1OhDg4hntnwB2AWfMt4Oq+n5V/XwEtUmSlqDrAXUCsAe4cXpjVe0Gbu6tlyR1UNcD6ghgR1U93GfdPcCaJPuP6s2TrE8ymWRy+/bto3obSVqRuh5Qq4F+4QSwe1qfkaiqTVU1UVUTa9euHdXbSNKK1PWA2gUcMMu6VdP6SJI6pusBdS/NMF6/kFpHM/z3yF6uSZI0BF0PqC00n+HE6Y1JVgHHAZPjKEqStHRdD6irgAI2zmh/G825p8unGpIcnuSoJCM7JyVJGp5O36hbVVuTfAzYkOQa4AvA0TQzSdzAY2/SPR94M3AKsHmqMckLgRf2Xk70lhuS/Kj3Hh8a5WeQJPU3soBK8jTgzKp676jeo2cjsA1YD5wK7AAuBc6tqj0DbP8i4LwZbe+a9rMBJUljkKoa3s6SA4HXA2cBLwCoqn2H9gYtNjExUZOTnvKSpAXKbCuGcgSV5Lk0ofQG4ODeG+4BvjqM/UuSVp5FB1SSJ9NMtHoWj06wGmAr8N+Ay6vqB0uuUJK0Ii0ooJLsS3Oe5yzgd3rbB/hRr8shVfXMoVYoSVqRBrrMvHd59p8A/xe4FngNsC/wZeBfA4cDt4yqSEnSyjPvEVSSrwPPmXoJ3Al8Grisqu6e1m8U9UmSVqhBhvieS3Mz7D3AW6vqi6MtSZKkwYb4fkZz5LQOuDLJpUmOH21ZkqSVbpCAOhx4J83VeYcCvw/cmGRrknN6V/NJkjRU8wZUVe2sqour6jiaJ9R+HHgAOBa4ALg7yWdpjrAkSRqKBU0WW1U3VdXv0RxVnQH8b5rzWK8BngKQ5CNJfNS6JGlJFjWbeVU9XFVXVNVLgKcCfwR8j+Zc1Qbgm0luS/Ke4ZUqSVpJlvy4jar6flW9v6r+GfBSmkdgPAw8nSa4JElasKHOZl5VXwG+kuQQ4I3AW4a5f0nSyjGSBxZW1QNV9Z+r6sT5e0uS9MvmDagkH05y2t4oRpKkKYMcQW0EXtZvRZI7k/yn4ZYkSdLSh/iOBNYOoQ5Jkh5jJOegJElaKgNKktRKBpQkqZUMKElSKw16o+5xSc5dxDqqytkkJGmITj75ZAA2b9481jpGbdCAembvTz/HzbIuNA86NKAkSQs2SEBdNvIqJEmaYd6AqqozF7PjJL8KHLCYbSWpbf7FF89j5yM/GXcZAHz7/u8C8ILPvXPMlTSetP/BXPeyDwx9v6O8SOKzwJ0j3L8k7TVtCac2GtXfzaiv4suI9y9JWqaG+rgNSdLo/db5rx93CXuF90FJklrJgJIktVLnAyrJPknOSXJbkt1J7k5yYZKDFrCPVyb5epKfJtmZ5OokTx1l3ZKkuXU+oICLgA8DtwJnA1cDbweuTzLIAxn/JfA54EDgD4A/BV4I/E2SI0ZVtCRpbvNeJJHkhYvc9xMWud3AkhxLE0rXVNVrp7XfBVwCnAZcMcf2jwMuBe4GXlBVD/ba/wq4CXg/sH5U9UujtlKmxNHyNMhVfJtppixaqKmpjkbp9N77XDyj/RPAHwNnMEdAAb8NHAGcOxVOAFV1c5LNwL9K8vtV9bOhVi1JmtcgAfV9Rh80i3UCsAe4cXpjVe1OcnNv/XzbA3yjz7pvAi8Cng7cssQ6JUkLNMhUR0fuhToW6whgR1U93GfdPcBJSfavqkfm2H6qb7/tAdYxS0AlWc+0IcDE+5LVTv7b1KiFixa1XdXsxz9dv1F3NdAvnAB2T+szW0Ct7i377WP3jD6/pKo2AZsAJiYmanJycs5iZ3PkW09b1HYrxbZP/vdxl7Bg6//H+8ZdAgCfO++/AvCqD7xpzJU81qbXfXDcJagDun4V3y5mn5B21bQ+c23PLPsYZHtJ0oh0PaDuBdYk6Rcw62iG/2Y7eprafqpvv+2h//CfJGnEuh5QW2g+w4nTG5OsonmQ4nxjblt6y+f1Wfdc4MfAd5ZYoyRpEboeUFfRXGG4cUb722jOHV0+1ZDk8CRHJZl+TukG4AfAW5M8flrfZwInA1d7ibkW4wkHPH7+TiuUfzcaVKcvkqiqrUk+BmxIcg3wBeBompkkbuCx90CdD7wZOIXm3i6q6mdJ3kETdF9L8gmaG4zPAbYD5+2lj6Jl5oJX/+G4SwDg5I9+DfCiBHVTpwOqZyOwjeZy71OBHTSzQ5xbVXvm27iqrk7yEPBe4AKaK/q+AvxhVXn+SZLGpPMBVVW/AC7s/Zmr31uAt8yy7nM08/GtaD/8/FcBOOzUF425Eknq/jkoSdIyZUBJklrJgJIktVLnz0FJmp2P2VCXeQQlSWolA0qS1EoGVAusecIh4y6htfy7kVauzPUsDg1uKY/baAsfDy5pDGZ9WJlHUJKkVjKgJEmtZEBJklrJgJIktZIBJUlqJWeS0P/n1XuS2sQjKElSKxlQkqRWMqAkSa1kQEmSWsmAkiS1kgElSWolA0qS1EoGlCSplQwoSVIrGVCSpFYyoCRJrWRASZJayYCSJLWSASVJaiUDSpLUSssioJK8Kcm3kjyU5L4kn0yydgHbvzTJx5NsSbI7SSU5eYQlS5Lm0fmASnIOcBnwAPAO4M+B04DNSQ4acDdvBM4C9gX+fhR1SpIWptMBlWQN8CFgC/DiqtpUVecCpwPH0ATWIN4DHFxVzwYuH0mxkqQF6XRAAb8LrAYurapfTDVW1fXAncAZg+ykqu6pqodHU6IkaTG6HlAn9Jbf6LPum8BRSR6/F+uRJA1J1wPqiN7ynj7r7gEyrc/QJVmfZDLJ5Pbt20f1NpK0Iu037gIAkjwR2LiATS6pqp00w3sA/YbndveWq/usG4qq2gRsApiYmKhRvY8krUStCCjgicB5C+j/GWAnsKv3+gDgoRl9VvWWu5AkdU4rAqqqttEMxy3Uvb3lOuCOGevWATWtjySpQ7p+DmpLb/m8PuueA9xeVQ/uxXokSUPS9YC6jmZob0OSfacak7waeBoz7mlKsibJUUkO2btlSpIWqhVDfItVVduTvA+4APhykitphvbeBdwGXDxjkw0057rOBD491Zjkt4DX9F7+897y3yR5fu/nS6vqgZF8CElSX50OKICqujDJ/cA5wCXAj4G/BN69gOG9ZwMfnNF21rSfP0MzlZIkaS9JlVdHD8PExERNTk6OuwxJ6ppZL5Dr+jkoSdIyZUBJklrJgJIktZIBJUlqJQNKktRKBpQkqZUMKElSKxlQkqRWMqAkSa1kQEmSWsmAkiS1kgElSWolA0qS1EoGlCSplQwoSVIrGVCSpFYyoCRJrWRASZJayYCSJLWSASVJaiUDSpLUSgaUJKmVDChJUisZUJKkVjKgJEmtZEBJklrJgJIktZIBJUlqJQNKktRKBpQkqZWWRUAleVOSbyV5KMl9ST6ZZO2A265K8rYk1yXZ1tvHnUmuTHL0qGuXJPXX+YBKcg5wGfAA8A7gz4HTgM1JDhpgF0cCm4AnAX8BbACuBF4O3JzklBGULUmax37jLmApkqwBPgRsAV5cVb/otW8B/idNYP3HeXazHXhWVd08Y9+XA98C/hSYGHLpkqR5dP0I6neB1cClU+EEUFXXA3cCZ8y3g6q6f2Y49dpvBf4OeMbwypUkDarrAXVCb/mNPuu+CRyV5PGL2XGSfYDDgfsWWZskaQk6PcQHHNFb3tNn3T1Aen2+s4h9/3uagPrgbB2SrAfW914+mOT2RbxP26wBdoy7CA2V3+nytFy+1/9VVa/ot6IVAZXkicDGBWxySVXtpBneA3i4T5/dveXqPuvmq+ck4ELg28xxDquqNtFcYLFsJJmsKs+5LSN+p8vTSvheWxFQwBOB8xbQ/zPATmBX7/UBwEMz+qzqLXexAEmOBz4P3Au8sqp2z7OJJGkEWhFQVbWNZjhuoe7tLdcBd8xYtw6oaX3mleTZwJdoLlk/par6DR1KkvaCrl8ksaW3fF6fdc8Bbq+qBwfZUZJn0YTTT2jC6XvDKbFzltWQpQC/0+Vq2X+vqapx17BovdkivgdsBU6adh/Uq2nug3pfVX1oWv81NCcWf1BVD0xrfxbwZeCnwMlVdefe+xSSpH46HVAASd4FXABsppkBYh3wLuBu4ITpR1BJ3k9zruvMqvp0r+0pwE00M0l8APhun7e5tqp+OrIPIUn6Ja04B7UUVXVhkvuBc4BLgB8Dfwm8e8DhvacCv9L7+f1z9DGgJGkv6vwRlIYjySuB02nO5x1G88vLDuBvgeuBy6vqJ+OrUIuRZBvwFJrzqpvHW40Watr3N6WAB2ku5Lqd5jz8lVX17b1f3egZUCtckifTHHH+dq/p74HbgEeAf0IzW8f+NGE1sYIvHukkA6rbpn1/fw38sNe8GlgLPAs4pNd2PbC+qn44cx9d1vkhPi1e7wbpvwF+nWa6qH838zexJAfTzKrxHuBQmotSJO1dfzzzF4zedGyvBj7cW96Q5KSqun8M9Y1E1y8z19J8lCacbgRe1G+YoKp+UlV/AhyP8xJKrVFVe6rqOpqnLdwBPJ1mBpxlw4BaoZI8jeacEzRHTnPOmFFVd1TVD0ZfmaSFqKp/5NGp4s5Ictg46xkmA2rlehXN97+1qr417mIkLckXaKZ/2xdYNg9ZNaBWruN7yy1z9pLUetVc7Tb1i+ax46xlmAyolWttb/kPY61C0rBs7y1/Zc5eHWJASdLyMPX/8z1jrWKIDKiVa+q3rSePtQpJw7Kmt9w51iqGyIBauW7qLU8YaxWSlixJaG7chWby7GXBgFq5Pk8zFPCbvdncJXXXqTQ30v+cZuLsZcGAWqGq6g7gqt7LP0tywFz9kzwtyeGjr0zSQiQ5FLio9/Kyqlo2Fz4ZUCvbBuBOmoc7fjXJb87skOSgJO+kGRL81b1cn6RZJNknyWtobhX5dZo5NP9gvFUNl3PxrWBVtTPJ82kmi30+8O0kt/LoZLHrgBOBA2imOVo2J1+ljnl3krf0fl5Fc5vIs4En9to+C/zb3qwSy4YBtcL1pi96QZJX8ejjNl5B829jO82Thq8DrvChjdLYvLy3LJpn0/2IZlTjRpr/Nv9uXIWNko/bkCS1kuegJEmtZEBJklrJgJIktZIBJUlqJQNKktRKBpQkqZUMKElSKxlQkqRWMqAkSa30/wBDORqlXvfgLAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot all data\n",
    "\n",
    "# error = [ste_mean_correct_recall,ste_mean_intrusion,ste_mean_PLI,ste_mean_ELI,ste_mean_deliberation]\n",
    "error = [ste_mean_correct_recall,ste_mean_PLI,ste_mean_ELI,ste_mean_deliberation]\n",
    "\n",
    "fig=plt.figure()\n",
    "# h=plt.bar([0,1,2,3,4],[avg_mean_correct_recall,avg_mean_intrusion, avg_mean_PLI,avg_mean_ELI,avg_mean_deliberation],yerr=error,width=0.6,edgecolor='black')\n",
    "h=plt.bar([0,1,2,3],[avg_mean_correct_recall, avg_mean_PLI,avg_mean_ELI,avg_mean_deliberation],yerr=error,width=0.6,edgecolor='black')\n",
    "\n",
    "h[0].set_color(colors[0])\n",
    "# h[1].set_color(colors[1])\n",
    "h[1].set_color(colors[1])\n",
    "h[2].set_color(colors[2])\n",
    "h[3].set_color(colors[3])\n",
    "h[0].set_edgecolor(colors[0])\n",
    "# h[1].set_edgecolor(colors[1])\n",
    "h[1].set_edgecolor(colors[1])\n",
    "h[2].set_edgecolor(colors[2])\n",
    "h[3].set_edgecolor(colors[3])\n",
    "# plt.xticks([0,1,2,3,4],['C','I','PLI','ELI','D'],fontsize=22, rotation=0)\n",
    "plt.xticks([0,1,2,3],['C','PLI','ELI','D'],fontsize=22, rotation=0)\n",
    "\n",
    "plt.yticks(fontsize=18)\n",
    "#plt.xlabel('Event type',fontsize=18)\n",
    "# plt.ylabel('Spectral tilt',fontsize=22); plt.ylim((-0.2, 0.3))\n",
    "plt.ylabel('LFA',fontsize=22); plt.ylim((-0.2, 0.3))\n",
    "\n",
    "plt.axhline(y=0,color='black',linewidth=1)\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')#plt.box(on=None)\n",
    "plt.grid(False)\n",
    "# savefig('average_spectral_tilt_strength1',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "# savefig('average_spectral_LFA2',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n",
    "\n",
    "# without PLIs and ELIs\n",
    "error = [ste_mean_correct_recall,ste_mean_intrusion,ste_mean_deliberation]\n",
    "fig=plt.figure()\n",
    "h=plt.bar([0,1,2],[avg_mean_correct_recall,avg_mean_intrusion,avg_mean_deliberation],yerr=error,width=0.6,edgecolor='black')\n",
    "h[0].set_color(colors[0])#('k')\n",
    "h[1].set_color(colors[1])#('grey')\n",
    "h[2].set_color(colors[3])#('lightgrey')\n",
    "h[0].set_edgecolor(colors[0])\n",
    "h[1].set_edgecolor(colors[1])\n",
    "h[2].set_edgecolor(colors[3])\n",
    "plt.xticks([0,1,2],['C','I','D'],fontsize=22, rotation=0)\n",
    "plt.yticks(fontsize=18)\n",
    "#plt.xlabel('Event type',fontsize=18)\n",
    "# plt.ylabel('Spectral tilt',fontsize=22); plt.ylim((-0.2, 0.3))\n",
    "plt.ylabel('LFA',fontsize=22); plt.ylim((-0.2, 0.3))\n",
    "plt.axhline(y=0,color='black',linewidth=1)\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(False)\n",
    "\n",
    "# savefig('average_spectral_tilt_strength',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "# savefig('average_spectral_LFA',transparent=True,bbox_inches='tight', pad_inches=0.08)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ** LFA comparisons: **\n",
      "C-I t-value: -1.0 p-value: 0.32532\n",
      "I_D t-value: -2.0 p-value: 0.045419311552\n",
      "C_D t-value: -4.1 p-value: 0.00011915824616890482697\n",
      "df: 67\n",
      "ELI_PLI t-value: 1.2 p-value: 0.221\n",
      "df: 40\n"
     ]
    }
   ],
   "source": [
    "# Statistical test - paired t-tests on Spectral tilt\n",
    "# print(' ** Spectral tilt (HFA-LFA) comparisons: **')\n",
    "# C_Istatistic, C_Ipvalue= scipy.stats.ttest_rel(correct_recall_mean_tilt,intrusion_mean_tilt,nan_policy='omit')\n",
    "# print('C-I t-value: %.1f' %C_Istatistic + ' p-value: %.5f' %C_Ipvalue)\n",
    "# I_Dstatistic, I_Dpvalue= scipy.stats.ttest_rel(intrusion_mean_tilt,deliberation_mean_tilt,nan_policy='omit')\n",
    "# print('I_D t-value: %.1f' %I_Dstatistic + ' p-value: %.12f' %I_Dpvalue)\n",
    "# C_Dstatistic, C_Dpvalue= scipy.stats.ttest_rel(correct_recall_mean_tilt,deliberation_mean_tilt,nan_policy='omit')\n",
    "# print('C_D t-value: %.1f' %C_Dstatistic + ' p-value: %.23f' %C_Dpvalue)\n",
    "# print('df: %d' %int(len(correct_recall_mean_tilt)-1))\n",
    "# ELI_PLIstatistic, ELI_PLI_Dpvalue= scipy.stats.ttest_rel(ELI_mean_tilt,PLI_mean_tilt,nan_policy='omit')\n",
    "# print('ELI_PLI t-value: %.1f' %ELI_PLIstatistic + ' p-value: %.3f' %ELI_PLI_Dpvalue)\n",
    "# print('df: %d' %int(len(ELI_mean_tilt)-1))\n",
    "\n",
    "# Statistical test - paired t-tests on LFA\n",
    "print(' ** LFA comparisons: **')\n",
    "C_Istatistic, C_Ipvalue= scipy.stats.ttest_rel(correct_recall_mean_LFA,intrusion_mean_LFA,nan_policy='omit')\n",
    "print('C-I t-value: %.1f' %C_Istatistic + ' p-value: %.5f' %C_Ipvalue)\n",
    "I_Dstatistic, I_Dpvalue= scipy.stats.ttest_rel(intrusion_mean_LFA,deliberation_mean_LFA,nan_policy='omit')\n",
    "print('I_D t-value: %.1f' %I_Dstatistic + ' p-value: %.12f' %I_Dpvalue)\n",
    "C_Dstatistic, C_Dpvalue= scipy.stats.ttest_rel(correct_recall_mean_LFA,deliberation_mean_LFA,nan_policy='omit')\n",
    "print('C_D t-value: %.1f' %C_Dstatistic + ' p-value: %.23f' %C_Dpvalue)\n",
    "print('df: %d' %int(len(correct_recall_mean_LFA)-1))\n",
    "ELI_PLIstatistic, ELI_PLI_Dpvalue= scipy.stats.ttest_rel(ELI_mean_LFA,PLI_mean_LFA,nan_policy='omit')\n",
    "print('ELI_PLI t-value: %.1f' %ELI_PLIstatistic + ' p-value: %.3f' %ELI_PLI_Dpvalue)\n",
    "print('df: %d' %int(len(ELI_mean_LFA)-1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# With semantic related and nonrelated intrusions\n",
    "if exp=='catFR1':\n",
    "    error = [ste_mean_correct_recall_related,ste_mean_intrusion_related,ste_mean_intrusion_nonrelated,ste_mean_deliberation_related]\n",
    "    fig=plt.figure()\n",
    "    h=plt.bar([0,1,2,3],[avg_mean_correct_recall_related,avg_mean_intrusion_related,avg_mean_intrusion_nonrelated,avg_mean_deliberation_related],yerr=error,width=0.6,edgecolor='black')\n",
    "    h[0].set_color(colors[0])#('k')\n",
    "    h[1].set_color(colors[1])#('grey')\n",
    "    h[2].set_color(colors[2])#('grey')\n",
    "    h[3].set_color(colors[3])#('lightgrey')\n",
    "    h[0].set_edgecolor(colors[0])\n",
    "    h[1].set_edgecolor(colors[1])\n",
    "    h[2].set_edgecolor(colors[2])\n",
    "    h[3].set_edgecolor(colors[3])\n",
    "    plt.xticks([0,1,2,3],['C','S-I','NonS-I','D'],fontsize=22, rotation=0)\n",
    "    plt.yticks(fontsize=18)\n",
    "    #plt.xlabel('Event type',fontsize=18)\n",
    "    plt.ylabel('LFA',fontsize=22); plt.ylim((-0.2, 0.3))\n",
    "    plt.axhline(y=0,color='black',linewidth=1)\n",
    "\n",
    "    plt.gca().spines['right'].set_color('none')\n",
    "    plt.gca().spines['left'].set_color('k')\n",
    "    plt.gca().spines['top'].set_color('none')\n",
    "    plt.gca().spines['bottom'].set_color('k')\n",
    "    plt.grid(False)\n",
    "\n",
    "    savefig('average_LFA_strength',transparent=True,bbox_inches='tight', pad_inches=0.08)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Statistical test - paired t-tests on LFA between semantic relatedness conditions:\n",
    "if exp=='catFR1':\n",
    "    print(' ** LFA comparisons: **')\n",
    "    C_Istatistic, C_Ipvalue= scipy.stats.ttest_rel(correct_recall_mean_LFA_related,intrusion_mean_LFA_related,nan_policy='omit')\n",
    "    print('C-SI t-value: %.1f' %C_Istatistic + ' p-value: %.5f' %C_Ipvalue)\n",
    "    C_Istatistic, C_Ipvalue= scipy.stats.ttest_rel(intrusion_mean_LFA_related,intrusion_mean_LFA_nonrelated,nan_policy='omit')\n",
    "    print('SI-NonSI t-value: %.1f' %C_Istatistic + ' p-value: %.5f' %C_Ipvalue)\n",
    "    C_Istatistic, C_Ipvalue= scipy.stats.ttest_rel(correct_recall_mean_LFA_nonrelated,intrusion_mean_LFA_nonrelated,nan_policy='omit')\n",
    "    print('C-NonSI t-value: %.1f' %C_Istatistic + ' p-value: %.5f' %C_Ipvalue)\n",
    "    I_Dstatistic, I_Dpvalue= scipy.stats.ttest_rel(intrusion_mean_LFA_nonrelated,deliberation_mean_LFA_nonrelated,nan_policy='omit')\n",
    "    print('NonSI-D t-value: %.1f' %I_Dstatistic + ' p-value: %.12f' %I_Dpvalue)\n",
    "    I_Dstatistic, I_Dpvalue= scipy.stats.ttest_rel(intrusion_mean_LFA_related,deliberation_mean_LFA_related,nan_policy='omit')\n",
    "    print('SI-D t-value: %.1f' %I_Dstatistic + ' p-value: %.12f' %I_Dpvalue)\n",
    "    C_Dstatistic, C_Dpvalue= scipy.stats.ttest_rel(correct_recall_mean_LFA_related,deliberation_mean_LFA_related,nan_policy='omit')\n",
    "    print('C_D t-value: %.1f' %C_Dstatistic + ' p-value: %.23f' %C_Dpvalue)\n",
    "\n",
    "    print('df: %d' %int(len(correct_recall_mean_LFA_related)-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here I take the full power spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of sessions: 116\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x324 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x324 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot log (power) as a function of log frequency (similar to Nora's TICS 2020)\n",
    "# choose time windows:\n",
    "verbalization_start = convertMstoWindowNumber(0,-2500,-100,100,50)\n",
    "pre_verbalization_end_window = convertMstoWindowNumber(-100,-2500,-100,100,50)\n",
    "pre_verbalization_window = convertMstoWindowNumber(-600,-2500,-100,100,50)\n",
    "deliberation_start_window = convertMstoWindowNumber(-2000,-2500,-100,100,50)\n",
    "deliberation_end_window = convertMstoWindowNumber(-1500,-2500,-100,100,50)\n",
    "\n",
    "myfreqs = np.logspace(np.log10(4), np.log10(100), 40)  #2-100 Hz, 46 frequencies\n",
    "\n",
    "correct_recall_pow=[]\n",
    "intrusion_pow=[]\n",
    "deliberation_pow=[]\n",
    "correct_recall_time_pow=[]\n",
    "intrusion_time_pow=[]\n",
    "deliberation_time_pow=[]\n",
    "for i in range(0,len(correct_recall_hipp_pows)):\n",
    "    correct=reshape(correct_recall_hipp_pows[i],(len(correct_recall_hipp_pows[i][0]),len(correct_recall_hipp_pows[i][0][0]),len(correct_recall_hipp_pows[i][0][0][0])))\n",
    "    correct_recall_trial_avg=np.nanmean(correct,axis=1)\n",
    "    correct_recall_time_avg = np.mean(correct_recall_trial_avg[:,pre_verbalization_window:pre_verbalization_end_window],axis=1)\n",
    "    correct_recall_time_pow.append(correct_recall_trial_avg)\n",
    "    correct_recall_pow.append(correct_recall_time_avg)\n",
    "        \n",
    "    intrusion=reshape(all_intrusions_hipp_pows[i],(len(all_intrusions_hipp_pows[i][0]),len(all_intrusions_hipp_pows[i][0][0]),len(all_intrusions_hipp_pows[i][0][0][0])))\n",
    "    intrusion_trial_avg=np.nanmean(intrusion,axis=1)\n",
    "    intrusion_time_avg = np.mean(intrusion_trial_avg[:,pre_verbalization_window:pre_verbalization_end_window],axis=1)\n",
    "    intrusion_time_pow.append(intrusion_trial_avg)\n",
    "    #assert any(np.isnan(intrusion_pow))==False,('subject %d has nan values') %i\n",
    "    intrusion_pow.append(intrusion_time_avg)\n",
    "    \n",
    "    deliberation=reshape(deliberation_hipp_pows[i],(len(deliberation_hipp_pows[i][0]),len(deliberation_hipp_pows[i][0][0]),len(deliberation_hipp_pows[i][0][0][0])))  \n",
    "    deliberation_trial_avg=np.nanmean(deliberation,axis=1)\n",
    "    deliberation_time_avg = np.mean(deliberation_trial_avg[:,deliberation_start_window:deliberation_end_window],axis=1)\n",
    "    deliberation_time_pow.append(deliberation_trial_avg)\n",
    "    deliberation_pow.append(deliberation_time_avg)\n",
    "correct_recall_group_sem=scipy.stats.sem(correct_recall_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "intrusions_group_sem=scipy.stats.sem(intrusion_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "deliberation_group_sem=scipy.stats.sem(deliberation_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "correct_recall_group_avg=np.nanmean(correct_recall_pow,axis=0)\n",
    "intrusions_group_avg=np.nanmean(intrusion_pow,axis=0)\n",
    "deliberation_group_avg=np.nanmean(deliberation_pow,axis=0)\n",
    "\n",
    "print('number of sessions:', len(deliberation_pow))\n",
    "fig=plt.figure(figsize=(5,4.5));#ax=plt.subplot(121)\n",
    "plt.plot(myfreqs,correct_recall_group_avg,linewidth=2,color=colors[0])\n",
    "plt.fill_between(myfreqs,correct_recall_group_avg-correct_recall_group_sem,correct_recall_group_avg+correct_recall_group_sem,color=colors[0],alpha=0.4)\n",
    "plt.plot(myfreqs,intrusions_group_avg,linewidth=2,color=colors[1])\n",
    "plt.fill_between(myfreqs,intrusions_group_avg-intrusions_group_sem,intrusions_group_avg+intrusions_group_sem,color=colors[1],alpha=0.4)\n",
    "plt.plot(myfreqs,deliberation_group_avg,linewidth=2,color=colors[3])\n",
    "plt.fill_between(myfreqs,deliberation_group_avg-deliberation_group_sem,deliberation_group_avg+deliberation_group_sem,color=colors[3],alpha=0.4)\n",
    "#plt.title('Avergae PSD')\n",
    "plt.xlabel('Frequency (Hz)',fontsize=18)\n",
    "plt.ylabel('Log Power (z-score)',fontsize=18)\n",
    "plt.axhline(y=0,color='black',linewidth=1,linestyle='--')\n",
    "plt.legend(['Correct-recall','Intrusion','Deliberation'],fontsize=14,frameon=False)#loc='upper left')\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(False)\n",
    "\n",
    "rect = plt.Rectangle((4,-0.15),18-4,0.14+0.141,linewidth=1.5,fill=True,alpha=0.4,facecolor='lightgrey', edgecolor='lightgrey')\n",
    "rect2 = plt.Rectangle((44,-0.15),100.5-44,0.141+0.14,linewidth=1.5,fill=True,alpha=0.4,facecolor='lightgrey', edgecolor='lightgrey')\n",
    "\n",
    "# # Add the patch to the Axes\n",
    "# plt.gca().add_patch(rect)\n",
    "# plt.gca().add_patch(rect2)\n",
    "\n",
    "# savefig('spectral_tilt',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n",
    "\n",
    "fig=plt.figure(figsize=(5,4.5));#ax=plt.subplot(122)\n",
    "plt.plot(np.log10(myfreqs),correct_recall_group_avg,linewidth=2,color=colors[0])\n",
    "plt.fill_between(np.log10(myfreqs),correct_recall_group_avg-correct_recall_group_sem,correct_recall_group_avg+correct_recall_group_sem,color=colors[0],alpha=0.3)\n",
    "plt.plot(np.log10(myfreqs),intrusions_group_avg,linewidth=2,color=colors[1])\n",
    "plt.fill_between(np.log10(myfreqs),intrusions_group_avg-intrusions_group_sem,intrusions_group_avg+intrusions_group_sem,color=colors[1],alpha=0.3)\n",
    "\n",
    "frequencies= [int(freq) for freq in myfreqs[0:-1:8]]\n",
    "plt.xticks(np.log10(myfreqs[0:-1:8]),frequencies,fontsize=14)\n",
    "#plt.xticks([],np.round(myfreqs),fontsize=14)#\n",
    "#plt.title('Avergae PSD')\n",
    "plt.xlabel('Log Frequency (Hz)',fontsize=18)\n",
    "plt.ylabel('Log Power (z-score)',fontsize=18)\n",
    "plt.axhline(y=0,color='black',linewidth=1,linestyle='--')\n",
    "plt.legend(['Correct-recall','Intrusion'],fontsize=13,frameon=False,loc='lower right')\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(False)\n",
    "\n",
    "# savefig('spectral_tilt_log_sme',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n",
    "# # ax = plt.gca()\n",
    "# # plt.imshow(im)\n",
    "# # Create a Rectangle patch\n",
    "# plt.axvline(x=8,color='r',linewidth=1,linestyle='--')\n",
    "# rect = plt.Rectangle((8,-0.075),18-4,1,linewidth=3,fill=True,edgecolor='k')\n",
    "\n",
    "# # # Add the patch to the Axes\n",
    "#ax.add_patch(rect)\n",
    "# plt.gca().add_patch(rect)\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'nonrelated_intrusions_pows' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-60-10dccd65a39c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mcorrect_recall_pow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrect_recall_time_avg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mnonrelated_intrusion_trial_avg\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnonrelated_intrusions_pows\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mnonrelated_intrusion_time_avg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnonrelated_intrusion_trial_avg\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpre_verbalization_window\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mverbalization_start\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0mnonrelated_intrusion_time_pow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnonrelated_intrusion_trial_avg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'nonrelated_intrusions_pows' is not defined"
     ]
    }
   ],
   "source": [
    "# Plot log (power) as a function of log frequency for semantically related vs. non-related events\n",
    "\n",
    "# colors=['#240b3a','#775a90','#b1a1c0','#d8d0df']\n",
    "\n",
    "correct_recall_pow=[]\n",
    "nonrelated_intrusion_pow=[]\n",
    "related_intrusion_pow=[]\n",
    "deliberation_pow=[]\n",
    "correct_recall_time_pow=[]\n",
    "nonrelated_intrusion_time_pow=[]\n",
    "related_intrusion_time_pow=[]\n",
    "deliberation_time_pow=[]\n",
    "\n",
    "for i in range(0,len(correct_recall_hipp_pows)):\n",
    "    correct_recall_trial_avg=np.nanmean(correct_recall_hipp_pows[i],axis=1)\n",
    "    correct_recall_time_avg = np.mean(correct_recall_trial_avg[:,pre_verbalization_window:verbalization_start],axis=1)\n",
    "    correct_recall_time_pow.append(correct_recall_trial_avg)\n",
    "    correct_recall_pow.append(correct_recall_time_avg)\n",
    "\n",
    "    nonrelated_intrusion_trial_avg=np.nanmean(nonrelated_intrusions_pows[i],axis=1)\n",
    "    nonrelated_intrusion_time_avg = np.nanmean(nonrelated_intrusion_trial_avg[:,pre_verbalization_window:verbalization_start],axis=1)\n",
    "    nonrelated_intrusion_time_pow.append(nonrelated_intrusion_trial_avg)\n",
    "    #assert any(np.isnan(intrusion_pow))==False,('subject %d has nan values') %i\n",
    "    nonrelated_intrusion_pow.append(nonrelated_intrusion_time_avg)\n",
    "\n",
    "    related_intrusion_trial_avg=np.nanmean(related_intrusions_pows[i],axis=1)\n",
    "    related_intrusion_time_avg = np.nanmean(related_intrusion_trial_avg[:,pre_verbalization_window:verbalization_start],axis=1)\n",
    "    related_intrusion_time_pow.append(related_intrusion_time_avg)\n",
    "    #assert any(np.isnan(intrusion_pow))==False,('subject %d has nan values') %i\n",
    "    related_intrusion_pow.append(related_intrusion_time_avg)\n",
    "\n",
    "    deliberation_trial_avg=np.nanmean(deliberation_hipp_pows[i],axis=1)\n",
    "    deliberation_time_avg = np.mean(deliberation_trial_avg[:,deliberation_start_window:deliberation_end_window],axis=1)\n",
    "    deliberation_time_pow.append(deliberation_trial_avg)\n",
    "    deliberation_pow.append(deliberation_time_avg)\n",
    "#standard errors:\n",
    "correct_recall_group_sem=scipy.stats.sem(correct_recall_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "nonrelated_intrusions_group_sem=scipy.stats.sem(nonrelated_intrusion_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "related_intrusions_group_sem=scipy.stats.sem(related_intrusion_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "deliberation_group_sem=scipy.stats.sem(deliberation_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "# means:\n",
    "correct_recall_group_avg=np.nanmean(correct_recall_pow,axis=0)\n",
    "nonrelated_intrusions_group_avg=np.nanmean(nonrelated_intrusion_pow,axis=0)\n",
    "related_intrusions_group_avg=np.nanmean(related_intrusion_pow,axis=0)\n",
    "deliberation_group_avg=np.mean(deliberation_pow,axis=0)\n",
    "\n",
    "print('number of sessions:', len(deliberation_pow))\n",
    "fig=plt.figure(figsize=(5,4.5));#ax=plt.subplot(121)\n",
    "plt.plot(myfreqs,correct_recall_group_avg,linewidth=2,color=colors[0])\n",
    "plt.fill_between(myfreqs,correct_recall_group_avg-correct_recall_group_sem,correct_recall_group_avg+correct_recall_group_sem,color=colors[0],alpha=0.4)\n",
    "plt.plot(myfreqs,related_intrusions_group_avg,linewidth=2,color=colors[1])\n",
    "plt.fill_between(myfreqs,related_intrusions_group_avg-related_intrusions_group_sem,related_intrusions_group_avg+related_intrusions_group_sem,color=colors[1],alpha=0.4)\n",
    "plt.plot(myfreqs,nonrelated_intrusions_group_avg,linewidth=2,color=colors[2])\n",
    "plt.fill_between(myfreqs,nonrelated_intrusions_group_avg-nonrelated_intrusions_group_sem,nonrelated_intrusions_group_avg+nonrelated_intrusions_group_sem,color=colors[2],alpha=0.4)\n",
    "plt.plot(myfreqs,deliberation_group_avg,linewidth=2,color=colors[3])\n",
    "plt.fill_between(myfreqs,deliberation_group_avg-deliberation_group_sem,deliberation_group_avg+deliberation_group_sem,color=colors[3],alpha=0.4)\n",
    "\n",
    "#plt.title('Avergae PSD')\n",
    "plt.xlabel('Frequency (Hz)',fontsize=18)\n",
    "plt.ylabel('Log Power (z-score)',fontsize=18)\n",
    "plt.axhline(y=0,color='black',linewidth=1,linestyle='--')\n",
    "plt.legend(['C','S-I','NonS-I','D'],fontsize=14,frameon=False)#loc='upper left')\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(False)\n",
    "\n",
    "rect = plt.Rectangle((4,-0.15),18-4,0.14+0.141,linewidth=1.5,fill=True,alpha=0.4,facecolor='lightgrey', edgecolor='lightgrey')\n",
    "rect2 = plt.Rectangle((44,-0.15),100.5-44,0.141+0.14,linewidth=1.5,fill=True,alpha=0.4,facecolor='lightgrey', edgecolor='lightgrey')\n",
    "\n",
    "# # Add the patch to the Axes\n",
    "# plt.gca().add_patch(rect)\n",
    "# plt.gca().add_patch(rect2)\n",
    "\n",
    "# savefig('spectral_tilt',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n",
    "\n",
    "fig=plt.figure(figsize=(5,4.5));#ax=plt.subplot(122)\n",
    "plt.plot(np.log10(myfreqs),correct_recall_group_avg,linewidth=2,color=colors[0])\n",
    "plt.fill_between(np.log10(myfreqs),correct_recall_group_avg-correct_recall_group_sem,correct_recall_group_avg+correct_recall_group_sem,color=colors[0],alpha=0.4)\n",
    "plt.plot(np.log10(myfreqs),related_intrusions_group_avg,linewidth=2,color=colors[1])\n",
    "plt.fill_between(np.log10(myfreqs),related_intrusions_group_avg-related_intrusions_group_sem,related_intrusions_group_avg+related_intrusions_group_sem,color=colors[1],alpha=0.4)\n",
    "plt.plot(np.log10(myfreqs),nonrelated_intrusions_group_avg,linewidth=2,color=colors[2])\n",
    "plt.fill_between(np.log10(myfreqs),nonrelated_intrusions_group_avg-nonrelated_intrusions_group_sem,nonrelated_intrusions_group_avg+nonrelated_intrusions_group_sem,color=colors[2],alpha=0.4)\n",
    "\n",
    "\n",
    "frequencies= [int(freq) for freq in myfreqs[0:-1:8]]\n",
    "plt.xticks(np.log10(myfreqs[0:-1:8]),frequencies,fontsize=14)\n",
    "#plt.xticks([],np.round(myfreqs),fontsize=14)#\n",
    "#plt.title('Avergae PSD')\n",
    "plt.xlabel('Log Frequency (Hz)',fontsize=18)\n",
    "plt.ylabel('Log Power (z-score)',fontsize=18)\n",
    "plt.axhline(y=0,color='black',linewidth=1,linestyle='--')\n",
    "plt.legend(['C','S-I','NonS-I'],fontsize=13,frameon=False,loc='best')\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(False)\n",
    "\n",
    "savefig('spectral_tilt_log_sme_semantic_legend',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n",
    "# # ax = plt.gca()\n",
    "# # plt.imshow(im)\n",
    "# # Create a Rectangle patch\n",
    "# plt.axvline(x=8,color='r',linewidth=1,linestyle='--')\n",
    "# rect = plt.Rectangle((8,-0.075),18-4,1,linewidth=3,fill=True,edgecolor='k')\n",
    "\n",
    "# # # Add the patch to the Axes\n",
    "#ax.add_patch(rect)\n",
    "# plt.gca().add_patch(rect)\n",
    "# plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'deliberation_time_pow' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-30-2c5df56d1a0c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mdeliberation_trial_avg\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeliberation_hipp_pows\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mdeliberation_time_avg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeliberation_trial_avg\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdeliberation_start_window\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mdeliberation_end_window\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0mdeliberation_time_pow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeliberation_trial_avg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m     \u001b[0mdeliberation_pow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeliberation_time_avg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'deliberation_time_pow' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "for i in range(0,len(correct_recall_hipp_pows)):\n",
    "    try:\n",
    "        correct_recall_trial_avg=np.nanmean(correct_recall_hipp_pows[i],axis=1)\n",
    "        correct_recall_time_avg = np.mean(correct_recall_trial_avg[:,pre_verbalization_window:verbalization_start],axis=1)\n",
    "        correct_recall_time_pow.append(correct_recall_trial_avg)\n",
    "        correct_recall_pow.append(correct_recall_time_avg)\n",
    "    except:\n",
    "        pass\n",
    "    try:\n",
    "        nonrelated_intrusion_trial_avg=np.nanmean(nonrelated_intrusions_pows[i],axis=1)\n",
    "        nonrelated_intrusion_time_avg = np.nanmean(nonrelated_intrusion_trial_avg[:,pre_verbalization_window:verbalization_start],axis=1)\n",
    "        nonrelated_intrusion_time_pow.append(nonrelated_intrusion_trial_avg)\n",
    "        #assert any(np.isnan(intrusion_pow))==False,('subject %d has nan values') %i\n",
    "        nonrelated_intrusion_pow.append(nonrelated_intrusion_time_avg)\n",
    "    except:\n",
    "        pass\n",
    "#         print(i)\n",
    "    try:\n",
    "        related_intrusion_trial_avg=np.nanmean(related_intrusions_pows[i],axis=1)\n",
    "        related_intrusion_time_avg = np.nanmean(related_intrusion_trial_avg[:,pre_verbalization_window:verbalization_start],axis=1)\n",
    "        related_intrusion_time_pow.append(related_intrusion_time_avg)\n",
    "        #assert any(np.isnan(intrusion_pow))==False,('subject %d has nan values') %i\n",
    "        related_intrusion_pow.append(related_intrusion_time_pow)\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "    deliberation_trial_avg=np.nanmean(deliberation_hipp_pows[i],axis=1)\n",
    "    deliberation_time_avg = np.mean(deliberation_trial_avg[:,deliberation_start_window:deliberation_end_window],axis=1)\n",
    "    deliberation_time_pow.append(deliberation_trial_avg)\n",
    "    deliberation_pow.append(deliberation_time_avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'correct_recall_time_pow' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-31-5a168ddc0df3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmyfreqs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlogspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog10\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog10\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m46\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m#2-100 Hz, 46 frequencies\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcorrect_recall_time_pow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintrusion_time_pow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdeliberation_time_pow\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mdata_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Correct recall'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Intrusions'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Deliberation'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'correct_recall_time_pow' is not defined"
     ]
    }
   ],
   "source": [
    "# plot time frequency of each event\n",
    "%matplotlib inline\n",
    "\n",
    "myfreqs = np.logspace(np.log10(4), np.log10(100), 40)  #2-100 Hz, 46 frequencies\n",
    "data = [correct_recall_time_pow, intrusion_time_pow, deliberation_time_pow]\n",
    "data_names=['Correct recall', 'Intrusions','Deliberation']\n",
    "for i in range(0,len(data)):\n",
    "    fig=figure(figsize=(15, 11)); ax1=subplot(3,2,i+1)\n",
    "    matshow(np.nanmean(np.array(data[i]),axis=0),fignum=0, aspect='auto',cmap='RdBu_r',vmin=-0.2,vmax=0.15)#,vmin=-0.15,vmax=1.15)\n",
    "    ax1.invert_yaxis()\n",
    "    ax1.xaxis.set_ticks_position('bottom')\n",
    "    yticks(np.arange(0, len(myfreqs),4),np.round(myfreqs[::4]),fontsize=12)\n",
    "    xticks(np.arange(0, len(correct_recall_hipp_pows[0][0][0]),10),range(-4500,1000,500),fontsize=12,rotation='45')\n",
    "    xlabel('Time (ms)', fontsize=16); ylabel('Frequency (Hz)', fontsize=16)\n",
    "    ax1.xaxis.labelpad=10;ax1.yaxis.labelpad=10\n",
    "    cb = colorbar(); cb.set_label('Log power (z-score)',fontsize=16)\n",
    "    plt.title(data_names[i],fontsize=20,pad=5)\n",
    "    verbalization_start = convertMstoWindowNumber(0,-4500,1000,100,50)\n",
    "    pre_verbalization_window = convertMstoWindowNumber(-500,-4500,1000,100,50)\n",
    "    plt.axvline(x=verbalization_start,color='black') #time_window_number\n",
    "    if i<2:\n",
    "        plt.axvline(x=pre_verbalization_window,color='grey') #time_window_number\n",
    "    elif i==2:\n",
    "        deliberation_start_window = convertMstoWindowNumber(-3000,-4500,1000,100,50)\n",
    "        deliberation_end_window = convertMstoWindowNumber(-2500,-4500,1000,100,50)\n",
    "        plt.axvline(x=deliberation_start_window,color='grey') #time_window_number\n",
    "        plt.axvline(x=deliberation_end_window,color='grey') #time_window_number\n",
    "    tight_layout()\n",
    "#     savefig(data_names[i],transparent=True,bbox_inches='tight', pad_inches=0.08)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/ipykernel_launcher.py:26: RuntimeWarning: Mean of empty slice\n"
     ]
    }
   ],
   "source": [
    "# time line of spectral tilt\n",
    "myfreqs = np.logspace(np.log10(2), np.log10(100), 46)  #2-100 Hz, 46 frequencies\n",
    "\n",
    "# average over frequencies:\n",
    "HFA_index=np.where((myfreqs>=44) & (myfreqs<=100))[0] # similar to Long et al.\n",
    "LFA_index=np.where((myfreqs>=4) & (myfreqs<=18))[0]# I combined the theta 4–8 Hz, alpha 8–12 Hz and beta 12-18 Hz ranges. \n",
    "\n",
    "correct_recall_tilt_pow=[]\n",
    "intrusion_tilt_pow=[]\n",
    "deliberation_tilt_pow=[]\n",
    "\n",
    "correct_recall_HFA_pow=[]\n",
    "correct_recall_LFA_pow=[]\n",
    "intrusion_HFA_pow=[]\n",
    "intrusion_LFA_pow=[]\n",
    "\n",
    "for i in range(0,len(correct_recall_hipp_pows)):\n",
    "    correct_recall_trial_avg=np.nanmean(correct_recall_hipp_pows[i],axis=1)\n",
    "    correct_recall_HFA_avg = np.mean(correct_recall_trial_avg[HFA_index,:],axis=0)\n",
    "    correct_recall_LFA_avg = np.mean(correct_recall_trial_avg[LFA_index,:],axis=0)\n",
    "    correct_recall_tilt_avg = correct_recall_HFA_avg - correct_recall_LFA_avg\n",
    "    correct_recall_tilt_pow.append(correct_recall_tilt_avg)  \n",
    "    correct_recall_HFA_pow.append(correct_recall_HFA_avg)  \n",
    "    correct_recall_LFA_pow.append(correct_recall_LFA_avg)  \n",
    "    \n",
    "    intrusion_trial_avg=np.nanmean(all_intrusions_hipp_pows[i],axis=1)\n",
    "    intrusion_HFA_avg = np.mean(intrusion_trial_avg[HFA_index,:],axis=0)\n",
    "    intrusion_LFA_avg = np.mean(intrusion_trial_avg[LFA_index,:],axis=0)\n",
    "    intrusion_tilt_avg = intrusion_HFA_avg - intrusion_LFA_avg\n",
    "    intrusion_tilt_pow.append(intrusion_tilt_avg)\n",
    "    intrusion_HFA_pow.append(intrusion_HFA_avg)\n",
    "    intrusion_LFA_pow.append(intrusion_LFA_avg)\n",
    "\n",
    "#  # tilt:   \n",
    "# correct_recall_group_sem=scipy.stats.sem(correct_recall_tilt_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "# intrusions_group_sem=scipy.stats.sem(intrusion_tilt_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "# correct_recall_group_avg=np.nanmean(correct_recall_tilt_pow,axis=0)\n",
    "# intrusions_group_avg=np.nanmean(intrusion_tilt_pow,axis=0)\n",
    "\n",
    "# LFA:   \n",
    "# correct_recall_group_sem=scipy.stats.sem(correct_recall_LFA_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "# intrusions_group_sem=scipy.stats.sem(intrusion_LFA_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "# correct_recall_group_avg=np.nanmean(correct_recall_LFA_pow,axis=0)\n",
    "# intrusions_group_avg=np.nanmean(intrusion_LFA_pow,axis=0)\n",
    "\n",
    "# # HFA:   \n",
    "correct_recall_group_sem=scipy.stats.sem(correct_recall_HFA_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "intrusions_group_sem=scipy.stats.sem(intrusion_HFA_pow,axis=0,ddof=1,nan_policy='omit')\n",
    "correct_recall_group_avg=np.nanmean(correct_recall_HFA_pow,axis=0)\n",
    "intrusions_group_avg=np.nanmean(intrusion_HFA_pow,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "109"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# statistics\n",
    "\n",
    "# limit the time window (# compare correct recalls and intrusions at each time bin after -2500)\n",
    "# time_start_window = convertMstoWindowNumber(-2500,-4500,1000,100,50)\n",
    "time_end_window = convertMstoWindowNumber(1000,-4500,1000,100,50)\n",
    "# Or use the whole time window\n",
    "time_start_window = convertMstoWindowNumber(-4500,-4500,1000,100,50)\n",
    "\n",
    "correct_recall_tilt_pow_new=[]\n",
    "intrusion_tilt_pow_new=[]\n",
    "for sub in range(0,len(correct_recall_tilt_pow)):\n",
    "    correct_recall_tilt_pow_new.append(correct_recall_tilt_pow[sub][time_start_window:]) # time_end_window\n",
    "    intrusion_tilt_pow_new.append(intrusion_tilt_pow[sub][time_start_window:]) # time_end_window\n",
    "\n",
    "statistic, pvalue = stats.ttest_rel(correct_recall_tilt_pow_new, intrusion_tilt_pow_new, nan_policy='omit')\n",
    "len(pvalue)\n",
    "# pvalue<0.05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of sessions: 255\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'colors' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-34-a0ae528a7542>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'number of sessions:'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintrusion_tilt_pow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;31m#ax=plt.subplot(121)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcorrect_recall_hipp_pows\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcorrect_recall_group_avg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill_between\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcorrect_recall_hipp_pows\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcorrect_recall_group_avg\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mcorrect_recall_group_sem\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcorrect_recall_group_avg\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mcorrect_recall_group_sem\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcorrect_recall_hipp_pows\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mintrusions_group_avg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'colors' is not defined"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 360x324 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot\n",
    "print('number of sessions:', len(intrusion_tilt_pow))\n",
    "fig=plt.figure(figsize=(5,4.5));#ax=plt.subplot(121)\n",
    "plt.plot(range(0,correct_recall_hipp_pows[0].shape[2]),correct_recall_group_avg,linewidth=2,color=colors[0])\n",
    "plt.fill_between(range(0,correct_recall_hipp_pows[0].shape[2]),correct_recall_group_avg-correct_recall_group_sem,correct_recall_group_avg+correct_recall_group_sem,color=colors[0],alpha=0.2)\n",
    "plt.plot(range(0,correct_recall_hipp_pows[0].shape[2]),intrusions_group_avg,linewidth=2,color=colors[1])\n",
    "plt.fill_between(range(0,correct_recall_hipp_pows[0].shape[2]),intrusions_group_avg-intrusions_group_sem,intrusions_group_avg+intrusions_group_sem,color=colors[1],alpha=0.2)\n",
    "#plt.title('Avergae PSD')\n",
    "#plt.xlabel('time (bins)',fontsize=18)\n",
    "#plt.axvline(y=0,color='black',linewidth=1,linestyle='--')\n",
    "plt.legend(['Correct-recall','Intrusion'],fontsize=14,frameon=False,loc='upper left')\n",
    "plt.axvline(x=verbalization_start,color='black')\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(b=None)\n",
    "\n",
    "#time_window_number\n",
    "#plt.axhline(y=0,color='black',linewidth=1,linestyle='--') #time_window_number\n",
    "\n",
    "# t-stats\n",
    "x_vals=np.array(pvalue<0.05)*1*range(0,correct_recall_tilt_pow_new[0].shape[0])\n",
    "x_vals=x_vals[x_vals!=0]\n",
    "x_vals=x_vals+time_start_window # added to remove initial 2500ms\n",
    "# plt.plot(x_vals,-0.10*ones(len(x_vals)), 'r.')\n",
    "\n",
    "# FDR correction\n",
    "# see also https://matthew-brett.github.io/teaching/fdr.html for a good example (adapted here)\n",
    "pvalue_sorted = np.sort(pvalue)\n",
    "q = 0.05\n",
    "N = len(pvalue_sorted)\n",
    "i = np.arange(1, N+1)\n",
    "below = pvalue_sorted < (q * i / N) # True where p(i)<qi/N\n",
    "if any(any(pvalue_sorted < (q * i / N))):\n",
    "    max_below = np.max(np.where(below)[0]) # Max Python array index where p(i)<qi/N\n",
    "    fdr_p = pvalue_sorted[max_below]\n",
    "\n",
    "    print('p_i (FDR corrected threshold):', fdr_p)\n",
    "\n",
    "    x_vals=np.array(pvalue<fdr_p)*1*range(0,correct_recall_tilt_pow_new[0].shape[0])\n",
    "    x_vals=x_vals[x_vals!=0]\n",
    "    x_vals=x_vals+time_start_window # added to remove initial 2500ms\n",
    "#     plt.plot(x_vals,-0.11*ones(len(x_vals)), 'b.')\n",
    "\n",
    "    ms_to_windows_df=ms2WindowNumber(-4500,1000,100,50)\n",
    "    for p in x_vals:\n",
    "        time=ms_to_windows_df[ms_to_windows_df['time window number']==p]['ms (start,end)']\n",
    "        print('significant time points after FDR correction: window, time(ms)',time)\n",
    "\n",
    "xticks(np.arange(0, len(correct_recall_hipp_pows[0][0][0]),10),range(-4500,1000,500),fontsize=12,rotation='45')\n",
    "xlabel('Time (ms)', fontsize=16); \n",
    "# ylabel('Spectral tilt (power)', fontsize=16)\n",
    "ylabel('HFA', fontsize=16)\n",
    "\n",
    "plt.grid(False)\n",
    "# savefig('time_line_spectral_tilt',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Cluster permutation test\n",
    "# https://benediktehinger.de/blog/science/statistics-cluster-permutation-test/\n",
    "\n",
    "# the output is the sum of the t-values in each cluster of significant t-values.\n",
    "# The real cluster mass should be compared to the distribution of permuted cluster mass values.\n",
    "def cluster_mass(statistic,t_critic):\n",
    "    # mask=np.logical_or(t_statistic>t_critic,t_statistic<(-1*t_critic))\n",
    "    mask_positive=statistic>t_critic\n",
    "    mask_negative=statistic<(-1*t_critic)\n",
    "\n",
    "    # As a statistic we could use the number of samples the cluster extends, the summed t-value etc. \n",
    "    # I use cluster-mass, which is the sum of the t-values.\n",
    "    sum_t=0\n",
    "    cluster_mass=[]\n",
    "    mask=[mask_positive,mask_negative]\n",
    "    for i in range(0,len(mask)):\n",
    "        for ind,value in enumerate(mask[i]):\n",
    "            if value==True:\n",
    "                sum_t=sum_t+statistic[ind]\n",
    "            elif value==False:\n",
    "                cluster_mass.extend([sum_t])\n",
    "                sum_t=0\n",
    "    cluster_mass=np.array(cluster_mass)[np.array(cluster_mass)!=0]\n",
    "    return cluster_mass,mask_positive,mask_negative  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4.32284113,  2.05683962,  7.59711735,  2.15864415,  2.05149141,\n",
       "        2.03202873,  7.13205487,  2.0591548 ,  2.32052535,  2.16308782,\n",
       "       -7.53717627, -1.9834969 , -2.04142857])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Real cluster mass:\n",
    "\n",
    "# diff=np.array(correct_recall_HFA_pow) - np.array(intrusion_HFA_pow)\n",
    "df=len(correct_recall_HFA_pow)-1\n",
    "alpha=0.05\n",
    "t_critic=abs(scipy.stats.t.ppf(alpha/2, df)) # two-tailed (extract the positive critic t-value)\n",
    "statistic, pvalue = stats.ttest_rel(correct_recall_HFA_pow, intrusion_HFA_pow, nan_policy='omit')\n",
    "\n",
    "real_cluster_mass,mask_positive,mask_negative =cluster_mass(statistic,t_critic)\n",
    "real_cluster_mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'>' not supported between instances of 'tuple' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-fb45079398d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mperm_cluster_mass\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mcluster_mass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshuffled_stats\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mt_critic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mperm_cluster_mass_positive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperm_cluster_mass\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mperm_cluster_mass\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0mperm_cluster_mass_nagative\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperm_cluster_mass\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mperm_cluster_mass\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: '>' not supported between instances of 'tuple' and 'int'"
     ]
    }
   ],
   "source": [
    "# permutation test (randomize labels)\n",
    "perm_cluster_mass_positive = []\n",
    "perm_cluster_mass_nagative = []\n",
    "\n",
    "for iterations in range(0,1000): # set number of iterations\n",
    "    rand_labels=np.random.randint(2, size=len(statistic)) # randomize conditions' label\n",
    "    shuffled_stats=np.empty(len(statistic))\n",
    "    shuffled_stats.fill(np.nan)\n",
    "    shuffled_stats[rand_labels==0]=statistic[rand_labels==0]*-1\n",
    "    shuffled_stats[rand_labels==1]=statistic[rand_labels==1]\n",
    "    shuffled_stats\n",
    "\n",
    "    perm_cluster_mass =cluster_mass(shuffled_stats,t_critic)\n",
    "    perm_cluster_mass_positive.append(perm_cluster_mass[perm_cluster_mass>0])\n",
    "    perm_cluster_mass_nagative.append(perm_cluster_mass[perm_cluster_mass<0])\n",
    "\n",
    " # plot a histogram of permutations results\n",
    "neg_cluster_mass = []\n",
    "pos_cluster_mass = []\n",
    "for permutation_num in range(0,len(perm_cluster_mass_nagative)):\n",
    "    neg_cluster_mass.append(np.min(perm_cluster_mass_nagative[permutation_num]))\n",
    "    pos_cluster_mass.append(np.max(perm_cluster_mass_positive[permutation_num]))\n",
    "\n",
    "a=plt.hist(neg_cluster_mass,bins=50, histtype='stepfilled')\n",
    "a=plt.hist(pos_cluster_mass,bins=50, histtype='stepfilled')\n",
    "\n",
    "# Check whether our real cluster mass is greater than 95% of what we would expect by chance:\n",
    "percentile_neg=np.percentile(neg_cluster_mass,5)\n",
    "percentile_pos=np.percentile(pos_cluster_mass,95)\n",
    "\n",
    "plt.axvline(percentile_neg,color='k',linestyle='--')\n",
    "plt.axvline(percentile_pos,color='k',linestyle='--')\n",
    "\n",
    "real_cluster_mass[real_cluster_mass>=percentile_pos]\n",
    "real_cluster_mass[real_cluster_mass<=percentile_neg]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 2.29861213,  7.53717627,  1.9834969 ,  2.15864415,  2.06034933,\n",
       "         2.32052535, -4.32284113, -2.05683962, -5.29850522, -2.04142857,\n",
       "        -2.05149141, -2.03202873, -5.07170554, -2.0591548 , -2.16308782]),\n",
       " array([False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False,  True, False, False, False,\n",
       "        False,  True,  True,  True, False, False, False, False, False,\n",
       "        False, False, False,  True, False, False, False, False, False,\n",
       "        False, False, False,  True, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "         True, False, False, False, False, False, False, False,  True,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False]),\n",
       " array([False, False, False, False,  True,  True, False, False, False,\n",
       "         True, False, False,  True,  True, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False,  True, False, False,\n",
       "        False, False, False, False, False, False,  True, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False,  True, False, False,\n",
       "        False, False, False, False, False, False, False,  True,  True,\n",
       "        False, False,  True, False, False, False, False, False, False,\n",
       "        False, False,  True, False, False, False, False, False, False,\n",
       "        False, False, False, False, False, False, False, False, False,\n",
       "        False]))"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perm_cluster_mass =cluster_mass(shuffled_stats,t_critic)\n",
    "perm_cluster_mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def significant_clusters(statistic,t_critic,percentile_neg,percentile_pos,):\n",
    "    # mask=np.logical_or(t_statistic>t_critic,t_statistic<(-1*t_critic))\n",
    "    mask_positive=statistic>t_critic\n",
    "    mask_negative=statistic<(-1*t_critic)\n",
    "\n",
    "    # As a statistic we could use the number of samples the cluster extends, the summed t-value etc. \n",
    "    # I use cluster-mass, which is the sum of the t-values.\n",
    "    sum_t=0\n",
    "    cluster_mass=[]\n",
    "    mask=[mask_positive,mask_negative]\n",
    "    sig_pos_index=[]\n",
    "    sig_neg_index=[]\n",
    "    for i in range(0,len(mask)):\n",
    "        for ind,value in enumerate(mask[i]):\n",
    "            if value==True:\n",
    "                sum_t=sum_t+statistic[ind]\n",
    "                if i==0 and sum_t>=percentile_pos:\n",
    "                    sig_pos_index.append(ind)\n",
    "                elif i==1 and sum_t<=percentile_neg:\n",
    "                    sig_neg_index.append(ind)\n",
    "            elif value==False:\n",
    "                cluster_mass.extend([sum_t])\n",
    "                sum_t=0\n",
    "    return sig_pos_index,sig_neg_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mask_positive' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-ed43138ef23c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0mmask_positive\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig_pos_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0msig_ind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mind\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig_pos_index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#     print(ind)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mmask_positive\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'mask_positive' is not defined"
     ]
    }
   ],
   "source": [
    "assert mask_positive[np.array(sig_pos_index)+1]==False\n",
    "sig_ind=[]\n",
    "for ind in range(np.array(int(sig_pos_index[0])),0,-1):\n",
    "#     print(ind)\n",
    "    while mask_positive[ind]==True:\n",
    "        sig_ind.append(ind)\n",
    "        if ind ==0:\n",
    "            break\n",
    "sig_ind"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare spectral tilt strength between regions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# choose path:\n",
    "# path= '/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/'\n",
    "path= '/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/'\n",
    "\n",
    "# load ROI data\n",
    "ROI_list=['hippocampus_john','phg_john','dlpfc'] # choose ROIs\n",
    "roi_avg_spectral_tilt_diff =[]\n",
    "roi_ste_spectral_tilt_diff =[]\n",
    "trial_level_tilt=[]\n",
    "for roi in ROI_list:\n",
    "    os.chdir(path+roi)\n",
    "    with open('long_df','rb') as pickle_file:\n",
    "        long_df=pickle.load(pickle_file)\n",
    "\n",
    "    tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(long_df)\n",
    "\n",
    "    temp_tilt_diff=[]\n",
    "    for sub in tilt_diff['subject'].unique():\n",
    "        sub_data=tilt_diff[tilt_diff['subject']==sub]\n",
    "        temp_tilt_diff.append(np.mean(sub_data['tilt_strength']))\n",
    "    roi_avg_spectral_tilt_diff.append(np.mean(temp_tilt_diff))\n",
    "    roi_ste_spectral_tilt_diff.append(np.std(temp_tilt_diff)/sqrt(len(temp_tilt_diff)-sum(np.isnan(temp_tilt_diff))))\n",
    "    trial_level_tilt.append(temp_tilt_diff)\n",
    "\n",
    "# plot\n",
    "error = [roi_ste_spectral_tilt_diff[0],roi_ste_spectral_tilt_diff[1],roi_ste_spectral_tilt_diff[2]]\n",
    "fig=plt.figure()\n",
    "h=plt.bar([0,1,2],[roi_avg_spectral_tilt_diff[0],roi_avg_spectral_tilt_diff[1],roi_avg_spectral_tilt_diff[2]],yerr=error,width=0.6,edgecolor='black')\n",
    "# if\n",
    "colors=['#1e9167', (0.445163, 0.122724, 0.506901)]\n",
    "if path=='/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/':\n",
    "    chosen_color=colors[0]\n",
    "elif path=='/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/':\n",
    "    chosen_color=colors[1]\n",
    "h[0].set_color(chosen_color)#('k')\n",
    "h[1].set_color(chosen_color)#('grey')\n",
    "h[2].set_color(chosen_color)#('grey')\n",
    "h[0].set_edgecolor(chosen_color)\n",
    "h[1].set_edgecolor(chosen_color)\n",
    "h[2].set_edgecolor(chosen_color)\n",
    "plt.xticks([0,1,2],['HC','PHG','DLPFC'],fontsize=22, rotation=0)\n",
    "plt.yticks(fontsize=18)\n",
    "plt.ylabel('Spectral tilt difference',fontsize=22); #plt.ylim((-0.2, 0.3))\n",
    "plt.axhline(y=0,color='gray',linewidth=1)\n",
    "plt.gca().spines['right'].set_color('none')\n",
    "plt.gca().spines['left'].set_color('k')\n",
    "plt.gca().spines['top'].set_color('none')\n",
    "plt.gca().spines['bottom'].set_color('k')\n",
    "plt.grid(False)\n",
    "\n",
    "savefig('average_spectral_tilt_strength',transparent=True,bbox_inches='tight', pad_inches=0.08)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HC</th>\n",
       "      <th>PHG</th>\n",
       "      <th>DLPFC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.052774</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.287670</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.226276</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.014034</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.206111</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.012267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.254277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.147533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.330993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.007576</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>417 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           HC  PHG     DLPFC\n",
       "0   -0.052774  NaN       NaN\n",
       "1    0.287670  NaN       NaN\n",
       "2   -0.226276  NaN       NaN\n",
       "3    0.014034  NaN       NaN\n",
       "4    0.206111  NaN       NaN\n",
       "..        ...  ...       ...\n",
       "190       NaN  NaN  0.012267\n",
       "191       NaN  NaN  0.254277\n",
       "192       NaN  NaN  0.147533\n",
       "193       NaN  NaN  0.330993\n",
       "194       NaN  NaN  0.007576\n",
       "\n",
       "[417 rows x 3 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hipp_df=pd.DataFrame(trial_level_tilt[0],columns=['HC'])\n",
    "phg_df=pd.DataFrame(trial_level_tilt[1],columns=['PHG'])\n",
    "dlpfc_df=pd.DataFrame(trial_level_tilt[2],columns=['DLPFC'])\n",
    "\n",
    "combined_df=pd.concat([hipp_df,phg_df,dlpfc_df])\n",
    "combined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'hipp_tilt_diff' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-45-a9cea2c6928a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# independent t-test between regions:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mtstatistic\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpvalue\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mttest_ind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhipp_tilt_diff\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mphg_tilt_diff\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnan_policy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'omit'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhipp_tilt_diff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphg_tilt_diff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m't-value: %.3f'\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0mtstatistic\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' df: %1.f'\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0mdf\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m' p-value: %.5f'\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0mpvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hipp_tilt_diff' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# \n",
    "sns.set(style=\"whitegrid\")\n",
    "ax=sns.barplot(data=combined_df,color=chosen_color,ci=68,capsize=0.1)\n",
    "\n",
    "# sns.swarmplot(data=combined_df,color=\"0\",alpha=.4)\n",
    "plt.ylabel('Spectral tilt difference',fontsize=18)\n",
    "plt.xticks(fontsize=18)\n",
    "\n",
    "# independent t-test between regions:\n",
    "tstatistic, pvalue= scipy.stats.ttest_ind(hipp_tilt_diff,phg_tilt_diff,nan_policy='omit')\n",
    "df=(len(hipp_tilt_diff)+len(phg_tilt_diff))-2\n",
    "print('t-value: %.3f' %tstatistic + ' df: %1.f' %df +' p-value: %.5f' %pvalue)\n",
    "plt.title('t(%.f)' %df + '=%.3f' %tstatistic +', p= %.3f' %pvalue,fontsize=14)\n",
    "\n",
    "os.chdir(path)\n",
    "\n",
    "# savefig('regions_spectral_tilt_difference1',transparent=True,bbox_inches='tight', pad_inches=0.08)\n",
    "# savefig('regions_spectral_tilt_difference_swarm',transparent=True,bbox_inches='tight', pad_inches=0.08)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1080,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t-value: 0.437 df: 220 p-value: 0.66285\n"
     ]
    }
   ],
   "source": [
    "# # independent t-test between regions:\n",
    "# tstatistic, pvalue= scipy.stats.ttest_ind(hipp_tilt_diff,phg_tilt_diff,nan_policy='omit')\n",
    "# df=(len(hipp_spectral_tilt_diff)+len(phg_spectral_tilt_diff))-2\n",
    "# print('t-value: %.3f' %tstatistic + ' df: %1.f' %df +' p-value: %.5f' %pvalue)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=0.17353367520710156, pvalue=0.8407499592273255)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# One way ANOVA between regions:\n",
    "from scipy.stats import f_oneway\n",
    "\n",
    "f_oneway(trial_level_tilt[0],trial_level_tilt[1],trial_level_tilt[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>session</th>\n",
       "      <th>subject</th>\n",
       "      <th>tilt_strength</th>\n",
       "      <th>region</th>\n",
       "      <th>experiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>0.024692</td>\n",
       "      <td>HC</td>\n",
       "      <td>FR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>R1001P</td>\n",
       "      <td>-0.130241</td>\n",
       "      <td>HC</td>\n",
       "      <td>FR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>R1002P</td>\n",
       "      <td>0.133414</td>\n",
       "      <td>HC</td>\n",
       "      <td>FR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>R1002P</td>\n",
       "      <td>0.441927</td>\n",
       "      <td>HC</td>\n",
       "      <td>FR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>R1003P</td>\n",
       "      <td>-0.169905</td>\n",
       "      <td>HC</td>\n",
       "      <td>FR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>1.0</td>\n",
       "      <td>R1536J</td>\n",
       "      <td>0.181438</td>\n",
       "      <td>PHG</td>\n",
       "      <td>catFR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>2.0</td>\n",
       "      <td>R1536J</td>\n",
       "      <td>0.115040</td>\n",
       "      <td>PHG</td>\n",
       "      <td>catFR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>3.0</td>\n",
       "      <td>R1536J</td>\n",
       "      <td>-0.597495</td>\n",
       "      <td>PHG</td>\n",
       "      <td>catFR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>0.0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>0.169815</td>\n",
       "      <td>PHG</td>\n",
       "      <td>catFR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>1.0</td>\n",
       "      <td>R1542J</td>\n",
       "      <td>0.125059</td>\n",
       "      <td>PHG</td>\n",
       "      <td>catFR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1350 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     session subject  tilt_strength region experiment\n",
       "0        0.0  R1001P       0.024692     HC         FR\n",
       "1        1.0  R1001P      -0.130241     HC         FR\n",
       "2        0.0  R1002P       0.133414     HC         FR\n",
       "3        1.0  R1002P       0.441927     HC         FR\n",
       "4        0.0  R1003P      -0.169905     HC         FR\n",
       "..       ...     ...            ...    ...        ...\n",
       "235      1.0  R1536J       0.181438    PHG      catFR\n",
       "236      2.0  R1536J       0.115040    PHG      catFR\n",
       "237      3.0  R1536J      -0.597495    PHG      catFR\n",
       "238      0.0  R1542J       0.169815    PHG      catFR\n",
       "239      1.0  R1542J       0.125059    PHG      catFR\n",
       "\n",
       "[1350 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Region and experiement as independent variables\n",
    "\n",
    "# fr\n",
    "path= '/home1/noaherz/Long2017/FR1_replication_results/trial_level/FR/'\n",
    "\n",
    "# load hippocampus data\n",
    "os.chdir(path+'hippocampus_john')\n",
    "with open('long_df','rb') as pickle_file:\n",
    "    hipp_long_df=pickle.load(pickle_file)\n",
    "\n",
    "HC_tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(hipp_long_df)\n",
    "HC_tilt_diff['region']='HC'\n",
    "\n",
    "# load PHG data\n",
    "os.chdir(path+'phg_john')\n",
    "with open('long_df','rb') as pickle_file:\n",
    "    phg_long_df=pickle.load(pickle_file)\n",
    "\n",
    "PHG_tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(phg_long_df)\n",
    "PHG_tilt_diff['region']='PHG'\n",
    "\n",
    "# load DLPFC data\n",
    "os.chdir(path+'dlpfc')\n",
    "with open('long_df','rb') as pickle_file:\n",
    "    dlpfc_long_df=pickle.load(pickle_file)\n",
    "\n",
    "dlpfc_tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(dlpfc_long_df)\n",
    "dlpfc_tilt_diff['region']='dlpfc'\n",
    "\n",
    "\n",
    "# FR_combined=pd.merge(left=HC_tilt_diff,right=PHG_tilt_diff,how='outer',left_on=['subject','session'],right_on=['subject','session'],suffixes=('_HC', '_PHG'))\n",
    "FR_combined=pd.concat([HC_tilt_diff,PHG_tilt_diff,dlpfc_tilt_diff])\n",
    "FR_combined['experiment']='FR'\n",
    "\n",
    "\n",
    "path= '/home1/noaherz/Long2017/FR1_replication_results/trial_level/catFR1/'\n",
    "\n",
    "# load hippocampus data\n",
    "os.chdir(path+'hippocampus_john')\n",
    "with open('long_df','rb') as pickle_file:\n",
    "    hipp_long_df=pickle.load(pickle_file)\n",
    "HC_tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(hipp_long_df)\n",
    "HC_tilt_diff['region']='HC'\n",
    "\n",
    "\n",
    "# load PHG data\n",
    "os.chdir(path+'phg_john')\n",
    "with open('long_df','rb') as pickle_file:\n",
    "    phg_long_df=pickle.load(pickle_file)\n",
    "PHG_tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(phg_long_df)\n",
    "PHG_tilt_diff['region']='PHG'\n",
    "\n",
    "# load DLPFC data\n",
    "os.chdir(path+'dlpfc')\n",
    "with open('long_df','rb') as pickle_file:\n",
    "    dlpfc_long_df=pickle.load(pickle_file)\n",
    "\n",
    "dlpfc_tilt_diff,correct_recall_mean_tilt,intrusion_mean_tilt,deliberation_mean_tilt,PLI_mean_tilt,ELI_mean_tilt=average_tilt(dlpfc_long_df)\n",
    "dlpfc_tilt_diff['region']='dlpfc'\n",
    "\n",
    "\n",
    "catFR_combined=pd.concat([HC_tilt_diff,PHG_tilt_diff])\n",
    "catFR_combined['experiment']='catFR'\n",
    "\n",
    "combined_data=pd.concat([FR_combined,catFR_combined])#,suffixes=('_catFR_HC', '_catFR_PHG'))\n",
    "combined_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1279"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optional: Drop rows without semantic similarity values\n",
    "combined_data_new=combined_data.dropna(axis=0,subset=['tilt_strength'])\n",
    "len(combined_data_new)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check if brain region predicts spectral-tilt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Mixed Linear Model Regression Results\n",
      "===========================================================\n",
      "Model:            MixedLM Dependent Variable: tilt_strength\n",
      "No. Observations: 1279    Method:             ML           \n",
      "No. Groups:       279     Scale:              0.0577       \n",
      "Min. group size:  1       Log-Likelihood:     -31.2516     \n",
      "Max. group size:  24      Converged:          Yes          \n",
      "Mean group size:  4.6                                      \n",
      "------------------------------------------------------------\n",
      "               Coef.  Std.Err.    z    P>|z|  [0.025  0.975]\n",
      "------------------------------------------------------------\n",
      "Intercept      0.054     0.008  6.500  0.000   0.037   0.070\n",
      "subject Var    0.005     0.008                              \n",
      "===========================================================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Mixed Linear Model Regression Results\n",
      "=============================================================\n",
      "Model:              MixedLM Dependent Variable: tilt_strength\n",
      "No. Observations:   1279    Method:             ML           \n",
      "No. Groups:         279     Scale:              0.0575       \n",
      "Min. group size:    1       Log-Likelihood:     -29.9547     \n",
      "Max. group size:    24      Converged:          Yes          \n",
      "Mean group size:    4.6                                      \n",
      "-------------------------------------------------------------\n",
      "                   Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-------------------------------------------------------------\n",
      "Intercept           0.073    0.015  4.968 0.000  0.044  0.101\n",
      "C(region)[T.PHG]   -0.027    0.018 -1.551 0.121 -0.062  0.007\n",
      "C(region)[T.dlpfc] -0.023    0.018 -1.254 0.210 -0.058  0.013\n",
      "subject Var         0.005    0.008                           \n",
      "=============================================================\n",
      "\n",
      "Main effect of region\n",
      "LR test, p value: 2.5936, 0.27340253\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Mixed Linear Model Regression Results\n",
      "===============================================================\n",
      "Model:              MixedLM  Dependent Variable:  tilt_strength\n",
      "No. Observations:   1279     Method:              ML           \n",
      "No. Groups:         279      Scale:               0.0577       \n",
      "Min. group size:    1        Log-Likelihood:      -31.0036     \n",
      "Max. group size:    24       Converged:           Yes          \n",
      "Mean group size:    4.6                                        \n",
      "---------------------------------------------------------------\n",
      "                       Coef. Std.Err.   z   P>|z| [0.025 0.975]\n",
      "---------------------------------------------------------------\n",
      "Intercept              0.051    0.009 5.428 0.000  0.032  0.069\n",
      "C(experiment)[T.catFR] 0.012    0.017 0.705 0.481 -0.022  0.046\n",
      "subject Var            0.005    0.008                          \n",
      "===============================================================\n",
      "\n",
      "Main effect of experiment\n",
      "LR test, p value: 0.4959, 0.48132269\n",
      "              Mixed Linear Model Regression Results\n",
      "=================================================================\n",
      "Model:              MixedLM   Dependent Variable:   tilt_strength\n",
      "No. Observations:   1279      Method:               ML           \n",
      "No. Groups:         279       Scale:                0.0576       \n",
      "Min. group size:    1         Log-Likelihood:       -29.6102     \n",
      "Max. group size:    24        Converged:            Yes          \n",
      "Mean group size:    4.6                                          \n",
      "-----------------------------------------------------------------\n",
      "                       Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------------\n",
      "Intercept               0.068    0.016  4.358 0.000  0.037  0.099\n",
      "C(region)[T.PHG]       -0.030    0.018 -1.662 0.097 -0.065  0.005\n",
      "C(region)[T.dlpfc]     -0.019    0.019 -0.994 0.320 -0.055  0.018\n",
      "C(experiment)[T.catFR]  0.016    0.019  0.831 0.406 -0.022  0.053\n",
      "subject Var             0.005    0.008                           \n",
      "=================================================================\n",
      "\n",
      "region x experiment\n",
      "LR test, p value: 2.7869, 0.24821306\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# Set up model with main effects only; look at summary table to assess direction of effects; \n",
    "# get likelihood for likelihood ratio tests\n",
    "# from sklearn import linear_model\n",
    "# df are the number of rows that were added to the new model (e.g. if 2 rows were added, the df=2)\n",
    "\n",
    "# independent variables: region (HC/PHG), experiment(catFR/FR)\n",
    "# dependent variable: tilt strength (diff between correct recalls-intrusions)\n",
    "df_region = len(combined_data_new['region'].unique())-1\n",
    "\n",
    "# region main effect\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ 1', groups='subject', data=combined_data_new) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ C(region)', groups='subject', data=combined_data_new) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_region =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of region')\n",
    "lr, p = lrtest(llf_empty, llf_region, df = df_region) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))\n",
    "\n",
    "# experiment \n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ C(experiment)', groups='subject', data=combined_data_new) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_experiment =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of experiment')\n",
    "lr, p = lrtest(llf_empty, llf_experiment, df = 1) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))\n",
    "\n",
    "# add both region and experiment\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ C(region)+ C(experiment)', groups='subject', data=combined_data_new) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_full =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('region x experiment')\n",
    "lr, p = lrtest(llf_experiment, llf_full, df = df_region) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Mixed Linear Model Regression Results\n",
      "===========================================================\n",
      "Model:            MixedLM Dependent Variable: tilt_strength\n",
      "No. Observations: 968     Method:             ML           \n",
      "No. Groups:       226     Scale:              0.0593       \n",
      "Min. group size:  1       Log-Likelihood:     -34.7148     \n",
      "Max. group size:  24      Converged:          Yes          \n",
      "Mean group size:  4.3                                      \n",
      "------------------------------------------------------------\n",
      "               Coef.  Std.Err.    z    P>|z|  [0.025  0.975]\n",
      "------------------------------------------------------------\n",
      "Intercept      0.050     0.009  5.390  0.000   0.032   0.069\n",
      "subject Var    0.004     0.008                              \n",
      "===========================================================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Mixed Linear Model Regression Results\n",
      "=============================================================\n",
      "Model:              MixedLM Dependent Variable: tilt_strength\n",
      "No. Observations:   968     Method:             ML           \n",
      "No. Groups:         226     Scale:              0.0592       \n",
      "Min. group size:    1       Log-Likelihood:     -34.0300     \n",
      "Max. group size:    24      Converged:          Yes          \n",
      "Mean group size:    4.3                                      \n",
      "-------------------------------------------------------------\n",
      "                   Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-------------------------------------------------------------\n",
      "Intercept           0.065    0.017  3.854 0.000  0.032  0.098\n",
      "C(region)[T.PHG]   -0.025    0.022 -1.158 0.247 -0.068  0.017\n",
      "C(region)[T.dlpfc] -0.016    0.020 -0.808 0.419 -0.055  0.023\n",
      "subject Var         0.004    0.008                           \n",
      "=============================================================\n",
      "\n",
      "Main effect of region for FR experiment\n",
      "LR test, p value: 1.3695, 0.50421148\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Mixed Linear Model Regression Results\n",
      "===========================================================\n",
      "Model:            MixedLM Dependent Variable: tilt_strength\n",
      "No. Observations: 311     Method:             ML           \n",
      "No. Groups:       101     Scale:              0.0513       \n",
      "Min. group size:  1       Log-Likelihood:     4.8220       \n",
      "Max. group size:  8       Converged:          Yes          \n",
      "Mean group size:  3.1                                      \n",
      "------------------------------------------------------------\n",
      "               Coef.  Std.Err.    z    P>|z|  [0.025  0.975]\n",
      "------------------------------------------------------------\n",
      "Intercept      0.065     0.016  4.152  0.000   0.034   0.095\n",
      "subject Var    0.006     0.017                              \n",
      "===========================================================\n",
      "\n",
      "           Mixed Linear Model Regression Results\n",
      "===========================================================\n",
      "Model:            MixedLM Dependent Variable: tilt_strength\n",
      "No. Observations: 311     Method:             ML           \n",
      "No. Groups:       101     Scale:              0.0506       \n",
      "Min. group size:  1       Log-Likelihood:     5.9159       \n",
      "Max. group size:  8       Converged:          Yes          \n",
      "Mean group size:  3.1                                      \n",
      "-----------------------------------------------------------\n",
      "                 Coef.  Std.Err.   z    P>|z| [0.025 0.975]\n",
      "-----------------------------------------------------------\n",
      "Intercept         0.097    0.027  3.592 0.000  0.044  0.151\n",
      "C(region)[T.PHG] -0.046    0.031 -1.481 0.139 -0.106  0.015\n",
      "subject Var       0.007    0.018                           \n",
      "===========================================================\n",
      "\n",
      "Main effect of region for catFR experiment\n",
      "LR test, p value: 2.1879, 0.33489792\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home1/noaherz/.conda/envs/cml3/lib/python3.7/site-packages/statsmodels/regression/mixed_linear_model.py:2149: ConvergenceWarning: The MLE may be on the boundary of the parameter space.\n",
      "  warnings.warn(msg, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# model for a single experiment (catFR/FR)\n",
    "# dependent variable: tilt strength (diff between correct recalls-intrusions)\n",
    "\n",
    "# region main effect\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ 1', groups='subject', data=combined_data_new[combined_data_new['experiment']=='FR']) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ C(region)', groups='subject', data=combined_data_new[combined_data_new['experiment']=='FR']) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_region =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of region for FR experiment')\n",
    "lr, p = lrtest(llf_empty, llf_region, df = df_region) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))\n",
    "\n",
    "# region main effect\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ 1', groups='subject', data=combined_data_new[combined_data_new['experiment']=='catFR']) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_empty =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "model = sm.MixedLM.from_formula('tilt_strength ~ C(region)', groups='subject', data=combined_data_new[combined_data_new['experiment']=='catFR']) \n",
    "result=model.fit(reml=False, method='nm')\n",
    "llf_region =result.llf #log likelihood\n",
    "print(result.summary())\n",
    "\n",
    "# Likelihood ratio tests for main effects\n",
    "print('Main effect of region for catFR experiment')\n",
    "lr, p = lrtest(llf_empty, llf_region, df = df_region) # Degrees of freedom = number of regressors (i.e. columns in summary table) added when including the effect of interest, for categorical variable with two groups this is df = 1\n",
    "print('LR test, p value: {:.4f}, {:.8f}'.format(lr, p))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cml3",
   "language": "python",
   "name": "cml3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
